# main.py
import os, logging, json, time, re
from datetime import datetime
from contextlib import contextmanager

from flask import Flask, request, abort, jsonify
from telebot import TeleBot, types
from telebot.types import Update
from openai import OpenAI
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –õ–û–ì–ò
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("innertrade")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ENV
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL   = os.getenv("DATABASE_URL")
PUBLIC_URL     = os.getenv("PUBLIC_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://innertrade-bot.onrender.com
WEBHOOK_PATH   = os.getenv("WEBHOOK_PATH", "webhook")
TG_WEBHOOK_SECRET = os.getenv("TG_WEBHOOK_SECRET")

if not TELEGRAM_TOKEN:   raise RuntimeError("TELEGRAM_TOKEN missing")
if not OPENAI_API_KEY:   raise RuntimeError("OPENAI_API_KEY missing")
if not PUBLIC_URL:       raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")
if not TG_WEBHOOK_SECRET:raise RuntimeError("TG_WEBHOOK_SECRET missing")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# OPENAI (–¥–ª—è ¬´—É–º–Ω–æ–≥–æ¬ª –æ—Ç–≤–µ—Ç–∞ –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
oa = OpenAI(api_key=OPENAI_API_KEY)

def gpt_reply(system_prompt: str, user_prompt: str, max_tokens: int = 400) -> str:
    try:
        rsp = oa.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role":"system","content":system_prompt},
                {"role":"user","content":user_prompt}
            ],
            temperature=0.3,
            max_tokens=max_tokens,
        )
        return rsp.choices[0].message.content.strip()
    except Exception as e:
        log.warning(f"OpenAI fallback error: {e}")
        return ""  # –º–æ–ª—á–∞, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Å—Ü–µ–Ω–∞—Ä–∏–π

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# DB
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
engine = None
if DATABASE_URL:
    engine = create_engine(DATABASE_URL, pool_pre_ping=True)
    log.info("DB engine ready")
else:
    log.warning("DATABASE_URL not set ‚Äî running without DB")

@contextmanager
def db_conn(user_id: int | None = None):
    """
    –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î + –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç—å RLS-–∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω).
    """
    if not engine:
        yield None
        return
    conn = engine.connect()
    try:
        if user_id is not None:
            try:
                conn.exec_driver_sql("SET app.user_id = :uid", {"uid": str(user_id)})
            except SQLAlchemyError:
                # RLS –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â—ë –Ω–µ –≤–∫–ª—é—á–µ–Ω ‚Äî —ç—Ç–æ –æ–∫
                pass
        yield conn
    finally:
        conn.close()

def db_exec(conn, sql: str, params: dict | None = None):
    if not conn:
        return None
    return conn.execute(text(sql), params or {})

def save_state(user_id: int, intent: str, step: str | None, data: dict | None = None):
    with db_conn(user_id) as conn:
        if not conn: 
            return
        db_exec(conn, """
            INSERT INTO user_state (user_id, intent, step, data, updated_at)
            VALUES (:uid, :intent, :step, COALESCE(:data, '{}'::jsonb), now())
            ON CONFLICT (user_id) DO UPDATE
              SET intent=:intent, step=:step, data=COALESCE(:data, user_state.data), updated_at=now()
        """, {"uid": user_id, "intent": intent, "step": step, "data": json.dumps(data or {})})

def get_state(user_id: int) -> dict:
    with db_conn(user_id) as conn:
        if not conn: 
            return {"intent":"idle","step":None}
        row = db_exec(conn, "SELECT intent, step, data FROM user_state WHERE user_id=:uid", {"uid": user_id}).fetchone()
        if not row:
            return {"intent":"idle","step":None}
        return {"intent": row[0], "step": row[1], "data": row[2] or {}}

def ensure_error_record(user_id: int) -> int:
    """
    –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π errors.id –¥–ª—è —é–∑–µ—Ä–∞ (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id.
    """
    with db_conn(user_id) as conn:
        if not conn:
            return -1
        row = db_exec(conn, "SELECT id FROM errors WHERE user_id=:uid ORDER BY id DESC LIMIT 1", {"uid": user_id}).fetchone()
        if row:
            return row[0]
        # —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –∫–∞—Ä–∫–∞—Å
        row = db_exec(conn, """
            INSERT INTO errors(user_id, error_text, created_at)
            VALUES (:uid, '', now())
            RETURNING id
        """, {"uid": user_id}).fetchone()
        return row[0]

def upd_error(user_id: int, fields: dict):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å errors –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É id.
    """
    if not fields:
        return
    err_id = ensure_error_record(user_id)
    if err_id < 0:
        return
    sets = []
    params = {"id": err_id}
    for k, v in fields.items():
        sets.append(f"{k} = :{k}")
        params[k] = v
    sql = f"UPDATE errors SET {', '.join(sets)} WHERE id=:id"
    with db_conn(user_id) as conn:
        if conn:
            db_exec(conn, sql, params)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# TELEGRAM
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown", threaded=True)

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –£–ú–ù–´–ô –û–¢–í–ï–¢ –í–ù–ï –°–¶–ï–ù–ê–†–ò–Ø (GPT)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
SCENARIO_SYSTEM = (
    "–¢—ã ‚Äî –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. "
    "–ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –∑–∞–¥–∞—ë—Ç —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤–Ω–µ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è, "
    "—Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å –ø–æ —Å—É—Ç–∏ (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –∑–∞—Ç–µ–º –º—è–≥–∫–æ –≤–µ—Ä–Ω–∏ –∫ —Ç–µ–∫—É—â–µ–º—É —à–∞–≥—É, "
    "–∫–æ—Ä–æ—Ç–∫–æ –ø–æ–≤—Ç–æ—Ä–∏–≤ –≤–æ–ø—Ä–æ—Å —à–∞–≥–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ. –ù–µ —É—Ö–æ–¥–∏ –≤ –¥–ª–∏–Ω–Ω—ã–µ –ª–µ–∫—Ü–∏–∏."
)

def clarify_then_return(step_name: str, user_text: str, question_for_step: str) -> str:
    prompt = (
        f"–¢–µ–∫—É—â–∏–π —à–∞–≥: {step_name}\n"
        f"–í–æ–ø—Ä–æ—Å —à–∞–≥–∞: {question_for_step}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞: {user_text}\n"
        "–°–Ω–∞—á–∞–ª–∞ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –µ–≥–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ, –∑–∞—Ç–µ–º –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –ø–æ–≤—Ç–æ—Ä–∏ –≤–æ–ø—Ä–æ—Å —à–∞–≥–∞."
    )
    msg = gpt_reply(SCENARIO_SYSTEM, prompt, max_tokens=300)
    if not msg:
        # fallback: —Ç–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–æ–ø—Ä–æ—Å —à–∞–≥–∞
        return question_for_step
    return msg

def looks_like_clarifying_q(text: str) -> bool:
    t = text.lower().strip()
    if "?" in t: return True
    if any(w in t for w in ["—á—Ç–æ –∑–Ω–∞—á–∏—Ç", "–Ω–µ –ø–æ–Ω–∏–º–∞—é", "–∫–æ–≥–¥–∞", "–∫–∞–∫ –∏–º–µ–Ω–Ω–æ", "–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏", "–Ω–µ –ø–æ–π–º—É"]):
        return True
    return False

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –°–¶–ï–ù–ê–†–ò–ô: –ú1/–£—Ä–æ–∫ 1 (–û—à–∏–±–∫–∞ ‚Üí MERCEDES ‚Üí TOTE)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
M1Q = {
    "ask_error": "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ *–ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞*.\n"
                 "–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.",
    "mer_context":  "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç –æ—à–∏–±–∫–µ? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
    "mer_emotions": "–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? –ö–∞–∫ –æ—â—É—â–∞–µ—Ç—Å—è –≤ —Ç–µ–ª–µ? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)",
    "mer_thoughts": "–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (—Ü–∏—Ç–∞—Ç–∞–º–∏, 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã)",
    "mer_behavior": "–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≥–æ–ª–∞–º–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).",
    "mer_beliefs":  "–£–ë–ï–ñ–î–ï–ù–ò–Ø/–¶–ï–ù–ù–û–°–¢–ò. –ü–æ—á–µ–º—É ¬´–Ω–∞–¥–æ —Ç–∞–∫¬ª? –ö–∞–∫–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–æ—è—Ç –∑–∞ —ç—Ç–∏–º? (1‚Äì2 —Ç–µ–∑–∏—Å–∞)",
    "mer_state":    "–°–û–°–¢–û–Ø–ù–ò–ï. –í –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±—ã–ª –ø–µ—Ä–µ–¥/–≤–æ –≤—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ (—Ç—Ä–µ–≤–æ–≥–∞/–∞–∑–∞—Ä—Ç/–∫–æ–Ω—Ç—Ä–æ–ª—å –∏ —Ç.–ø.)?",
    "new_goal":     "–¢–µ–ø–µ—Ä—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π *–ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å/–Ω–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ* (–Ω–∞–±–ª—é–¥–∞–µ–º–æ): —á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏?",
    "tote_goal":    "TOTE ‚Äî –¶–ï–õ–¨ (Test 1). –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ü–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–æ–∫.\n"
                    "–ù–∞–ø—Ä.: ¬´–≤ 3 –±–ª–∏–∂–∞–π—à–∏—Ö —Å–¥–µ–ª–∫–∞—Ö –Ω–µ –¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –∏ —Ç–µ–π–∫ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª.",
    "tote_ops":     "TOTE ‚Äî –û–ü–ï–†–ê–¶–ò–ò (Operate). –ü–µ—Ä–µ—á–∏—Å–ª–∏ 2‚Äì4 —à–∞–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —É–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–ª—å.\n"
                    "–ù–∞–ø—Ä.: —á–µ–∫-–ª–∏—Å—Ç –≤—Ö–æ–¥–∞; –ø–∞—É–∑–∞/–¥—ã—Ö–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞; —Ç–∞–π–º–µ—Ä 5 –º–∏–Ω—É—Ç; –∑–∞–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–µ.",
    "tote_check":   "TOTE ‚Äî –ü–†–û–í–ï–†–ö–ê (Test 2). –ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ —Ü–µ–ª—å —É–¥–µ—Ä–∂–∞–Ω–∞? –ö—Ä–∏—Ç–µ—Ä–∏–π ¬´–¥–∞/–Ω–µ—Ç¬ª.",
    "tote_exit":    "TOTE ‚Äî –í–´–•–û–î (Exit). –ï—Å–ª–∏ *–¥–∞* ‚Äî —á–µ–º –∑–∞–∫—Ä–µ–ø–∏—à—å —É—Å–ø–µ—Ö; –µ—Å–ª–∏ *–Ω–µ—Ç* ‚Äî —á—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—à—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑?"
}

NEXT = {
    "ask_error": "mer_context",
    "mer_context": "mer_emotions",
    "mer_emotions": "mer_thoughts",
    "mer_thoughts": "mer_behavior",
    "mer_behavior": "mer_beliefs",
    "mer_beliefs":  "mer_state",
    "mer_state":    "new_goal",
    "new_goal":     "tote_goal",
    "tote_goal":    "tote_ops",
    "tote_ops":     "tote_check",
    "tote_check":   "tote_exit",
    "tote_exit":    None
}

def set_intent_and_step(uid: int, intent: str, step: str):
    save_state(uid, intent=intent, step=step, data=None)

def send_step(uid: int, chat_id: int, step: str):
    save_state(uid, intent="lesson1", step=step, data=None)
    bot.send_message(chat_id, M1Q[step], reply_markup=main_menu())

def accept_or_clarify(step: str, user_text: str, chat_id: int, uid: int) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø—Ä–∏–Ω—è–ª–∏ –æ—Ç–≤–µ—Ç –∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ.
    –ï—Å–ª–∏ —ç—Ç–æ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –¥–∞—ë–º ¬´—É–º–Ω—ã–π¬ª –æ—Ç–≤–µ—Ç –∏ –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —à–∞–≥–µ.
    """
    if looks_like_clarifying_q(user_text):
        bot.send_message(chat_id, clarify_then_return(step, user_text, M1Q[step]), reply_markup=main_menu())
        return False
    # –ø—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–Ω–µ –ø—É—Å—Ç–æ, –Ω–µ –æ–¥–Ω–æ —Å–ª–æ–≤–æ)
    if len(user_text.strip()) < 3:
        bot.send_message(chat_id, "–î–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—É—Ç–∏.", reply_markup=main_menu())
        return False
    return True

def handle_step(uid: int, chat_id: int, step: str, text_in: str):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ errors —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
    mapping = {
        "ask_error":   {"error_text": text_in},
        "mer_context": {"pattern_behavior": None, "pattern_emotion": None, "pattern_thought": None},  # –∑–∞–ø–æ–ª–Ω–∏–º –Ω–∏–∂–µ —á–∞—Å—Ç–∏—á–Ω–æ
        "mer_emotions":{"pattern_emotion": text_in},
        "mer_thoughts":{"pattern_thought": text_in},
        "mer_behavior":{"pattern_behavior": text_in},
        "mer_beliefs": {},  # –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –ø–æ–ª–µ, –µ—Å–ª–∏ –µ—Å—Ç—å: positive_goal –ø–æ–∑–∂–µ
        "mer_state":   {},  # —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –≤ summary –Ω–µ —Ö—Ä–∞–Ω–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º; –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –≤ pattern_* –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
        "new_goal":    {"positive_goal": text_in},
        "tote_goal":   {"tote_goal": text_in},
        "tote_ops":    {"tote_ops": text_in},
        "tote_check":  {"tote_check": text_in},
        "tote_exit":   {"tote_exit": text_in}
    }

    # –î–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞/—É–±–µ–∂–¥–µ–Ω–∏–π/—Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –Ω–µ —Ç–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç: –¥–æ–±–∞–≤–∏–º –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—è–º, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ
    if step == "mer_context":
        # –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–ª–∏—è–µ—Ç –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –Ω–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –∫–∞–∫ –ø—Ä–µ—Ñ–∏–∫—Å –∫ behavior –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        pass
    elif step == "mer_beliefs":
        # —Å–æ—Ö—Ä–∞–Ω–∏–º —É–±–µ–∂–¥–µ–Ω–∏—è –≤ positive_goal? –Ω–µ—Ç; —Å–æ–∑–¥–∞–¥–∏–º –ª—ë–≥–∫–∏–π –∫–æ–Ω–∫–∞—Ç –≤ pattern_thought (–∫–∞–∫ ¬´—É—Å—Ç–∞–Ω–æ–≤–∫–∞¬ª)
        pass
    elif step == "mer_state":
        # –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –¥–æ–ø–∏—à–µ–º –∫ pattern_emotion –≤ —Å–∫–æ–±–∫–∞—Ö, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ –µ—Å—Ç—å
        pass

    # –ø—Ä–∏–Ω—è—Ç–∏–µ/—É—Ç–æ—á–Ω–µ–Ω–∏–µ
    if not accept_or_clarify(step, text_in, chat_id, uid):
        return

    # —Ç–æ–Ω–∫–∞—è —Å–∫–ª–µ–π–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ–π:
    if step == "mer_beliefs":
        # –ø–æ–¥—Ç—è–Ω–µ–º –∏ –¥–æ–ø–∏—à–µ–º –∫ pattern_thought (–∫–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
        with db_conn(uid) as conn:
            if conn:
                row = db_exec(conn, "SELECT id, pattern_thought FROM errors WHERE user_id=:uid ORDER BY id DESC LIMIT 1", {"uid": uid}).fetchone()
                if row:
                    base = row[1] or ""
                    new_val = (base + ("\n–£—Å—Ç–∞–Ω–æ–≤–∫–∏: " if base else "–£—Å—Ç–∞–Ω–æ–≤–∫–∏: ") + text_in).strip()
                    upd_error(uid, {"pattern_thought": new_val})
    elif step == "mer_state":
        with db_conn(uid) as conn:
            if conn:
                row = db_exec(conn, "SELECT id, pattern_emotion FROM errors WHERE user_id=:uid ORDER BY id DESC LIMIT 1", {"uid": uid}).fetchone()
                if row:
                    base = row[1] or ""
                    new_val = (base + ("; " if base else "") + f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {text_in}").strip()
                    upd_error(uid, {"pattern_emotion": new_val})

    # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ mapping
    fields = mapping.get(step)
    if fields is not None:
        # —É–¥–∞–ª–∏–º –ø—É—Å—Ç—ã–µ None
        clean_fields = {k:v for k,v in fields.items() if v is not None}
        if clean_fields:
            upd_error(uid, clean_fields)

    nxt = NEXT[step]
    if nxt:
        send_step(uid, chat_id, nxt)
        return

    # —Ñ–∏–Ω–∞–ª —É—Ä–æ–∫–∞ ‚Äî –≤—ã–¥–∞—ë–º —á–µ–∫-–ª–∏—Å—Ç—ã –∏ –∫–æ—Ä–æ—Ç–∫—É—é —Å–≤–æ–¥–∫—É
    checklist_pre = "–ß–µ–∫-–ª–∏—Å—Ç *–ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º*: 1) —Å–µ—Ç–∞–ø 100% –µ—Å—Ç—å; 2) —Ä–µ—Å—É—Ä—Å –æ–∫; 3) –ø–ª–∞–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è; 4) –æ–±—ä—ë–º –∏ —Ä–∏—Å–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã."
    checklist_post = "–ß–µ–∫-–ª–∏—Å—Ç *–ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞*: 1) –Ω–µ —Ç—Ä–æ–≥–∞—é —Å—Ç–æ–ø/—Ç–µ–π–∫; 2) —Å–≤–µ—Ä–∫–∞ –ø–æ –ø–ª–∞–Ω—É; 3) —Ñ–∏–∫—Å–∏—Ä—É—é –∏—Å—Ö–æ–¥ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é; 4) –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–º–µ—Ç–∫–∞."
    upd_error(uid, {"checklist_pre": checklist_pre, "checklist_post": checklist_post})

    bot.send_message(chat_id,
        "–ì–æ—Ç–æ–≤–æ! –ú—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –æ—à–∏–±–∫—É, –ø–∞—Ç—Ç–µ—Ä–Ω, —Ü–µ–ª—å –∏ TOTE.\n"
        "–Ø –¥–æ–±–∞–≤–∏–ª –¥–≤–∞ —á–µ–∫-–ª–∏—Å—Ç–∞ ‚Äî –∏—Ö –º–æ–∂–Ω–æ –∫–æ–ø–∏–ø–∞—Å—Ç–∏—Ç—å –≤ –∑–∞–º–µ—Ç–∫–∏.\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∏–º –ú–æ–¥—É–ª—å 1 –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ ¬´üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é¬ª?", reply_markup=main_menu())
    save_state(uid, intent="idle", step=None)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –•–ï–ù–î–õ–ï–†–´
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m):
    uid = m.from_user.id
    save_state(uid, "idle", None)
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /status /ping",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    st = get_state(m.from_user.id)
    bot.send_message(m.chat.id, f"intent: `{st.get('intent')}`\nstep: `{st.get('step')}`", reply_markup=main_menu())

# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def btn_error(m):
    uid = m.from_user.id
    set_intent_and_step(uid, "lesson1", "ask_error")
    bot.send_message(m.chat.id, M1Q["ask_error"], reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def btn_strategy(m):
    uid = m.from_user.id
    save_state(uid, "strategy", None)
    bot.send_message(
        m.chat.id,
        "–û–∫, —Å–æ–±–µ—Ä—ë–º –¢–° –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É (–ú2):\n"
        "1) –ø–æ–¥—Ö–æ–¥/–¢–§/–≤—Ö–æ–¥ ‚Üí 2) —Å—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥/—Ä–∏—Å–∫ ‚Üí –≤—ã–ø—É—Å–∫ v0.1.\n"
        "–ì–æ—Ç–æ–≤ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ú1/–£—Ä–æ–∫ 1.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def btn_passport(m):
    uid = m.from_user.id
    save_state(uid, "passport", None)
    bot.send_message(
        m.chat.id,
        "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞ ‚Äî –æ–±–Ω–æ–≤–∏–º –ø–æ–∑–∂–µ (–ø–æ—Å–ª–µ –ú1/–£—Ä–æ–∫ 1): —Ä—ã–Ω–∫–∏, –¢–§, —Å—Ç–∏–ª—å, —Ä–∏—Å–∫, –∞—Ä—Ö–µ—Ç–∏–ø/—Ä–æ–ª–∏, —Ç–æ–ø-–æ—à–∏–±–∫–∏.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def btn_week(m):
    uid = m.from_user.id
    save_state(uid, "week_panel", None)
    bot.send_message(
        m.chat.id,
        "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏: —Ñ–æ–∫—É—Å-—É–∑–µ–ª, 1‚Äì2 —Ü–µ–ª–∏, –ª–∏–º–∏—Ç—ã, –∫–æ—Ä–æ—Ç–∫–∏–µ —á–µ–∫-–∏–Ω—ã, —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞. –ü–æ–¥–∫–ª—é—á–∏–º –ø–æ—Å–ª–µ –ú1.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def btn_panic(m):
    uid = m.from_user.id
    save_state(uid, "panic", None)
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ø–∞—É–∑–∞ 2 –º–∏–Ω\n2) –∑–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
        "4) –∑–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä\n5) –≤–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def btn_starthelp(m):
    uid = m.from_user.id
    save_state(uid, "start_help", None)
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫: 1) —Ä–∞–∑–±–µ—Ä—ë–º –æ–¥–Ω—É –æ—à–∏–±–∫—É (–ú1/–£—Ä–æ–∫ 1), 2) –≤—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏, 3) —Å–æ–±–µ—Ä—ë–º –∫–∞—Ä–∫–∞—Å –¢–° (–ú2).\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å –æ—à–∏–±–∫–∏?", reply_markup=main_menu()
    )

# –¢–µ–∫—Å—Ç –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é (–∏ –æ—Ñ—Ñ-—Å–∫—Ä–∏–ø—Ç)
@bot.message_handler(content_types=["text"])
def on_text(m):
    uid = m.from_user.id
    st = get_state(uid)
    intent = st.get("intent") or "idle"
    step = st.get("step")

    # –µ—Å–ª–∏ –º—ã –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ú1 ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–≥
    if intent == "lesson1" and step in M1Q:
        handle_step(uid, m.chat.id, step, m.text.strip())
        return

    # –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Äî –ª—ë–≥–∫–∏–π GPT-–æ—Ç–≤–µ—Ç (–∫–æ—Ä–æ—Ç–∫–æ) + –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –º–µ–Ω—é
    # (—á—Ç–æ–±—ã –±–æ—Ç –≤—ã–≥–ª—è–¥–µ–ª –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ)
    reply = gpt_reply(
        "–¢—ã ‚Äî –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (–¥–æ 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), –¥—Ä—É–∂–µ–ª—é–±–Ω–æ.",
        m.text.strip(), max_tokens=180
    )
    if not reply:
        reply = "–ü—Ä–∏–Ω—è–ª. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start."
    bot.send_message(m.chat.id, reply, reply_markup=main_menu())

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# FLASK (–≤–µ–±—Ö—É–∫ + health)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
app = Flask(__name__)
MAX_BODY = 1_000_000  # 1 MB

@app.get("/")
def root():
    return "OK"

@app.get("/health")
def health():
    return jsonify({"status":"ok","time":datetime.utcnow().isoformat()+"Z"})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ö–µ–¥–µ—Ä –∏ –ª–∏–º–∏—Ç —Ç–µ–ª–∞
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > MAX_BODY:
        abort(413)

    try:
        json_str = request.get_data(as_text=True)
        update = Update.de_json(json.loads(json_str))
        bot.process_new_updates([update])
    except Exception as e:
        log.error(f"webhook error: {e}")
        abort(500)
    return "OK"

def install_webhook():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ —Å —Å–µ–∫—Ä–µ—Ç–æ–º. –û—Ç–∫–ª—é—á–∞–µ–º polling-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã.
    url = f"{PUBLIC_URL}/{WEBHOOK_PATH}"
    ok = bot.set_webhook(
        url=url,
        secret_token=TG_WEBHOOK_SECRET,
        drop_pending_updates=True,
        max_connections=40,
        allowed_updates=["message","callback_query"]
    )
    if ok:
        log.info(f"Webhook set: {url}")
    else:
        log.error("Failed to set webhook")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ENTRYPOINT
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    install_webhook()
    port = int(os.getenv("PORT", "10000"))
    log.info(f"Starting Flask on 0.0.0.0:{port}")
    app.run(host="0.0.0.0", port=port)
