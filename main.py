import os, json, time, logging, traceback
from datetime import datetime, timezone
from functools import wraps

from flask import Flask, request, abort, jsonify

import telebot
from telebot import types

from sqlalchemy import create_engine, text
from sqlalchemy.engine import Engine

# ---------- ENV ----------
TOKEN               = os.getenv("TELEGRAM_TOKEN", "")
DATABASE_URL        = os.getenv("DATABASE_URL", "")
PUBLIC_URL          = os.getenv("PUBLIC_URL", "")                     # https://innertrade-bot.onrender.com
WEBHOOK_PATH        = os.getenv("WEBHOOK_PATH", "wbhk_9t3x")
TG_WEBHOOK_SECRET   = os.getenv("TG_WEBHOOK_SECRET", "")
ALLOW_SET_WEBHOOK   = os.getenv("ALLOW_SET_WEBHOOK", "1") in ("1","true","True")
LOG_LEVEL           = os.getenv("LOG_LEVEL", "INFO")
OFFSCRIPT_ENABLED   = os.getenv("OFFSCRIPT_ENABLED", "1") in ("1","true","True")

OPENAI_API_KEY      = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL        = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

# ---------- LOG ----------
logging.basicConfig(level=getattr(logging, LOG_LEVEL.upper(), logging.INFO))
log = logging.getLogger("innertrade")

# ---------- GUARDS ----------
if not TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN missing")
if not PUBLIC_URL:
    raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")

# ---------- DB ----------
engine: Engine = create_engine(DATABASE_URL, pool_pre_ping=True, pool_recycle=300, future=True)

DDL = """
CREATE TABLE IF NOT EXISTS users (
  user_id     BIGINT PRIMARY KEY,
  mode        TEXT NOT NULL DEFAULT 'course',
  created_at  TIMESTAMPTZ DEFAULT now(),
  updated_at  TIMESTAMPTZ DEFAULT now()
);
CREATE TABLE IF NOT EXISTS user_state (
  user_id     BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
  intent      TEXT,
  step        TEXT,
  data        JSONB,
  updated_at  TIMESTAMPTZ DEFAULT now()
);
"""

def db_init():
    with engine.begin() as conn:
        conn.execute(text(DDL))

def save_state(uid: int, intent: str=None, step: str=None, merge_data: dict=None):
    with engine.begin() as conn:
        conn.execute(text("INSERT INTO users(user_id) VALUES (:uid) ON CONFLICT (user_id) DO NOTHING"), {"uid": uid})
        # fetch existing state
        row = conn.execute(text("SELECT data FROM user_state WHERE user_id=:uid"), {"uid": uid}).fetchone()
        cur = row[0] if row and row[0] else {}
        if merge_data:
            cur.update(merge_data)
        conn.execute(text("""
            INSERT INTO user_state(user_id, intent, step, data, updated_at)
            VALUES (:uid, :intent, :step, CAST(:data AS JSONB), now())
            ON CONFLICT (user_id) DO UPDATE SET
              intent = COALESCE(EXCLUDED.intent, user_state.intent),
              step   = COALESCE(EXCLUDED.step,   user_state.step),
              data   = COALESCE(EXCLUDED.data,   user_state.data),
              updated_at = now()
        """), {"uid": uid, "intent": intent, "step": step, "data": json.dumps(cur)})

def get_state(uid: int):
    with engine.begin() as conn:
        row = conn.execute(text("SELECT intent, step, data FROM user_state WHERE user_id=:uid"), {"uid": uid}).fetchone()
    if not row:
        return {"intent": None, "step": None, "data": {}}
    return {"intent": row[0], "step": row[1], "data": row[2] or {}}

# ---------- OPENAI (off-script) ----------
def gpt_reply(style_you: str, user_text: str, context_hint: str):
    """
    –õ—ë–≥–∫–∏–π –æ—Ñ—Ñ—Å–∫—Ä–∏–ø—Ç-–æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None.
    """
    if not (OFFSCRIPT_ENABLED and OPENAI_API_KEY):
        return None
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        system_prompt = (
            "–¢—ã –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, —Å–ø–æ–∫–æ–π–Ω–æ –∏ –ø–æ –¥–µ–ª—É, "
            "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Ç–æ–Ω –±–µ—Å–µ–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π –∫ —Ü–µ–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. "
            f"–û–±—Ä–∞—â–∞–π—Å—è –Ω–∞ ¬´{style_you}¬ª. –ò–∑–±–µ–≥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∂–∞—Ä–≥–æ–Ω–∞. "
            "–í –∫–æ–Ω—Ü–µ –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ."
        )
        msg = [
            {"role":"system","content": system_prompt},
            {"role":"user","content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_hint}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {user_text}"}
        ]
        r = client.chat.completions.create(model=OPENAI_MODEL, messages=msg, temperature=0.5, max_tokens=180)
        return r.choices[0].message.content.strip()
    except Exception as e:
        log.warning("gpt_reply failed: %s", e)
        return None

# ---------- TELEGRAM ----------
bot = telebot.TeleBot(TOKEN, parse_mode="HTML", threaded=True)

MAIN_KB = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
MAIN_KB.add(
    types.KeyboardButton("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞"),
    types.KeyboardButton("üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"),
    types.KeyboardButton("üìÑ –ü–∞—Å–ø–æ—Ä—Ç"),
    types.KeyboardButton("üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏"),
    types.KeyboardButton("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª"),
    types.KeyboardButton("ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å"),
)

def greet(uid: int, first_name: str):
    save_state(uid, intent="greet", step="ask_form", merge_data={"name": first_name, "you": None})
    return ("üëã –ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏, —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ.\n"
            "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.\n\n"
            "–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî <b>—Ç—ã</b> –∏–ª–∏ <b>–≤—ã</b>? (–Ω–∞–ø–∏—à–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ)")

def confirm_you(uid: int, you: str):
    you = you.lower().strip()
    you = "—Ç—ã" if you.startswith("—Ç") else "–≤—ã"
    save_state(uid, intent="greet", step="free_talk", merge_data={"you": you, "free_turns": 0})
    return f"–ü—Ä–∏–Ω—è—Ç–æ ({you}). –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª–∏—Ç, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ."

def want_error_flow(uid: int):
    save_state(uid, intent="error", step="ask_error", merge_data={"mercedes": {}})
    return ("–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –Ω–∞ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.")

def ask_mercedes(uid: int, block: str):
    prompts = {
        "context": "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
        "emotions": "–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)",
        "thoughts": "–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (1‚Äì2 —Ñ—Ä–∞–∑—ã)",
        "behavior": "–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≥–ª–∞–≥–æ–ª–∞–º–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
    }
    save_state(uid, step=f"ask_{block}")
    return prompts[block]

def mercedes_summary(m):
    d = m.get("mercedes", {})
    ctx = d.get("context") or "‚Äî"
    emo = d.get("emotions") or "‚Äî"
    tho = d.get("thoughts") or "‚Äî"
    beh = d.get("behavior") or "‚Äî"
    return (f"<b>–†–µ–∑—é–º–µ</b>:\n"
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {ctx}\n"
            f"–≠–º–æ—Ü–∏–∏: {emo}\n"
            f"–ú—ã—Å–ª–∏: {tho}\n"
            f"–ü–æ–≤–µ–¥–µ–Ω–∏–µ: {beh}")

def ask_new_goal(uid: int):
    save_state(uid, step="ask_new_goal")
    return "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å –æ–¥–Ω–∏–º –∫–æ—Ä–æ—Ç–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º (—á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)?"

def ask_tote(uid: int, which: str):
    labels = {
        "goal":  "TOTE ‚Äî –¶–µ–ª—å (Test 1). –ö–∞–∫ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –∂–µ–ª–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 —Å–¥–µ–ª–∫–∏?",
        "ops":   "TOTE ‚Äî –î–µ–π—Å—Ç–≤–∏—è (Operate). –ö–∞–∫–∏–µ 2‚Äì3 —à–∞–≥–∞ –ø–æ–º–æ–≥—É—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è —ç—Ç–æ–π —Ü–µ–ª–∏?",
        "check": "TOTE ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞ (Test 2). –ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? (–∫—Ä–∏—Ç–µ—Ä–∏–∏)",
        "exit":  "TOTE ‚Äî –í—ã—Ö–æ–¥ (Exit). –ß—Ç–æ —É—Å–∏–ª–∏–º/–∏—Å–ø—Ä–∞–≤–∏–º –ø–æ –∏—Ç–æ–≥—É?"
    }
    save_state(uid, step=f"ask_tote_{which}")
    return labels[which]

def finalize_error(uid: int, data: dict):
    save_state(uid, intent="idle", step=None)
    return ("–ì–æ—Ç–æ–≤–æ. –ó–∞–ø–∏—Å–∞–ª –∫—Ä–∞—Ç–∫–∏–π –ø–ª–∞–Ω.\n"
            "–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.")

# ---------- COMMANDS ----------
@bot.message_handler(commands=['start','reset'])
def cmd_start(m: types.Message):
    uid = m.from_user.id
    msg = greet(uid, m.from_user.first_name or "–¥—Ä—É–≥")
    bot.send_message(uid, msg, reply_markup=MAIN_KB)

@bot.message_handler(commands=['ping'])
def cmd_ping(m: types.Message):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=['status'])
def cmd_status(m: types.Message):
    uid = m.from_user.id
    st = get_state(uid)
    now = datetime.now(timezone.utc).isoformat(timespec="seconds")
    out = {
        "ok": True,
        "time": now,
        "intent": st.get("intent"),
        "step": st.get("step"),
        "db": "ok"
    }
    bot.send_message(uid, f"<pre>{json.dumps(out, ensure_ascii=False, indent=2)}</pre>")

# ---------- MENU/INTENTS ----------
@bot.message_handler(func=lambda m: m.text in (
    "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞","üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é","üìÑ –ü–∞—Å–ø–æ—Ä—Ç","üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏","üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª","ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å"))
def menu_click(m: types.Message):
    uid = m.from_user.id
    txt = m.text
    if txt == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞":
        bot.send_message(uid, want_error_flow(uid))
    elif txt == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é":
        save_state(uid, intent="strategy", step="intro")
        bot.send_message(uid, "–û–∫, —Å–æ–±–µ—Ä–µ–º –¢–° –±–∞–∑–æ–≤–æ –≤ 2 —à–∞–≥–∞: 1) –≤—Ö–æ–¥/–ø–æ–¥—Ö–æ–¥/–¢–§ 2) —Å—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ/–ª–∏–º–∏—Ç—ã.\n–ì–æ—Ç–æ–≤?")
    elif txt == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç":
        save_state(uid, intent="passport", step="intro")
        bot.send_message(uid, "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. 1/6) –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å?")
    elif txt == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏":
        save_state(uid, intent="week_panel", step="focus")
        bot.send_message(uid, "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏: 1) —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ 2) 1‚Äì2 —Ü–µ–ª–∏ 3) –ª–∏–º–∏—Ç—ã 4) —Ä–∏—Ç—É–∞–ª—ã.\n–ù–∞—á–Ω–µ–º —Å —Ñ–æ–∫—É—Å–∞?")
    elif txt == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª":
        save_state(uid, intent="sos", step="protocol")
        bot.send_message(uid, "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É")
    elif txt == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å":
        save_state(uid, intent="route", step="suggest")
        bot.send_message(uid, "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫: 1) –ü–∞—Å–ø–æ—Ä—Ç 2) –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ 3) –°–∫–µ–ª–µ—Ç –¢–°.\n–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º?")

# ---------- TEXT FLOW ----------
@bot.message_handler(func=lambda m: True, content_types=['text'])
def on_text(m: types.Message):
    uid = m.from_user.id
    text_in = (m.text or "").strip()
    st = get_state(uid)
    intent = st.get("intent")
    step = st.get("step") or ""
    data = st.get("data") or {}
    you = data.get("you")  # "—Ç—ã" | "–≤—ã" | None

    # 0) –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ "—Ç—ã/–≤—ã"
    if intent in (None, "greet") and (step in (None, "ask_form")):
        t = text_in.lower()
        if "—Ç—ã" in t or "–≤—ã" in t:
            bot.send_message(uid, confirm_you(uid, t))
            return
        # –æ—Ñ—Ñ—Å–∫—Ä–∏–ø—Ç-–ø–æ–¥—Å–∫–∞–∑–∫–∞
        reply = gpt_reply(you or "—Ç—ã", text_in, "–ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª —Ç—ã/–≤—ã")
        hint = "\n\n–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>¬´—Ç—ã¬ª</b> –∏–ª–∏ <b>¬´–≤—ã¬ª</b>."
        bot.send_message(uid, (reply or "–û–∫, –ø–æ–Ω—è–ª.") + hint, reply_markup=MAIN_KB)
        return

    # 1) —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ 1‚Äì3 —Ä–µ–ø–ª–∏–∫–∏ ‚Üí –º—è–≥–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥
    if (intent == "greet" and step == "free_talk"):
        turns = int(data.get("free_turns") or 0) + 1
        save_state(uid, merge_data={"free_turns": turns})
        reply = gpt_reply(you or "—Ç—ã", text_in, "—Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ")
        if turns >= 2:
            tail = "\n\n–ï—Å–ª–∏ –≥–æ—Ç–æ–≤ ‚Äî –Ω–∞–∂–º–∏ ¬´üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞¬ª, –∏ –ø—Ä–æ–π–¥—ë–º—Å—è –∫–æ—Ä–æ—Ç–∫–æ –ø–æ —à–∞–≥–∞–º."
        else:
            tail = "\n\n–†–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë —á—É—Ç—å-—á—É—Ç—å, —è —Å–ª—É—à–∞—é."
        bot.send_message(uid, (reply or "–ü–æ–Ω–∏–º–∞—é.") + tail, reply_markup=MAIN_KB)
        return

    # 2) –ø–æ—Ç–æ–∫ "–û—à–∏–±–∫–∞" (MERCEDES ‚Üí —Ü–µ–ª—å ‚Üí TOTE)
    if intent == "error":
        mer = data.get("mercedes") or {}
        # done-—É—Å–ª–æ–≤–∏—è –∏ —à–∞–≥–∏:
        if step == "ask_error" or step is None:
            # –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–ª–∏—à–∫–æ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ?
            if len(text_in) < 5:
                bot.send_message(uid, "–û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).")
                return
            mer["error"] = text_in
            save_state(uid, step="ask_context", merge_data={"mercedes": mer})
            bot.send_message(uid, ask_mercedes(uid, "context"))
            return

        if step == "ask_context":
            mer["context"] = text_in
            save_state(uid, step="ask_emotions", merge_data={"mercedes": mer})
            bot.send_message(uid, ask_mercedes(uid, "emotions"))
            return

        if step == "ask_emotions":
            mer["emotions"] = text_in
            save_state(uid, step="ask_thoughts", merge_data={"mercedes": mer})
            bot.send_message(uid, ask_mercedes(uid, "thoughts"))
            return

        if step == "ask_thoughts":
            mer["thoughts"] = text_in
            save_state(uid, step="ask_behavior", merge_data={"mercedes": mer})
            bot.send_message(uid, ask_mercedes(uid, "behavior"))
            return

        if step == "ask_behavior":
            mer["behavior"] = text_in
            save_state(uid, step="confirm_summary", merge_data={"mercedes": mer})
            bot.send_message(uid, mercedes_summary(data))
            bot.send_message(uid, "–¢–∞–∫ –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å? –ù–∞–ø–∏—à–∏ ¬´–¥–∞¬ª –∏–ª–∏ —É—Ç–æ—á–Ω–∏.")
            return

        if step == "confirm_summary":
            if text_in.lower().startswith("–¥"):
                bot.send_message(uid, ask_new_goal(uid))
            else:
                # –æ—Ñ—Ñ—Å–∫—Ä–∏–ø—Ç: –∫–æ—Ä–æ—Ç–∫–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–µ–º –∏ —É—Ç–æ—á–Ω–∏–º
                reply = gpt_reply(you or "—Ç—ã", text_in, "—É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ MERCEDES; –ø–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å 1 –¥–µ—Ç–∞–ª—å")
                bot.send_message(uid, (reply or "–ß—Ç–æ —É—Ç–æ—á–Ω–∏–º –≤ —Ä–µ–∑—é–º–µ?"))
            return

        if step == "ask_new_goal":
            if len(text_in) < 5:
                bot.send_message(uid, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ü–µ–ª—å –æ–¥–Ω–∏–º –∫–æ—Ä–æ—Ç–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
                return
            mer["new_goal"] = text_in
            save_state(uid, step="ask_tote_goal", merge_data={"mercedes": mer})
            bot.send_message(uid, ask_tote(uid, "goal"))
            return

        if step == "ask_tote_goal":
            mer["tote_goal"] = text_in
            save_state(uid, step="ask_tote_ops", merge_data={"mercedes": mer})
            bot.send_message(uid, ask_tote(uid, "ops"))
            return

        if step == "ask_tote_ops":
            if text_in.lower() in ("–Ω–µ –∑–Ω–∞—é","–Ω–µ –∑–Ω–∞—é.","—è –Ω–µ –∑–Ω–∞—é","–Ω–µ—Ç"):
                # –ø—Ä–µ–¥–ª–æ–∂–∏–º 3 –º—è–≥–∫–∏–µ –∑–∞–≥–æ—Ç–æ–≤–∫–∏
                bot.send_message(uid, "–ú–æ–∂–Ω–æ —Ç–∞–∫: 1) —á–µ–∫-–ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º; 2) 2 –º–∏–Ω—É—Ç—ã –ø–∞—É–∑–∞/–¥—ã—Ö–∞–Ω–∏–µ; 3) –Ω–µ —Ç—Ä–æ–≥–∞—é —Å—Ç–æ–ø/—Ç–µ–π–∫ –¥–æ —É—Å–ª–æ–≤–∏—è.")
            mer["tote_ops"] = text_in
            save_state(uid, step="ask_tote_check", merge_data={"mercedes": mer})
            bot.send_message(uid, ask_tote(uid, "check"))
            return

        if step == "ask_tote_check":
            mer["tote_check"] = text_in
            save_state(uid, step="ask_tote_exit", merge_data={"mercedes": mer})
            bot.send_message(uid, ask_tote(uid, "exit"))
            return

        if step == "ask_tote_exit":
            mer["tote_exit"] = text_in
            save_state(uid, merge_data={"mercedes": mer})
            bot.send_message(uid, finalize_error(uid, data))
            bot.send_message(uid, "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –¥–æ–±–∞–≤–∏–º —ç—Ç–æ –≤ ¬´–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏¬ª –∏–ª–∏ –ø–µ—Ä–µ–π–¥—ë–º –∫ –¢–°.", reply_markup=MAIN_KB)
            return

    # 3) fallback: –æ—Ñ—Ñ—Å–∫—Ä–∏–ø—Ç ‚Üí –º—è–≥–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç
    reply = gpt_reply(you or "—Ç—ã" if you else "—Ç—ã", text_in, f"intent={intent}, step={step}")
    if reply:
        bot.send_message(uid, reply, reply_markup=MAIN_KB)
    else:
        bot.send_message(uid, "–ü—Ä–∏–Ω—è–ª. –ß—Ç–æ–±—ã –±—ã–ª–æ –±—ã—Å—Ç—Ä–µ–µ, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /reset.", reply_markup=MAIN_KB)

# ---------- FLASK ----------
app = Flask(__name__)

def require_secret(fn):
    @wraps(fn)
    def _wrap(*args, **kwargs):
        if TG_WEBHOOK_SECRET and request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
            abort(401)
        return fn(*args, **kwargs)
    return _wrap

@app.get("/health")
def health():
    return jsonify({"status":"ok","time": datetime.now(timezone.utc).isoformat()})

@app.get("/")
def root():
    return "OK"

@app.get("/status")
def status_http():
    return jsonify({"ok":True,"time":datetime.now(timezone.utc).isoformat()})

@app.post(f"/{WEBHOOK_PATH}")
@require_secret
def webhook():
    try:
        if request.content_length and request.content_length > 1_000_000:
            abort(413)
        update = request.get_data().decode("utf-8")
        bot.process_new_updates([telebot.types.Update.de_json(update)])
        return "OK"
    except Exception as e:
        log.error("webhook error: %s\n%s", e, traceback.format_exc())
        return ("", 500)

def ensure_webhook():
    url = f"{PUBLIC_URL}/{WEBHOOK_PATH}"
    if not ALLOW_SET_WEBHOOK:
        log.info("Skip set_webhook (ALLOW_SET_WEBHOOK=0)")
        return
    # set webhook with secret
    bot.remove_webhook()
    time.sleep(0.5)
    ok = bot.set_webhook(url=url, secret_token=TG_WEBHOOK_SECRET, allowed_updates=["message","callback_query"])
    log.info("set_webhook(%s) ‚Üí %s", url, ok)

if __name__ == "__main__":
    db_init()
    ensure_webhook()
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
