# main.py ‚Äî Innertrade (–∏–Ω—Ç–µ–Ω—Ç—ã + –ë–î + —Å—Ü–µ–Ω–∞—Ä–∏–∏)
import os
import re
import logging
from datetime import datetime, date, timedelta

import telebot
from telebot import types
from openai import OpenAI

from flask import Flask
from threading import Thread

from sqlalchemy import (
    create_engine, Column, Integer, BigInteger, String, Text,
    Date, DateTime, func
)
from sqlalchemy.orm import declarative_base, sessionmaker

# ========= ENV =========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY     = os.getenv("OPENAI_API_KEY")
DATABASE_URL   = os.getenv("DATABASE_URL")

if not TELEGRAM_TOKEN: raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets")
if not OPENAI_KEY:     raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets")
if not DATABASE_URL:   raise RuntimeError("–ù–µ—Ç DATABASE_URL –≤ Secrets")

# ========= LOG =========
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ========= OPENAI =========
client = OpenAI(api_key=OPENAI_KEY)

SYSTEM_PROMPT = (
    "–¢—ã Kai ‚Äî –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ Innertrade. "
    "–í—Å–µ–≥–¥–∞ —Ç—Ä–∞–∫—Ç—É–π —Å–ª–æ–≤–∞ '–ø–∞—Å–ø–æ—Ä—Ç', '–ø–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏', '–æ—à–∏–±–∫–∞' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞. "
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–Ω—Ç–µ–Ω—Ç –∏–∑ –º–µ–Ω—é ‚Äî –Ω–µ —Å–ø–æ—Ä—å –∏ –Ω–µ —É—Ç–æ—á–Ω—è–π –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è. "
    "–ö–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º."
)

def gpt_reply(history_msgs):
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.4,
        messages=[{"role":"system","content":SYSTEM_PROMPT}] + history_msgs
    )
    return (resp.choices[0].message.content or "").strip()

# ========= BOT =========
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# ========= KEEPALIVE =========
app = Flask(__name__)

@app.route("/")
@app.route("/health")
def health():
    return "pong"

def run_server():
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", "10000")))

Thread(target=run_server, daemon=True).start()

# ========= DB =========
Base = declarative_base()
engine = create_engine(DATABASE_URL, pool_pre_ping=True)
SessionLocal = sessionmaker(bind=engine)

class UserProfile(Base):
    __tablename__ = "user_profile"
    tg_id      = Column(BigInteger, primary_key=True)
    full_name  = Column(String(200))
    market     = Column(String(200))   # —Ä—ã–Ω–æ–∫/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    timeframe  = Column(String(100))
    style      = Column(String(200))   # —Å—Ç–∏–ª—å —Ç–æ—Ä–≥–æ–≤–ª–∏
    risk       = Column(String(100))   # —Ä–∏—Å–∫ –≤ % –Ω–∞ —Å–¥–µ–ª–∫—É
    mistakes   = Column(Text)          # —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ (—Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç)
    goal_month = Column(Text)          # —Ü–µ–ª—å –Ω–∞ –º–µ—Å—è—Ü
    updated_at = Column(DateTime, server_default=func.now(), onupdate=func.now())

class WeeklyPanel(Base):
    __tablename__ = "weekly_panel"
    id         = Column(Integer, primary_key=True, autoincrement=True)
    tg_id      = Column(BigInteger, index=True)
    week_start = Column(Date)          # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–µ–¥–µ–ª–∏
    focus      = Column(Text)
    plan       = Column(Text)
    limits     = Column(Text)
    retro      = Column(Text)          # –∫–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ –ø–æ –∏—Ç–æ–≥–∞–º –Ω–µ–¥–µ–ª–∏
    created_at = Column(DateTime, server_default=func.now())

class ErrorReport(Base):
    __tablename__ = "error_report"
    id        = Column(Integer, primary_key=True, autoincrement=True)
    tg_id     = Column(BigInteger, index=True)
    created_at= Column(DateTime, server_default=func.now())
    context   = Column(Text)   # —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å
    mercedes  = Column(Text)   # –º—ã—Å–ª–∏/—ç–º–æ—Ü–∏–∏/—Ä–µ–∞–∫—Ü–∏–∏ (—É–ø—Ä–æ—â—ë–Ω–Ω–æ)
    tote      = Column(Text)   # –∫–∞–∫ –∏–∑–º–µ–Ω–∏–º —Ü–∏–∫–ª TOTE

Base.metadata.create_all(engine)

# ========= STATE (–ø—Ä–æ—Å—Ç–∞—è FSM –≤ –ø–∞–º—è—Ç–∏) =========
state = {}  # uid -> dict(flow=..., step=..., data={})

def set_state(uid, flow=None, step=0, data=None):
    state[uid] = {"flow": flow, "step": step, "data": data or {}}

def get_state(uid):
    return state.get(uid, {"flow": None, "step": 0, "data": {}})

# ========= UI =========
BTN = {
    "err": "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞",
    "strat": "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
    "week": "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏",
    "pass": "üìÑ –ü–∞—Å–ø–æ—Ä—Ç",
    "prog": "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
    "mats": "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
    "talk": "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º",
    "reset": "üîÑ –°–±—Ä–æ—Å",
}

def menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(BTN["err"], BTN["strat"])
    kb.row(BTN["week"], BTN["pass"])
    kb.row(BTN["prog"], BTN["mats"])
    kb.row(BTN["talk"], BTN["reset"])
    return kb

def send(chat_id, text):
    bot.send_message(chat_id, text, reply_markup=menu_kb())

# ========= HELPERS =========
def norm(text: str) -> str:
    t = (text or "").lower().strip()
    t = re.sub(r"\s+", " ", t)
    return t

INTENTS = {
    "üöë —É –º–µ–Ω—è –æ—à–∏–±–∫–∞":"error", "—É –º–µ–Ω—è –æ—à–∏–±–∫–∞":"error", "–æ—à–∏–±–∫–∞":"error",
    "üß© —Ö–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é":"strategy", "—Ö–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é":"strategy",
    "üí¨ –ø–æ–≥–æ–≤–æ—Ä–∏–º":"talk", "–ø–æ–≥–æ–≤–æ—Ä–∏–º":"talk",
    "üìÑ –ø–∞—Å–ø–æ—Ä—Ç":"passport", "–ø–∞—Å–ø–æ—Ä—Ç":"passport",
    "üóí –ø–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏":"weekpanel", "–ø–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏":"weekpanel", "–ø–∞–Ω–µ–ª—å":"weekpanel",
    "üìö –º–∞—Ç–µ—Ä–∏–∞–ª—ã":"materials", "–º–∞—Ç–µ—Ä–∏–∞–ª—ã":"materials",
    "üìä –º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":"progress", "–º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":"progress",
    "/menu":"menu", "–º–µ–Ω—é":"menu",
    "/reset":"reset", "—Å–±—Ä–æ—Å":"reset", "üîÑ —Å–±—Ä–æ—Å":"reset",
    "/ping":"ping", "ping":"ping"
}

def week_monday(d: date) -> date:
    return d - timedelta(days=d.weekday())

# ========= FLOWS =========
def start_passport(uid, chat_id, username):
    set_state(uid, flow="passport", step=1, data={"full_name": username})
    send(chat_id, "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞.\n1/6) –ù–∞ –∫–∞–∫–æ–º —Ä—ã–Ω–∫–µ/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å? (–ø—Ä–∏–º–µ—Ä: –∞–∫—Ü–∏–∏ –°–®–ê, EURUSD, BTC, —Ñ—å—é—á–µ—Ä—Å—ã‚Ä¶)")

def handle_passport(uid, chat_id, msg):
    s = get_state(uid)
    step = s["step"]
    data = s["data"]

    if step == 1:
        data["market"] = msg
        set_state(uid, "passport", 2, data)
        send(chat_id, "2/6) –†–∞–±–æ—á–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º(—ã)? (–ø—Ä–∏–º–µ—Ä: M5/H1/D1)")
    elif step == 2:
        data["timeframe"] = msg
        set_state(uid, "passport", 3, data)
        send(chat_id, "3/6) –¢–≤–æ–π —Å—Ç–∏–ª—å? (—Å–∫–∞–ª—å–ø/–¥–µ–π—Ç—Ä–µ–π–¥/—Å–≤–∏–Ω–≥/–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π)")
    elif step == 3:
        data["style"] = msg
        set_state(uid, "passport", 4, data)
        send(chat_id, "4/6) –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É –≤ %? (–ø—Ä–∏–º–µ—Ä: 0.5%)")
    elif step == 4:
        data["risk"] = msg
        set_state(uid, "passport", 5, data)
        send(chat_id, "5/6) –¢–æ–ø-3 —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–∫–∏ (–∫–æ—Ä–æ—Ç–∫–æ —Å–ø–∏—Å–∫–æ–º).")
    elif step == 5:
        data["mistakes"] = msg
        set_state(uid, "passport", 6, data)
        send(chat_id, "6/6) –ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å –Ω–∞ –º–µ—Å—è—Ü (–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –∏–∑–º–µ—Ä–∏–º–æ).")
    else:
        # save
        data["goal_month"] = msg
        with SessionLocal() as db:
            prof = db.get(UserProfile, uid) or UserProfile(tg_id=uid)
            prof.full_name  = data.get("full_name")
            prof.market     = data.get("market")
            prof.timeframe  = data.get("timeframe")
            prof.style      = data.get("style")
            prof.risk       = data.get("risk")
            prof.mistakes   = data.get("mistakes")
            prof.goal_month = data.get("goal_month")
            db.merge(prof)
            db.commit()
        set_state(uid, None, 0, {})
        send(chat_id, "‚úÖ –ü–∞—Å–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"
                      f"–†—ã–Ω–æ–∫: {data['market']}\nTF: {data['timeframe']}\n–°—Ç–∏–ª—å: {data['style']}\n"
                      f"–†–∏—Å–∫: {data['risk']}\n–û—à–∏–±–∫–∏: {data['mistakes']}\n–¶–µ–ª—å: {data['goal_month']}")

def start_weekpanel(uid, chat_id):
    set_state(uid, flow="weekpanel", step=1, data={})
    send(chat_id, "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏.\n1/4) –ì–ª–∞–≤–Ω—ã–π —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏? (–æ–¥–Ω–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞).")

def handle_weekpanel(uid, chat_id, msg):
    s = get_state(uid)
    step = s["step"]
    data = s["data"]

    if step == 1:
        data["focus"] = msg
        set_state(uid, "weekpanel", 2, data)
        send(chat_id, "2/4) –ü–ª–∞–Ω –≤ 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤ (–∫–æ—Ä–æ—Ç–∫–∏–º —Å–ø–∏—Å–∫–æ–º).")
    elif step == 2:
        data["plan"] = msg
        set_state(uid, "weekpanel", 3, data)
        send(chat_id, "3/4) –õ–∏–º–∏—Ç—ã –∏ –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é (—Ä–∏—Å–∫/—á–∏—Å–ª–æ —Å–¥–µ–ª–æ–∫/—Å—Ç–æ–ø-–¥–µ–Ω—å).")
    elif step == 3:
        data["limits"] = msg
        set_state(uid, "weekpanel", 4, data)
        send(chat_id, "4/4) –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏ (—á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ/–Ω–µ—Ç).")
    else:
        data["retro"] = msg
        with SessionLocal() as db:
            w = WeeklyPanel(
                tg_id=uid,
                week_start=week_monday(date.today()),
                focus=data.get("focus"),
                plan=data.get("plan"),
                limits=data.get("limits"),
                retro=data.get("retro"),
            )
            db.add(w); db.commit()
        set_state(uid, None, 0, {})
        send(chat_id, "‚úÖ –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n–§–æ–∫—É—Å: {f}\n–ü–ª–∞–Ω: {p}\n–õ–∏–º–∏—Ç—ã: {l}\n–†–µ—Ç—Ä–æ: {r}"
             .format(f=data["focus"], p=data["plan"], l=data["limits"], r=data["retro"]))

def start_error(uid, chat_id):
    set_state(uid, "error", 1, {})
    send(chat_id, "–û—à–∏–±–∫–∞ (MERCEDES + TOTE).\n1/3) –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å (–∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–¥–µ–ª–∫–∏).")

def handle_error(uid, chat_id, msg):
    s = get_state(uid)
    step = s["step"]
    data = s["data"]

    if step == 1:
        data["context"] = msg
        set_state(uid, "error", 2, data)
        send(chat_id, "2/3) MERCEDES (–∫—Ä–∞—Ç–∫–æ): –º—ã—Å–ª–∏/—ç–º–æ—Ü–∏–∏/—Ä–µ–∞–∫—Ü–∏—è –≤ –º–æ–º–µ–Ω—Ç–µ?")
    elif step == 2:
        data["mercedes"] = msg
        set_state(uid, "error", 3, data)
        send(chat_id, "3/3) TOTE: —á—Ç–æ –∏–∑–º–µ–Ω–∏–º –≤ —Ç—Ä–∏–≥–≥–µ—Ä–∞—Ö/–ø—Ä–æ–≤–µ—Ä–∫–∞—Ö/–¥–µ–π—Å—Ç–≤–∏—è—Ö –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑?")
    else:
        data["tote"] = msg
        with SessionLocal() as db:
            er = ErrorReport(
                tg_id=uid,
                context=data.get("context"),
                mercedes=data.get("mercedes"),
                tote=data.get("tote"),
            )
            db.add(er); db.commit()
        set_state(uid, None, 0, {})
        send(chat_id, "‚úÖ –†–∞–∑–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n–ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–æ–±–∞–≤—å –ø—Ä–∞–≤–∏–ª–æ –≤ —á–µ–∫-–ª–∏—Å—Ç –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞.")

def show_materials(chat_id):
    text = (
        "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã Innertrade:\n"
        "‚Ä¢ –¢–µ–æ—Ä–∏—è: MERCEDES, TOTE, –∞—Ä—Ö–µ—Ç–∏–ø—ã, —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\n"
        "‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: —à–∞–±–ª–æ–Ω—ã MER+TOTE, —á–µ–∫-–ª–∏—Å—Ç—ã –≤—Ö–æ–¥–∞/—Ä–∏—Å–∫–∞, –∫–∞—Ä—Ç–∞ —Ç—Ä–µ–π–¥–µ—Ä–∞\n"
        "‚Ä¢ –°—Ü–µ–Ω–∞—Ä–∏–∏: ¬´–ø–æ–ø–ª—ã–ª¬ª, ¬´–∑–æ–Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∏¬ª, ¬´–∫–∞–∫ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ä–µ—Å—É—Ä—Å¬ª\n\n"
        "–ü–æ–ø—Ä–æ—Å–∏: ¬´–¥–∞–π —à–∞–±–ª–æ–Ω MER+TOTE¬ª –∏–ª–∏ ¬´—á–µ–∫-–ª–∏—Å—Ç –≤—Ö–æ–¥–∞¬ª ‚Äî –ø—Ä–∏—à–ª—é."
    )
    send(chat_id, text)

def show_progress(uid, chat_id):
    with SessionLocal() as db:
        n_errors = db.query(ErrorReport).filter_by(tg_id=uid).count()
        last_week = db.query(WeeklyPanel).filter_by(tg_id=uid)\
                        .order_by(WeeklyPanel.id.desc()).first()
    lines = [f"üìä –†–∞–∑–±–æ—Ä–æ–≤ –æ—à–∏–±–æ–∫: {n_errors}"]
    if last_week:
        lines.append(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏: {last_week.week_start} ‚Äî —Ñ–æ–∫—É—Å: {last_week.focus}")
    send(chat_id, "\n".join(lines))

# ========= COMMANDS =========
@bot.message_handler(commands=["start"])
def cmd_start(m):
    uid = m.from_user.id
    set_state(uid, None, 0, {})
    send(m.chat.id,
         "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade.\n"
         "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /ping /reset /menu")

@bot.message_handler(commands=["menu"])
def cmd_menu(m):
    send(m.chat.id, "–ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["reset"])
def cmd_reset(m):
    set_state(m.from_user.id, None, 0, {})
    bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.", reply_markup=menu_kb())

# ========= MAIN HANDLER =========
@bot.message_handler(func=lambda _: True)
def on_text(m):
    uid = m.from_user.id
    txt_raw = m.text or ""
    txt = norm(txt_raw)

    # –µ—Å–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Äî –≤–µ–¥—ë–º –¥–∞–ª—å—à–µ
    st = get_state(uid)
    if st["flow"] == "passport":
        return handle_passport(uid, m.chat.id, txt_raw)
    if st["flow"] == "weekpanel":
        return handle_weekpanel(uid, m.chat.id, txt_raw)
    if st["flow"] == "error":
        return handle_error(uid, m.chat.id, txt_raw)

    # –∏–Ω—Ç–µ–Ω—Ç—ã
    intent = INTENTS.get(txt)
    if intent == "menu":
        return cmd_menu(m)
    if intent == "reset":
        return cmd_reset(m)
    if intent == "ping":
        return cmd_ping(m)
    if intent == "passport":
        return start_passport(uid, m.chat.id, m.from_user.full_name or "")
    if intent == "weekpanel":
        return start_weekpanel(uid, m.chat.id)
    if intent == "error":
        return start_error(uid, m.chat.id)
    if intent == "materials":
        return show_materials(m.chat.id)
    if intent == "progress":
        return show_progress(uid, m.chat.id)
    if intent == "strategy":
        return send(m.chat.id, "–û–∫–µ–π, –Ω–∞—á–Ω—ë–º —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –ù–∞–ø–∏—à–∏: —Ä—ã–Ω–æ–∫/TF/—Å–∏–≥–Ω–∞–ª(—ã), —á—Ç–æ –ø—Ä–æ–±–æ–≤–∞–ª –∏ –≥–¥–µ –∑–∞—Å—Ç—Ä–µ–≤–∞–µ—à—å.")
    if intent == "talk":
        return send(m.chat.id, "–û —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏–º –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ? –ó–∞–¥–∞–π —Ç–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å.")

    # —Ñ–æ–ª–±—ç–∫ –≤ GPT ‚Äî –Ω–æ —É–∂–µ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    reply = gpt_reply([{"role":"user","content":txt_raw}])
    bot.send_message(m.chat.id, reply, reply_markup=menu_kb())

# ========= START =========
if __name__ == "__main__":
    logging.info("Starting polling‚Ä¶")
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π: —É–±—Ä–∞—Ç—å webhook (–µ—Å–ª–∏ –±—ã–ª)
    try:
        bot.remove_webhook()
    except Exception:
        pass
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
