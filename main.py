import os
import json
import logging
from datetime import datetime
from typing import Optional, Dict, Any

from flask import Flask, request, abort, jsonify
from telebot import TeleBot, types
from telebot.types import Update

from openai import OpenAI
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ----------------- ENV ------------------
TELEGRAM_TOKEN   = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY")
OPENAI_MODEL     = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
DATABASE_URL     = os.getenv("DATABASE_URL")
PUBLIC_URL       = os.getenv("PUBLIC_URL")         # https://innertrade-bot.onrender.com
WEBHOOK_PATH     = os.getenv("WEBHOOK_PATH")       # –Ω–∞–ø—Ä–∏–º–µ—Ä: wbhk_9t3x
TG_WEBHOOK_SECRET= os.getenv("TG_WEBHOOK_SECRET")  # –ª—é–±–æ–π —Ç–≤–æ–π UUID

for k, v in {
    "TELEGRAM_TOKEN": TELEGRAM_TOKEN,
    "OPENAI_API_KEY": OPENAI_API_KEY,
    "DATABASE_URL": DATABASE_URL,
    "PUBLIC_URL": PUBLIC_URL,
    "WEBHOOK_PATH": WEBHOOK_PATH,
    "TG_WEBHOOK_SECRET": TG_WEBHOOK_SECRET,
}.items():
    if not v:
        raise RuntimeError(f"Missing env: {k}")

# ----------------- OPENAI ----------------
oai = OpenAI(api_key=OPENAI_API_KEY)

def ask_gpt(system_prompt: str, user_prompt: str, fallback: str) -> str:
    try:
        resp = oai.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt},
            ],
            temperature=0.3,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        logging.warning(f"OpenAI fallback: {e}")
        return fallback

# ----------------- DB --------------------
engine = create_engine(DATABASE_URL, pool_pre_ping=True)

def db_exec(sql: str, params: Optional[dict] = None, fetch: bool = False):
    try:
        with engine.begin() as conn:
            res = conn.execute(text(sql), params or {})
            if fetch:
                return [dict(r._mapping) for r in res]
    except SQLAlchemyError as e:
        logging.error(f"DB error: {e}")
    return None

def ensure_user(user_id: int):
    db_exec("""
        INSERT INTO users(user_id) VALUES (:uid)
        ON CONFLICT (user_id) DO NOTHING
    """, {"uid": user_id})

def get_state(user_id: int) -> Dict[str, Any]:
    row = db_exec("SELECT intent, step, data FROM user_state WHERE user_id=:uid", {"uid": user_id}, fetch=True)
    if row and len(row):
        return {
            "intent": row[0]["intent"],
            "step": row[0]["step"],
            "data": (row[0]["data"] or {}) if isinstance(row[0]["data"], dict) else {}
        }
    return {"intent": "idle", "step": None, "data": {}}

def save_state(user_id: int, intent: Optional[str]=None, step: Optional[str]=None, data: Optional[dict]=None):
    cur = get_state(user_id)
    if intent is None: intent = cur["intent"]
    if step   is None: step   = cur["step"]
    merged = cur["data"].copy()
    if data: merged.update(data)
    db_exec("""
        INSERT INTO user_state(user_id, intent, step, data, updated_at)
        VALUES (:uid, :intent, :step, CAST(:data AS jsonb), now())
        ON CONFLICT (user_id) DO UPDATE
        SET intent=EXCLUDED.intent, step=EXCLUDED.step, data=EXCLUDED.data, updated_at=now()
    """, {"uid": user_id, "intent": intent, "step": step, "data": json.dumps(merged)})

def append_error_row(user_id: int, fields: Dict[str, Any]):
    # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏/—Ä–∞–∑–±–æ—Ä–∞ (–º–∏–Ω–∏–º—É–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏)
    db_exec("""
        INSERT INTO errors(user_id, error_text, pattern_behavior, pattern_emotion, pattern_thought,
                           positive_goal, tote_goal, tote_ops, tote_check, tote_exit, checklist_pre, checklist_post, created_at)
        VALUES (:user_id, :error_text, :pattern_behavior, :pattern_emotion, :pattern_thought,
                :positive_goal, :tote_goal, :tote_ops, :tote_check, :tote_exit, :checklist_pre, :checklist_post, now())
    """, {
        "user_id": user_id,
        "error_text": fields.get("error_text"),
        "pattern_behavior": fields.get("pattern_behavior"),
        "pattern_emotion": fields.get("pattern_emotion"),
        "pattern_thought": fields.get("pattern_thought"),
        "positive_goal": fields.get("positive_goal"),
        "tote_goal": fields.get("tote_goal"),
        "tote_ops": fields.get("tote_ops"),
        "tote_check": fields.get("tote_check"),
        "tote_exit": fields.get("tote_exit"),
        "checklist_pre": fields.get("checklist_pre"),
        "checklist_post": fields.get("checklist_post"),
    })

# ----------------- TELEGRAM --------------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –°–æ–±—Ä–∞—Ç—å –¢–°")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "ü§ù –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
    return kb

def yes_no_kb():
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–î–∞", callback_data="ok_yes"),
           types.InlineKeyboardButton("–ù–µ—Ç", callback_data="ok_no"),
           types.InlineKeyboardButton("–î–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="ok_more"))
    return kb

def polite(address: str, t: str, v: str) -> str:
    return t if address == "—Ç—ã" else v

# ----------------- –ü–ï–†–í–û–ï –ö–ê–°–ê–ù–ò–ï --------
def start_dialog(m):
    uid = m.from_user.id
    ensure_user(uid)
    st = get_state(uid)
    data = st["data"]
    # –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî —Å–ø—Ä–æ—Å–∏–º
    if not data.get("address"):
        bot.send_message(uid,
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî *–Ω–∞ —Ç—ã* –∏–ª–∏ *–Ω–∞ –≤—ã*? –ù–∞–ø–∏—à–∏: `—Ç—ã` –∏–ª–∏ `–≤—ã`.",
            reply_markup=main_menu())
        save_state(uid, intent="greet", step="ask_address")
        return
    # –ò–Ω–∞—á–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –º—è–≥–∫–∏–π –≤—Ö–æ–¥
    name = data.get("name") or m.from_user.first_name or ""
    hello = f"–ü—Ä–∏–≤–µ—Ç{', ' + name if name else ''}! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å."
    tail  = polite(data["address"], 
                   "–ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, –∞ –ø–æ—Ç–æ–º –≤–æ–∑—å–º—ë–º—Å—è –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É. –ß—Ç–æ –±–æ–ª–∏—Ç —Å–µ–π—á–∞—Å?",
                   "–ú–æ–∂–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è, –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–µ. –ß—Ç–æ —Å–µ–π—á–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç?")
    bot.send_message(uid, f"{hello}\n{tail}", reply_markup=main_menu())
    # –ü–µ—Ä–µ–π–¥—ë–º –≤ —Ä–µ–∂–∏–º –ª—ë–≥–∫–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    save_state(uid, intent="free_chat", step="warmup", data={"warmup_turns": 0})

def try_summarize_problem(uid: int, text_in: str, address: str) -> str:
    sys = ("–¢—ã —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∫–æ—É—á —Ç—Ä–µ–π–¥–µ—Ä–æ–≤. –ó–∞–¥–∞—á–∞: –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–ø–ª–∏–∫–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é, "
           "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –ø—Ä–æ–±–ª–µ–º—ã *–Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è/–ø—Ä–∏–≤—ã—á–∫–∏* (–±–µ–∑ –º–æ—Ä–∞–ª–∏ –∏ –¥–∏–∞–≥–Ω–æ–∑–∞). "
           "–ù–µ –ø–∏—à–∏ –ª–∏—à–Ω–µ–≥–æ, 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
    fallback = text_in.strip()
    phr = ask_gpt(sys, text_in, fallback)
    # –£–±–µ—Ä—ë–º –∫–∞–≤—ã—á–∫–∏ –∏ —Å–º—è–≥—á–∏–º
    phr = phr.strip('‚Äú‚Äù"').strip()
    lead = polite(address, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∫–ª—é—á–µ–≤–∞—è –∑–∞–≥–≤–æ–∑–¥–∫–∞ —Å–µ–π—á–∞—Å —Ç–∞–∫–∞—è", 
                             "–í–µ—Ä–Ω–æ –ª–∏ —è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –∫–ª—é—á–µ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–µ–π—á–∞—Å —Ç–∞–∫–æ–≤–∞")
    return f"{lead}: *{phr}* ?"

def continue_mercedes(uid: int, address: str):
    # –∑–∞–¥–∞—ë–º —Ä–∞–∑–±–æ—Ä –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ—Ö–Ω–∏–∫
    st = get_state(uid)
    d  = st["data"]
    flags = d.get("flags", {})
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ —Å–∫–∞–∑–∞–ª, —á—Ç–æ ¬´–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏¬ª, –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    ask_lines = []
    if not flags.get("no_context"):
        ask_lines.append(polite(address,
            "–ù–∞—á–Ω—ë–º —Å –æ–∫—Ä—É–∂–µ–Ω–∏—è: –≤ –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö —ç—Ç–æ —á–∞—â–µ —Å–ª—É—á–∞–µ—Ç—Å—è? (—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏, –≤—Ä–µ–º—è –∏ —Ç.–ø.)",
            "–ù–∞—á–Ω—ë–º —Å –æ–∫—Ä—É–∂–µ–Ω–∏—è: –≤ –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö —ç—Ç–æ —á–∞—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? (—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å, –ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏, –≤—Ä–µ–º—è –∏ —Ç.–ø.)"
        ))
    ask_lines.append(polite(address,
        "–ö–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ –ø–æ–¥–Ω–∏–º–∞—é—Ç—Å—è –≤ —ç—Ç–∏ –º–æ–º–µ–Ω—Ç—ã? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)",
        "–ö–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ –ø–æ–¥–Ω–∏–º–∞—é—Ç—Å—è –≤ —ç—Ç–∏ –º–æ–º–µ–Ω—Ç—ã? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)"))
    ask_lines.append(polite(address,
        "–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –º–µ–ª—å–∫–∞—é—Ç? –ù–∞–ø–∏—à–∏ 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö.",
        "–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è? –ù–∞–ø–∏—à–∏—Ç–µ 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö."))
    ask_text = "\n\n".join(ask_lines)
    bot.send_message(uid, ask_text, reply_markup=main_menu())
    save_state(uid, intent="error", step="drill_collect")

def maybe_move_to_drill(uid: int):
    st = get_state(uid)
    d  = st["data"]
    # done-—É—Å–ª–æ–≤–∏–µ: –µ—Å—Ç—å behavior_line ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è
    if d.get("behavior_line"):
        address = d.get("address", "—Ç—ã")
        bot.send_message(uid,
            polite(address,
                   "–û–∫, —É –º–µ–Ω—è –µ—Å—Ç—å —Å—É—Ç—å. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ –ø–æ–ª–æ—á–∫–∞–º –∏ –∑–∞—Ç–µ–º —Å–æ–±–µ—Ä—ë–º –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π.",
                   "–•–æ—Ä–æ—à–æ, —Å—É—Ç—å –ø–æ–Ω—è—Ç–Ω–∞. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä—ë–º —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ —à–∞–≥–∞–º –∏ –∑–∞—Ç–µ–º —Å–æ–±–µ—Ä—ë–º –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π."),
            reply_markup=main_menu())
        continue_mercedes(uid, address)
        return True
    return False

# ----------------- –•–ï–ù–î–õ–ï–†–´ --------------
@bot.message_handler(commands=["start", "menu", "reset"])
def cmd_start(m):
    # –°–±—Ä–æ—Å–∏–º —Ç–æ–ª—å–∫–æ —Å–µ—Å—Å–∏—é (–ë–î-–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Ç—Ä–æ–≥–∞–µ–º)
    save_state(m.from_user.id, intent="idle", step=None, data={
        "address": None, "name": None, "warmup_turns": 0,
        "behavior_line": None, "flags": {}
    })
    start_dialog(m)

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    st = get_state(m.from_user.id)
    healthy = True
    try:
        db_exec("SELECT 1")
    except Exception:
        healthy = False
    info = {
        "ok": True,
        "time": datetime.utcnow().isoformat(),
        "intent": st["intent"],
        "step": st["step"],
        "db": "ok" if healthy else "err",
    }
    bot.send_message(m.chat.id, "```json\n" + json.dumps(info, ensure_ascii=False, indent=2) + "\n```")

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é (–∏–Ω—Ç–µ–Ω—Ç—ã)
@bot.message_handler(func=lambda msg: msg.text in ["üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞"])
def btn_error(m):
    uid = m.from_user.id
    ensure_user(uid)
    st = get_state(uid)
    data = st["data"]
    if not data.get("address"):
        start_dialog(m); return
    bot.send_message(uid, polite(data["address"],
        "–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –≤ –ø–∞—Ä–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∫–∞–∫ –æ–Ω–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –¥–µ–π—Å—Ç–≤–∏–∏.",
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ –ø–∞—Ä–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –∫–∞–∫ –æ–Ω–∞ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ –¥–µ–π—Å—Ç–≤–∏–∏."), reply_markup=main_menu())
    save_state(uid, intent="error", step="collect_intro", data={"behavior_line": None})

@bot.message_handler(func=lambda msg: msg.text in ["üß© –°–æ–±—Ä–∞—Ç—å –¢–°", "üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏", "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "ü§ù –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å"])
def btn_misc(m):
    uid = m.from_user.id
    ensure_user(uid)
    st = get_state(uid)
    addr = st["data"].get("address") or "—Ç—ã"
    if m.text == "ü§ù –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å":
        bot.send_message(uid, polite(addr,
            "–û–∫–µ–π, –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–µ–π—á–∞—Å –≤–æ–ª–Ω—É–µ—Ç ‚Äî —è —Ä—è–¥–æ–º.",
            "–•–æ—Ä–æ—à–æ, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Å–µ–π—á–∞—Å –≤–æ–ª–Ω—É–µ—Ç ‚Äî —è —Ä—è–¥–æ–º."), reply_markup=main_menu())
        save_state(uid, intent="free_chat", step="warmup", data={"warmup_turns": 0})
        return
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∑–∞–≥–ª—É—à–∫–∞–º–∏
    replies = {
        "üß© –°–æ–±—Ä–∞—Ç—å –¢–°": "–°–æ–±–µ—Ä—ë–º –Ω–∞–±—Ä–æ—Å–æ–∫ —Å–∏—Å—Ç–µ–º—ã –ø–æ–∑–∂–µ ‚Äî —Å–µ–π—á–∞—Å —Ñ–æ–∫—É—Å –Ω–∞ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ.",
        "üìÑ –ü–∞—Å–ø–æ—Ä—Ç": "–ü–æ–∑–∂–µ –∑–∞–ø–æ–ª–Ω–∏–º –ü–∞—Å–ø–æ—Ä—Ç –∫–ª—é—á–µ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.",
        "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏": "–í –ü–∞–Ω–µ–ª–∏ –Ω–µ–¥–µ–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–æ–∫—É—Å –∏ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª–∏.",
        "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ": "–°—Ç–æ–ø. –°–¥–µ–ª–∞–π 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤. –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∞ –∏ —Ç—ã '–ø–æ–ø–ª—ã–ª' ‚Äî —Å–æ–∫—Ä–∞—Ç–∏ –æ–±—ä—ë–º –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É. –ü–æ—Ç–æ–º –Ω–∞–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.",
    }
    bot.send_message(uid, replies[m.text], reply_markup=main_menu())

# –ò–Ω–ª–∞–π–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
@bot.callback_query_handler(func=lambda c: c.data in ["ok_yes", "ok_no", "ok_more"])
def cb_confirm(c):
    uid = c.from_user.id
    st  = get_state(uid)
    d   = st["data"]
    addr= d.get("address","—Ç—ã")
    if c.data == "ok_yes":
        # –¥–≤–∏–≥–∞–µ–º—Å—è –∫ —Ä–∞–∑–±–æ—Ä—É
        bot.answer_callback_query(c.id, polite(addr, "–ë–µ—Ä—ë–º –≤ —Ä–∞–±–æ—Ç—É", "–ë–µ—Ä—ë–º –≤ —Ä–∞–±–æ—Ç—É"))
        maybe_move_to_drill(uid)
    elif c.data == "ok_no":
        bot.answer_callback_query(c.id)
        bot.send_message(uid, polite(addr,
            "–û–∫–µ–π, –Ω–∞–ø–∏—à–∏ –∫–∞–∫ –±—ã —Ç—ã —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª –µ—ë —Å–∞–º ‚Äî –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.",
            "–•–æ—Ä–æ—à–æ, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –±—ã –≤—ã —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ —Å–∞–º–∏ ‚Äî –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π."))
        save_state(uid, data={"behavior_line": None})
    else:
        bot.answer_callback_query(c.id)
        bot.send_message(uid, polite(addr,
            "–î–æ–±–∞–≤—å, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –∏ —è –æ–±–Ω–æ–≤–ª—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É.",
            "–î–æ–±–∞–≤—å—Ç–µ, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –∏ —è —É—Ç–æ—á–Ω—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É."))

# ----------------- –û–ë–©–ò–ô –¢–ï–ö–°–¢ -----------
@bot.message_handler(content_types=["text"])
def on_text(m):
    uid = m.from_user.id
    ensure_user(uid)
    st = get_state(uid)
    data = st["data"]
    text_in = (m.text or "").strip()
    # –ê–¥—Ä–µ—Å/–∏–º—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    if st["intent"] == "greet" and st["step"] == "ask_address":
        lower = text_in.lower()
        if lower in ["—Ç—ã", "–≤—ã"]:
            save_state(uid, data={"address": lower})
            bot.send_message(uid, polite(lower,
                "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–µ—Å–ª–∏ —É–¥–æ–±–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–º—è/–Ω–∏–∫–Ω–µ–π–º)",
                "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–µ—Å–ª–∏ —É–¥–æ–±–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–º—è/–Ω–∏–∫–Ω–µ–π–º)"))
            save_state(uid, step="ask_name")
        else:
            bot.send_message(uid, "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, `—Ç—ã` –∏–ª–∏ `–≤—ã`.")
        return
    if st["intent"] == "greet" and st["step"] == "ask_name":
        save_state(uid, intent="free_chat", step="warmup", data={"name": text_in, "warmup_turns": 0})
        bot.send_message(uid, polite(data.get("address","—Ç—ã"),
            "–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ –±–æ–ª–∏—Ç —Å–µ–π—á–∞—Å ‚Äî –∏ –ø–æ–π–¥—ë–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è.",
            "–†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç —Å–µ–π—á–∞—Å ‚Äî –∏ –ø–æ–π–¥—ë–º —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è."),
            reply_markup=main_menu())
        return

    # –°–≤–æ–±–æ–¥–Ω—ã–π —Ä–∞–∑–æ–≥—Ä–µ–≤: –¥–æ 2-3 –ø–æ–¥—Ö–æ–¥–æ–≤ ‚Äî —Å–ª—É—à–∞–µ–º, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ–º, –º—è–≥–∫–æ —á–∏–Ω–∏–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É
    if st["intent"] in ["idle", "free_chat"] or (st["intent"]=="error" and st["step"]=="collect_intro"):
        addr = data.get("address","—Ç—ã")
        # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä—è–º–æ –Ω–∞–ø–∏—Å–∞–ª, —á—Ç–æ ¬´–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏¬ª ‚Äî –æ—Ç–º–µ—Ç–∏–º —Ñ–ª–∞–≥
        if "–Ω–µ –∑–∞–≤–∏—Å–∏—Ç" in text_in.lower():
            flags = data.get("flags", {})
            flags["no_context"] = True
            save_state(uid, data={"flags": flags})

        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é ¬´–ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫—É—é¬ª —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É (–±–µ–∑ —Å–ª–æ–≤ ¬´–ø–æ–≤–µ–¥–µ–Ω–∏–µ¬ª, ¬´–Ω–∞–≤—ã–∫¬ª)
        phr = try_summarize_problem(uid, text_in, addr)
        # –°–æ—Ö—Ä–∞–Ω–∏–º draft –≤ data, –Ω–æ behavior_line –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –ø–æ—Å–ª–µ ¬´–î–∞/–ù–µ—Ç/–î–æ–ø–æ–ª–Ω–∏—Ç—å¬ª
        save_state(uid, intent="error", step="confirm_problem", data={"draft_behavior_line": phr})
        bot.send_message(uid, phr, reply_markup=yes_no_kb())
        return

    # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–µ–Ω–∏–∫ –º–æ–∂–µ—Ç –¥–æ–ø–æ–ª–Ω—è—Ç—å ‚Äî –ª–æ–≤–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
    if st["intent"] == "error" and st["step"] in ["confirm_problem", "collect_intro"]:
        addr = data.get("address","—Ç—ã")
        # –æ–±–Ω–æ–≤–∏–º –ø–µ—Ä–µ—Ñ—Ä–∞–∑
        joined = (data.get("draft_behavior_line","") + " " + text_in).strip()
        phr = try_summarize_problem(uid, joined, addr)
        save_state(uid, step="confirm_problem", data={"draft_behavior_line": phr})
        bot.send_message(uid, phr, reply_markup=yes_no_kb())
        return

    # –°–±–æ—Ä –¥–µ—Ç–∞–ª–µ–π ¬´—Ä–∞–∑–±–æ—Ä–∞¬ª
    if st["intent"] == "error" and st["step"] in ["drill_collect", "drill_more"]:
        addr = data.get("address","—Ç—ã")
        # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        bucket = data.get("drill", {})
        # –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
        low = text_in.lower()
        if any(k in low for k in ["–∑–ª—é", "—Å—Ç—Ä–∞—Ö", "—Ç—Ä–µ–≤–æ–≥", "–ø–∞–Ω–∏–∫", "—Ä–∞–¥", "–Ω–∞–ø—Ä—è–∂"]):
            bucket["emotions"] = text_in
        if '"' in text_in or '¬´' in text_in or '¬ª' in text_in or any(k in low for k in ["–¥—É–º–∞—é", "–∫–∞–∂–µ—Ç—Å—è", "–º—ã—Å–ª"]):
            bucket["thoughts"] = text_in
        if any(k in low for k in ["–¥–µ–Ω—å", "–ø–æ—Å–ª–µ", "—É—Ç—Ä–æ", "–≤–µ—á–µ—Ä", "—Å–µ—Ä–∏—è", "–Ω–æ–≤–æ—Å—Ç–∏"]) and not data.get("flags",{}).get("no_context"):
            bucket["context"] = text_in
        save_state(uid, data={"drill": bucket})

        # –ü—Ä–æ–≤–µ—Ä–∏–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–ª—è —Å–≤–æ–¥–∫–∏
        need = ["emotions", "thoughts"]
        if data.get("flags",{}).get("no_context"):
            have_all = all(k in bucket for k in need)
        else:
            have_all = all(k in bucket for k in (need + ["context"]))
        if have_all:
            # —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å
            raw = {
                "behavior": data.get("behavior_line") or (data.get("draft_behavior_line","").strip("* ?").split(":")[-1].strip()),
                "emotions": bucket.get("emotions"),
                "thoughts": bucket.get("thoughts"),
                "context":  bucket.get("context", "(–Ω–µ —É–∫–∞–∑–∞–Ω–æ)"),
            }
            sys = ("–°–∂–∞—Ç–æ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—É —Ç—Ä–µ–π–¥–µ—Ä–∞ –∫–∞–∫ —Å–≤—è–∑–∫—É: –¥–µ–π—Å—Ç–≤–∏–µ ‚Üí —ç–º–æ—Ü–∏–∏ ‚Üí –º—ã—Å–ª–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). "
                   "–ó–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ¬´–•–æ—á—É –Ω–∞—É—á–∏—Ç—å—Å—è [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ]...¬ª. "
                   "–ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –±–µ–∑ –Ω–æ—Ç–∞—Ü–∏–π.")
            fallback = f"–°—É—Ç—å: {raw['behavior']}. –≠–º–æ—Ü–∏–∏: {raw['emotions']}. –ú—ã—Å–ª–∏: {raw['thoughts']}."
            summ = ask_gpt(sys, json.dumps(raw, ensure_ascii=False), fallback)

            # —Å–æ—Ö—Ä–∞–Ω–∏–º –∏ –ø–æ–∫–∞–∂–µ–º
            save_state(uid, step="plan_goal", data={
                "behavior_line": raw["behavior"],
                "summary": summ
            })
            bot.send_message(uid, polite(addr,
                f"–†–µ–∑—é–º–µ:\n{summ}\n\n–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–∞—Ç–∫—É—é —Ü–µ–ª—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (—á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –∏–Ω–∞—á–µ).",
                f"–†–µ–∑—é–º–µ:\n{summ}\n\n–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∫—Ä–∞—Ç–∫—É—é —Ü–µ–ª—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π (—á—Ç–æ –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å –∏–Ω–∞—á–µ)."))
        else:
            # –ü—Ä–æ—Å–∏–º –µ—â—ë –æ–¥–Ω—É –≥—Ä–∞–Ω—å ‚Äî –º–∞–∫—Å–∏–º—É–º 2-3 –≤–æ–ø—Ä–æ—Å–∞
            asked = data.get("asked_drill", 0) + 1
            save_state(uid, data={"asked_drill": asked})
            if asked <= 3:
                bot.send_message(uid, polite(addr,
                    "–î–æ–±–∞–≤—å –µ—â—ë —à—Ç—Ä–∏—Ö (—á—É–≤—Å—Ç–≤–∞/–º—ã—Å–ª–∏/–æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞) ‚Äî –æ–¥–Ω–æ-–¥–≤–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã.",
                    "–î–æ–±–∞–≤—å—Ç–µ –µ—â—ë —à—Ç—Ä–∏—Ö (—á—É–≤—Å—Ç–≤–∞/–º—ã—Å–ª–∏/–æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞) ‚Äî –æ–¥–Ω—É-–¥–≤–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã."))
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ —Å —Ç–µ–º, —á—Ç–æ –µ—Å—Ç—å
                continue_mercedes(uid, addr)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É —Ü–µ–ª–∏ ‚Üí —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–ª–∞–Ω (–±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ—Ö–Ω–∏–∫)
    if st["intent"] == "error" and st["step"] == "plan_goal":
        addr = data.get("address","—Ç—ã")
        goal = text_in.strip()
        # –°–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º –ø–ª–∞–Ω ¬´—Ü–µ–ª—å ‚Üí –¥–µ–π—Å—Ç–≤–∏—è ‚Üí –ø—Ä–æ–≤–µ—Ä–∫–∞ ‚Üí –≤—ã–≤–æ–¥¬ª
        sys = ("–ù–∞ –≤—Ö–æ–¥ —Ü–µ–ª—å —Ç—Ä–µ–π–¥–µ—Ä–∞. –ü–æ—Å—Ç—Ä–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–ª–∞–Ω –∏–∑ 4 –±–ª–æ–∫–æ–≤: "
               "–¶–µ–ª—å (1 —Å—Ç—Ä–æ–∫–∞), –®–∞–≥–∏ (3‚Äì5 –º–∞—Ä–∫–µ—Ä–æ–≤), –ü—Ä–æ–≤–µ—Ä–∫–∞ (—á—Ç–æ —Å—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º), –í—ã–≤–æ–¥ (—á—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ –∏—Ç–æ–≥—É). "
               "–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ—Ö–Ω–∏–∫.")
        plan = ask_gpt(sys, goal, f"–¶–µ–ª—å: {goal}\n–®–∞–≥–∏: 1) ... 2) ... 3) ...\n–ü—Ä–æ–≤–µ—Ä–∫–∞: ...\n–í—ã–≤–æ–¥: ...")
        # –°–æ—Ö—Ä–∞–Ω–∏–º –∏—Ç–æ–≥
        try:
            append_error_row(uid, {
                "error_text": data.get("behavior_line") or "",
                "pattern_behavior": data.get("behavior_line"),
                "pattern_emotion": data.get("drill",{}).get("emotions"),
                "pattern_thought": data.get("drill",{}).get("thoughts"),
                "positive_goal": goal,
                "tote_goal": goal,           # —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ç–µ—Ö –∂–µ –ø–æ–ª—è—Ö, —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å
                "tote_ops": plan,
                "tote_check": "",
                "tote_exit": "",
                "checklist_pre": "",
                "checklist_post": "",
            })
        except Exception as e:
            logging.warning(f"Could not persist error row: {e}")

        bot.send_message(uid, polite(addr,
            f"–ü–ª–∞–Ω –≥–æ—Ç–æ–≤:\n\n{plan}\n\n–ì–æ—Ç–æ–≤ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–ø—Ä–∞–≤–∏–º?",
            f"–ü–ª–∞–Ω –≥–æ—Ç–æ–≤:\n\n{plan}\n\n–ì–æ—Ç–æ–≤—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–ø—Ä–∞–≤–∏–º?"), reply_markup=main_menu())
        save_state(uid, intent="idle", step=None)
        return

    # –ò–Ω–æ–µ: off-script ‚Üí –æ—Ç–≤–µ—Ç GPT –∏ –º—è–≥–∫–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ
    addr = data.get("address","—Ç—ã")
    sys = ("–¢—ã —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫. –û—Ç–≤–µ—Ç—å –ø–æ —Å—É—Ç–∏, –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ-–¥–æ–±—Ä–æ–º—É, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ.")
    answer = ask_gpt(sys, text_in, polite(addr, "–ü–æ–Ω–∏–º–∞—é. –î–∞–≤–∞–π —á—É—Ç—å —Å—É–∑–∏–º —Ç–µ–º—É ‚Äî –æ–ø–∏—à–∏ –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ—à—å –≤ –æ—à–∏–±–æ—á–Ω–æ–º –º–æ–º–µ–Ω—Ç–µ.", 
                                                 "–ü–æ–Ω–∏–º–∞—é. –î–∞–≤–∞–π—Ç–µ —á—É—Ç—å —Å—É–∑–∏–º —Ç–µ–º—É ‚Äî –æ–ø–∏—à–∏—Ç–µ –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ—Ç–µ –≤ –æ—à–∏–±–æ—á–Ω—ã–π –º–æ–º–µ–Ω—Ç."))
    bot.send_message(uid, answer, reply_markup=main_menu())

# ----------------- FLASK / WEBHOOK -------
app = Flask(__name__)

@app.get("/")
def root():
    return jsonify({"status":"ok","time": datetime.utcnow().isoformat()})

@app.get("/health")
def health():
    return jsonify({"status":"ok","time": datetime.utcnow().isoformat()})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    try:
        upd = Update.de_json(request.get_data().decode("utf-8"))
        bot.process_new_updates([upd])
    except Exception as e:
        logging.exception(f"Webhook error: {e}")
    return "OK"

# --------------- –õ–û–ö–ê–õ–¨–ù–´–ô –ü–£–°–ö ----------
if __name__ == "__main__":
    # –ë–µ–∑ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ (—Ç—ã —Å—Ç–∞–≤–∏—à—å –≤—Ä—É—á–Ω—É—é), –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞—Ä—Ç—É–µ–º Flask
    port = int(os.getenv("PORT", "10000"))
    logging.info("Starting app...")
    app.run(host="0.0.0.0", port=port)
