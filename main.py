import os, json, time, logging, datetime as dt
from contextlib import contextmanager

from flask import Flask, request, abort, jsonify
from telebot import TeleBot, types
import requests

from sqlalchemy import create_engine, text
from sqlalchemy.pool import QueuePool

# =========================
# ENV
# =========================
TELEGRAM_TOKEN   = os.getenv("TELEGRAM_TOKEN", "").strip()
DATABASE_URL     = os.getenv("DATABASE_URL", "").strip()
PUBLIC_URL       = os.getenv("PUBLIC_URL", "").strip()           # e.g. https://innertrade-bot.onrender.com
WEBHOOK_PATH     = os.getenv("WEBHOOK_PATH", "wbhk_9t3x").strip()
TG_WEBHOOK_SECRET= os.getenv("TG_WEBHOOK_SECRET", "").strip()
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY", "").strip()
OPENAI_MODEL     = os.getenv("OPENAI_MODEL", "gpt-4o-mini").strip()
OFFSCRIPT_ENABLED= os.getenv("OFFSCRIPT_ENABLED", "true").lower() in ("1","true","yes")
ALLOW_SET_WEBHOOK= os.getenv("ALLOW_SET_WEBHOOK", "0").lower() in ("1","true","yes")
LOG_LEVEL        = os.getenv("LOG_LEVEL", "INFO").upper()

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN missing")
if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL missing")
if not PUBLIC_URL:
    raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")
if not WEBHOOK_PATH:
    raise RuntimeError("WEBHOOK_PATH missing")
if not TG_WEBHOOK_SECRET:
    raise RuntimeError("TG_WEBHOOK_SECRET missing")

logging.basicConfig(level=getattr(logging, LOG_LEVEL, logging.INFO))
log = logging.getLogger("innertrade")

# =========================
# APP & DB
# =========================
app = Flask(__name__)
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="HTML", threaded=False)

engine = create_engine(
    DATABASE_URL,
    poolclass=QueuePool,
    pool_size=5,
    max_overflow=5,
    pool_pre_ping=True,
    future=True,
)

@contextmanager
def db():
    with engine.begin() as conn:
        yield conn

def ensure_schema():
    ddl = """
    CREATE TABLE IF NOT EXISTS users(
      user_id    BIGINT PRIMARY KEY,
      mode       TEXT NOT NULL DEFAULT 'course',
      created_at TIMESTAMPTZ DEFAULT now(),
      updated_at TIMESTAMPTZ DEFAULT now()
    );

    CREATE TABLE IF NOT EXISTS user_state(
      user_id    BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
      intent     TEXT,
      step       TEXT,
      data       JSONB,
      updated_at TIMESTAMPTZ DEFAULT now()
    );

    CREATE TABLE IF NOT EXISTS errors(
      id                BIGSERIAL PRIMARY KEY,
      user_id           BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
      error_text        TEXT NOT NULL,
      pattern_behavior  TEXT,
      pattern_emotion   TEXT,
      pattern_thought   TEXT,
      positive_goal     TEXT,
      tote_goal         TEXT,
      tote_ops          TEXT,
      tote_check        TEXT,
      tote_exit         TEXT,
      checklist_pre     TEXT,
      checklist_post    TEXT,
      created_at        TIMESTAMPTZ DEFAULT now()
    );
    """
    with db() as conn:
        conn.exec_driver_sql(ddl)

def upsert_user(uid: int):
    with db() as conn:
        conn.execute(text("""
            INSERT INTO users(user_id) VALUES (:uid)
            ON CONFLICT (user_id) DO UPDATE SET updated_at = now()
        """), {"uid": uid})
        conn.execute(text("""
            INSERT INTO user_state(user_id, intent, step, data)
            VALUES (:uid, 'greet', 'ask_form', '{}'::jsonb)
            ON CONFLICT (user_id) DO NOTHING
        """), {"uid": uid})

def set_state(uid: int, intent: str = None, step: str = None, patch: dict | None = None):
    with db() as conn:
        row = conn.execute(text("SELECT data FROM user_state WHERE user_id=:uid"), {"uid": uid}).first()
        data = row[0] if row and row[0] else {}
        if patch:
            data.update(patch)
        conn.execute(text("""
            UPDATE user_state
            SET intent = COALESCE(:intent, intent),
                step   = COALESCE(:step, step),
                data   = :data,
                updated_at = now()
            WHERE user_id=:uid
        """), {"uid": uid, "intent": intent, "step": step, "data": json.dumps(data)})

def get_state(uid: int):
    with db() as conn:
        r = conn.execute(text("SELECT intent, step, data FROM user_state WHERE user_id=:uid"), {"uid": uid}).first()
        if not r:
            return None
        intent, step, data = r
        return {"intent": intent, "step": step, "data": data or {}}

def save_error(uid: int, error_text: str):
    with db() as conn:
        conn.execute(text("""
            INSERT INTO errors(user_id, error_text) VALUES (:uid, :et)
        """), {"uid": uid, "et": error_text})

# =========================
# HELPERS
# =========================
MAIN_MENU = types.ReplyKeyboardMarkup(resize_keyboard=True)
MAIN_MENU.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
MAIN_MENU.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
MAIN_MENU.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")

PRONOUN_MENU = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
PRONOUN_MENU.row("—Ç—ã", "–≤—ã")

def looks_like_behavioral_problem(text_: str) -> bool:
    t = (text_ or "").lower()
    verbs = ["–≤—Ö–æ–∂—É","–∑–∞—Ö–æ–∂—É","–∑–∞–∫—Ä—ã–≤–∞—é","–¥–≤–∏–≥–∞—é","–ø–µ—Ä–µ–Ω–æ—à—É","—É—Å—Ä–µ–¥–Ω—è—é","—Å–Ω–∏–º–∞—é","—Å—Ç–æ–ø","—Ç–µ–π–∫","—Ñ–∏–∫—Å–∏—Ä—É—é"]
    ok_len = len(t) >= 20
    hit = any(v in t for v in verbs)
    return ok_len and hit

def summarize_problem_with_gpt(history: list[str]) -> str | None:
    if not (OPENAI_API_KEY and OFFSCRIPT_ENABLED):
        return None
    try:
        import openai
        from openai import OpenAI
        os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY
        client = OpenAI()
        prompt = (
            "–ö—Ä–∞—Ç–∫–æ (–æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º) —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ç–æ—Ä–≥–æ–≤—É—é –ø—Ä–æ–±–ª–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "
            "–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞ (–±–µ–∑ –¥–∏–∞–≥–Ω–æ–∑–æ–≤, —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ —Ç–µ–æ—Ä–∏–∏). –ü—Ä–∏–º–µ—Ä—ã: "
            "¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –Ω–∞ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.\n\n"
            "–î–∏–∞–ª–æ–≥:\n" + "\n".join(history[-10:])
        )
        completion = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role":"system","content":"–¢—ã –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫-—Ç—Ä–µ–π–¥–∏–Ω–≥ –∫–æ—É—á. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                {"role":"user","content":prompt}
            ],
            temperature=0.2,
            max_tokens=60,
        )
        cand = completion.choices[0].message.content.strip()
        return cand
    except Exception as e:
        log.warning(f"OpenAI summarize failed: {e}")
        return None

def assistant_reply_free(uid: int, msg: str) -> str:
    """
    –ï—Å–ª–∏ –æ—Ñ—Ñ—Å–∫—Ä–∏–ø—Ç —Ä–∞–∑—Ä–µ—à—ë–Ω ‚Äî –¥–∞—ë–º —Ç—ë–ø–ª—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –∏ –º—è–≥–∫–æ –≤–µ–¥—ë–º –∫ —Ñ–∏–∫—Å–∞—Ü–∏–∏.
    –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ—É—á–∏–Ω–≥ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É.
    """
    st = get_state(uid) or {}
    data = st.get("data", {})
    history = data.get("chat_history", [])
    history.append(f"user: {msg}")
    data["chat_history"] = history[-20:]

    # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∂–µ —è–≤–Ω–∞—è –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º —Ñ–∏–∫—Å–∞—Ü–∏—é
    proposed = None
    if looks_like_behavioral_problem(msg):
        proposed = msg.strip()
    else:
        # –ø–æ–ø—Ä–æ–±—É–µ–º GPT –∫—Ä–∞—Ç–∫–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å
        proposed = summarize_problem_with_gpt(history) if OFFSCRIPT_ENABLED else None

    if proposed:
        set_state(uid, patch={"proposed_problem": proposed, "chat_history": history})
        return (
            f"–ü–æ–Ω—è–ª. –ó–∞—Ñ–∏–∫—Å–∏—Ä—É—é —Ç–∞–∫: <b>{proposed}</b>\n"
            "–ü–æ–¥—Ö–æ–¥–∏—Ç? –ù–∞–∂–º–∏ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
        )
    else:
        set_state(uid, patch={"chat_history": history})
        if OFFSCRIPT_ENABLED and OPENAI_API_KEY:
            # –ª—ë–≥–∫–æ–µ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ + —É—Ç–æ—á–Ω–µ–Ω–∏–µ
            return (
                "–ü–æ–Ω–∏–º–∞—é. –ú–æ–∂–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è ‚Äî –æ–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, "
                "—á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ—à—å (–¥–µ–π—Å—Ç–≤–∏—è–º–∏), –∫–æ–≥–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞."
            )
        return (
            "–ü–æ–Ω–∏–º–∞—é. –ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è, –¥–∞–≤–∞–π –æ–ø–∏—à–µ–º –∫–æ—Ä–æ—Ç–∫–æ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), "
            "—á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –¥–µ–ª–∞–µ—à—å, –∫–æ–≥–¥–∞ —Å–ª—É—á–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞. –ü–æ—Ç–æ–º –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–±–µ—Ä—ë–º –ø–æ —à–∞–≥–∞–º."
        )

def build_confirm_kb():
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("–î–∞, —Ç–∞–∫ –∏ –µ—Å—Ç—å", callback_data="confirm_problem_yes"),
        types.InlineKeyboardButton("–ù–µ—Ç, —Ö–æ—á—É —É—Ç–æ—á–Ω–∏—Ç—å", callback_data="confirm_problem_no"),
    )
    return kb

def mercedes_question(step_key: str) -> str:
    mapping = {
        "ctx": "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
        "emo": "–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)",
        "thought": "–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã)",
        "behavior": "–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).",
    }
    return mapping.get(step_key, "–ü—Ä–æ–¥–æ–ª–∂–∏–º.")

def next_mercedes_step(current: str | None) -> str | None:
    order = [None, "ctx", "emo", "thought", "behavior"]
    try:
        idx = order.index(current)
    except ValueError:
        idx = 0
    return order[idx + 1] if idx + 1 < len(order) else None

def start_mercedes(uid: int, problem: str):
    set_state(uid, intent="error_flow", step="m_ctx", patch={
        "problem": problem,
        "mer": {"ctx": None, "emo": None, "thought": None, "behavior": None}
    })

def mercedes_save(uid: int, key: str, value: str):
    st = get_state(uid)
    mer = st["data"].get("mer", {})
    mer[key] = value
    set_state(uid, patch={"mer": mer})

def mercedes_complete(uid: int) -> dict:
    st = get_state(uid)
    data = st["data"]
    return {
        "problem": data.get("problem"),
        "ctx": data.get("mer", {}).get("ctx"),
        "emo": data.get("mer", {}).get("emo"),
        "thought": data.get("mer", {}).get("thought"),
        "behavior": data.get("mer", {}).get("behavior"),
    }

# =========================
# WEB
# =========================
@app.get("/health")
def health():
    return jsonify({"status":"ok","time":dt.datetime.utcnow().isoformat()})

@app.get("/status")
def status():
    try:
        with db() as conn:
            conn.exec_driver_sql("SELECT 1")
        return jsonify({"ok": True, "time": dt.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S+00:00"), "db":"ok"})
    except Exception as e:
        return jsonify({"ok": False, "error": str(e)}), 500

@app.post(f"/webhook/{WEBHOOK_PATH}")
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    update = request.get_data().decode("utf-8")
    bot.process_new_updates([types.Update.de_json(update)])
    return "OK"

# =========================
# BOT COMMANDS
# =========================
@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.reply_to(m, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    upsert_user(m.from_user.id)
    st = get_state(m.from_user.id)
    payload = {
        "ok": True,
        "time": dt.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S+00:00"),
        "intent": (st or {}).get("intent"),
        "step": (st or {}).get("step"),
        "db": "ok"
    }
    bot.reply_to(m, f"<code>{json.dumps(payload, ensure_ascii=False, indent=2)}</code>")

@bot.message_handler(commands=["reset","start"])
def cmd_reset(m):
    uid = m.from_user.id
    upsert_user(uid)
    set_state(uid, intent="greet", step="ask_form", patch={"proposed_problem": None, "problem": None, "mer": {}})
    bot.send_message(uid,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name or ''}!\n"
        "–ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏, —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ. –ò–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.\n\n"
        "–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî <b>—Ç—ã</b> –∏–ª–∏ <b>–≤—ã</b>? (–Ω–∞–ø–∏—à–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ)",
        reply_markup=PRONOUN_MENU
    )

# =========================
# BOT: BUTTONS
# =========================
@bot.message_handler(func=lambda m: m.text in ("—Ç—ã","–≤—ã"))
def set_addressing(m):
    uid = m.from_user.id
    upsert_user(uid)
    set_state(uid, patch={"addressing": m.text})
    bot.send_message(uid, "–ü—Ä–∏–Ω—è—Ç–æ. –ú–æ–∂–µ–º —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª–∏—Ç, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.", reply_markup=MAIN_MENU)

@bot.message_handler(func=lambda m: m.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def intent_error(m):
    uid = m.from_user.id
    upsert_user(uid)
    st = get_state(uid)
    data = st.get("data", {})
    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è/–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ ‚Äî –Ω–µ –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ–º
    problem = data.get("problem") or data.get("proposed_problem")
    if problem and looks_like_behavioral_problem(problem):
        start_mercedes(uid, problem)
        bot.send_message(uid, f"–û–∫. –†–∞–∑–±–µ—Ä—ë–º –∫–æ—Ä–æ—Ç–∫–æ. –û—à–∏–±–∫–∞: <b>{problem}</b>\n\n" + mercedes_question("ctx"))
        return
    set_state(uid, intent="error_flow", step="ask_problem")
    bot.send_message(uid,
        "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ (—á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –î–ï–õ–ê–ï–®–¨, –∫–æ–≥–¥–∞ –æ–Ω–∞ —Å–ª—É—á–∞–µ—Ç—Å—è).\n"
        "–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –Ω–∞ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.",
        reply_markup=types.ReplyKeyboardRemove()
    )

# =========================
# BOT: CALLBACKS
# =========================
@bot.callback_query_handler(func=lambda c: c.data in ("confirm_problem_yes","confirm_problem_no"))
def cb_confirm_problem(c):
    uid = c.from_user.id
    st = get_state(uid)
    proposed = (st or {}).get("data", {}).get("proposed_problem")
    if c.data == "confirm_problem_yes" and proposed:
        set_state(uid, patch={"problem": proposed})
        start_mercedes(uid, proposed)
        bot.answer_callback_query(c.id, "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏.")
        bot.send_message(uid, f"–ò–¥—ë–º –¥–∞–ª—å—à–µ. –û—à–∏–±–∫–∞: <b>{proposed}</b>\n\n" + mercedes_question("ctx"))
    else:
        set_state(uid, step="ask_problem", patch={"proposed_problem": None})
        bot.answer_callback_query(c.id, "–•–æ—Ä–æ—à–æ, —É—Ç–æ—á–Ω–∏–º.")
        bot.send_message(uid, "–¢–æ–≥–¥–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ—à–∏–±–∫—É –ø–æ-–¥—Ä—É–≥–æ–º—É (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –î–ï–ô–°–¢–í–ò–Ø–•).")

# =========================
# BOT: TEXT FLOW
# =========================
@bot.message_handler(func=lambda m: True, content_types=["text"])
def on_text(m):
    uid = m.from_user.id
    text_in = (m.text or "").strip()
    upsert_user(uid)
    st = get_state(uid) or {"intent":"greet","step":"ask_form","data":{}}
    intent = st["intent"]
    step   = st["step"]
    data   = st.get("data", {})

    # 1) –ï—Å–ª–∏ –∂–¥—ë–º –æ—à–∏–±–∫—É (ask_problem)
    if intent == "error_flow" and step == "ask_problem":
        if looks_like_behavioral_problem(text_in):
            set_state(uid, patch={"problem": text_in})
            start_mercedes(uid, text_in)
            bot.send_message(uid, f"–û–∫. –û—à–∏–±–∫–∞: <b>{text_in}</b>\n\n" + mercedes_question("ctx"))
        else:
            # –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ñ—Ñ—Å–∫—Ä–∏–ø—Ç-–æ–±–æ–±—â–µ–Ω–∏–µ
            proposed_block = summarize_problem_with_gpt([f"user: {text_in}"]) if OFFSCRIPT_ENABLED else None
            if proposed_block:
                set_state(uid, patch={"proposed_problem": proposed_block})
                bot.send_message(uid, f"–ü–æ–Ω—è–ª. –ó–∞—Ñ–∏–∫—Å–∏—Ä—É—é —Ç–∞–∫: <b>{proposed_block}</b>\n–ü–æ–¥—Ö–æ–¥–∏—Ç?",
                                 reply_markup=build_confirm_kb())
            else:
                bot.send_message(uid, "–ù–µ–º–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –ø—Ä–æ –î–ï–ô–°–¢–í–ò–Ø: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ—à—å? (–ø—Ä–∏–º–µ—Ä: ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª)")
        return

    # 2) MERCEDES —à–∞–≥–∏
    if intent == "error_flow" and step and step.startswith("m_"):
        key = step.split("_", 1)[1]  # ctx/emo/thought/behavior
        mercedes_save(uid, key, text_in)
        nxt_key = next_mercedes_step(key)
        if nxt_key:
            set_state(uid, step=f"m_{nxt_key}")
            bot.send_message(uid, mercedes_question(nxt_key))
            return
        # –∑–∞–≤–µ—Ä—à–∏–ª–∏ MERCEDES
        snap = mercedes_complete(uid)
        # —Å–æ—Ö—Ä–∞–Ω–∏–º –∑–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏ (–º–∏–Ω–∏–º—É–º)
        save_error(uid, snap["problem"] or "")
        # –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ü–µ–ª–∏ (TOTE Goal light)
        summary = (
            f"–†–µ–∑—é–º–µ:\n"
            f"‚Ä¢ –û—à–∏–±–∫–∞: {snap['problem']}\n"
            f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {snap['ctx']}\n"
            f"‚Ä¢ –≠–º–æ—Ü–∏–∏: {snap['emo']}\n"
            f"‚Ä¢ –ú—ã—Å–ª–∏: {snap['thought']}\n"
            f"‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω–∏–µ: {snap['behavior']}\n\n"
            "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º: —á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?"
        )
        set_state(uid, step="tote_goal")
        bot.send_message(uid, summary)
        return

    # 3) TOTE goal
    if intent == "error_flow" and step == "tote_goal":
        goal = text_in
        set_state(uid, step="tote_ops", patch={"tote_goal": goal})
        bot.send_message(uid, "–û–∫. –ö–∞–∫–∏–µ 2‚Äì3 —à–∞–≥–∞ –ø–æ–º–æ–≥—É—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è —ç—Ç–æ–π —Ü–µ–ª–∏ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–∫–∞—Ö?")
        return

    # 4) TOTE ops
    if intent == "error_flow" and step == "tote_ops":
        ops = text_in
        set_state(uid, step="tote_done", patch={"tote_ops": ops})
        st2 = get_state(uid)
        goal = st2["data"].get("tote_goal","")
        bot.send_message(uid,
            f"–ì–æ—Ç–æ–≤–æ.\n<b>–¶–µ–ª—å:</b> {goal}\n<b>–®–∞–≥–∏:</b> {ops}\n\n"
            "–î–æ–±–∞–≤–ª—é –≤ –ø–ª–∞–Ω –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏. –ú–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.",
            reply_markup=MAIN_MENU
        )
        # —Ñ–∏–Ω–∞–ª —É—Ä–æ–∫–∞ 1 ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
        set_state(uid, intent="greet", step="ask_form")
        return

    # 5) –ò–Ω–∞—á–µ ‚Äî –æ—Ñ—Ñ—Å–∫—Ä–∏–ø—Ç –∏–ª–∏ –º—è–≥–∫–∞—è –ø–æ–¥–≤–æ–¥–∫–∞
    reply = assistant_reply_free(uid, text_in)
    if isinstance(reply, tuple):
        bot.send_message(uid, reply[0], reply_markup=build_confirm_kb())
    else:
        bot.send_message(uid, reply)

# =========================
# STARTUP
# =========================
def set_webhook():
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook"
    target = f"{PUBLIC_URL}/webhook/{WEBHOOK_PATH}"
    payload = {
        "url": target,
        "secret_token": TG_WEBHOOK_SECRET,
        "allowed_updates": ["message","callback_query"],
        "drop_pending_updates": True
    }
    try:
        r = requests.post(url, data=payload, timeout=15)
        log.info(f"setWebhook -> {r.status_code} {r.text}")
    except Exception as e:
        log.error(f"setWebhook failed: {e}")

def del_webhook():
    try:
        r = requests.get(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/deleteWebhook", timeout=10)
        log.info(f"deleteWebhook -> {r.status_code} {r.text}")
    except Exception as e:
        log.error(f"deleteWebhook failed: {e}")

def startup():
    ensure_schema()
    if ALLOW_SET_WEBHOOK:
        del_webhook()
        set_webhook()
    log.info("Ready.")

if __name__ == "__main__":
    startup()
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
