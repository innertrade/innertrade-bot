# main.py
import os
import json
import time
import logging
from dataclasses import dataclass, asdict
from typing import Optional, Dict, Any

from flask import Flask, request, jsonify, abort
from telebot import TeleBot, types
from telebot.types import Update

from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError, OperationalError

# ============ –õ–û–ì–ò ============
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("innertrade")

STARTED_AT = time.time()

# ============ ENV ============
TELEGRAM_TOKEN     = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY")  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ; –±–µ–∑ –Ω–µ–≥–æ –±—É–¥–µ—Ç ¬´—Ä—É—á–Ω–æ–π¬ª –∫–æ—É—á–∏–Ω–≥
DATABASE_URL       = os.getenv("DATABASE_URL")
PUBLIC_URL         = os.getenv("PUBLIC_URL")      # –Ω–∞–ø—Ä–∏–º–µ—Ä, https://innertrade-bot.onrender.com
WEBHOOK_PATH       = os.getenv("WEBHOOK_PATH")    # –Ω–∞–ø—Ä–∏–º–µ—Ä, "wbhk_abcd123"
TG_WEBHOOK_SECRET  = os.getenv("TG_WEBHOOK_SECRET")  # —Å–µ–∫—Ä–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-Bot-Api-Secret-Token

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN missing")
if not PUBLIC_URL:
    raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")
if not WEBHOOK_PATH:
    raise RuntimeError("WEBHOOK_PATH missing (e.g., wbhk_xxx)")
if not TG_WEBHOOK_SECRET:
    raise RuntimeError("TG_WEBHOOK_SECRET missing")

# ============ OPENAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ============
# –ú—è–≥–∫–∞—è –æ–±—ë—Ä—Ç–∫–∞ ‚Äî –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç/–æ—à–∏–±–∫–∞, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ LLM.
try:
    from openai import OpenAI
    oa_client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None
except Exception as e:
    log.warning(f"OpenAI SDK not available: {e}")
    oa_client = None

def coach_reply(prompt: str, sys_hint: str) -> Optional[str]:
    """
    –ö–æ—Ä–æ—Ç–∫–∏–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –≤–µ—Ä–Ω—ë–º None.
    """
    if not oa_client:
        return None
    try:
        # –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–æ–¥—Å–∫–∞–∑–∫–∞, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
        resp = oa_client.responses.create(
            model="gpt-4o-mini",
            input=[
                {"role": "system", "content": sys_hint},
                {"role": "user", "content": prompt},
            ],
            max_output_tokens=180,
            temperature=0.5,
        )
        txt = resp.output_text.strip()
        return txt[:800]
    except Exception as e:
        log.warning(f"LLM fallback: {e}")
        return None

# ============ –ë–î ============
engine = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True)
        with engine.begin() as conn:
            # –¢–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã; –±–µ–∑ ¬´DROP¬ª ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS users (
              user_id    BIGINT PRIMARY KEY,
              mode       TEXT NOT NULL DEFAULT 'course',
              created_at TIMESTAMPTZ DEFAULT now(),
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS user_state (
              user_id   BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
              intent    TEXT,
              step      TEXT,
              data      JSONB,
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS errors (
              id                BIGSERIAL PRIMARY KEY,
              user_id           BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
              error_text        TEXT NOT NULL,
              pattern_behavior  TEXT,
              pattern_emotion   TEXT,
              pattern_thought   TEXT,
              positive_goal     TEXT,
              tote_goal         TEXT,
              tote_ops          TEXT,
              tote_check        TEXT,
              tote_exit         TEXT,
              checklist_pre     TEXT,
              checklist_post    TEXT,
              created_at        TIMESTAMPTZ DEFAULT now()
            );
            """))
        log.info("DB connected & tables ready")
    except OperationalError as e:
        log.warning(f"DB not available yet: {e}")
        engine = None
else:
    log.info("DATABASE_URL not set ‚Äî running without DB")

def db_exec(sql: str, params: Optional[dict] = None):
    if not engine:
        return None
    with engine.begin() as conn:
        return conn.execute(text(sql), params or {})

def upsert_user(uid: int):
    if not engine: return
    db_exec("INSERT INTO users(user_id) VALUES (:uid) ON CONFLICT (user_id) DO NOTHING", {"uid": uid})

def save_state(uid: int, intent: str, step: Optional[str] = None, data: Optional[dict] = None):
    if not engine: return
    upsert_user(uid)
    db_exec("""
    INSERT INTO user_state(user_id, intent, step, data)
    VALUES (:uid, :intent, :step, CAST(:data AS JSONB))
    ON CONFLICT (user_id) DO UPDATE
    SET intent = EXCLUDED.intent,
        step   = EXCLUDED.step,
        data   = EXCLUDED.data,
        updated_at = now()
    """, {"uid": uid, "intent": intent, "step": step, "data": json.dumps(data or {})})

def load_state(uid: int) -> dict:
    if not engine:
        return {}
    res = db_exec("SELECT intent, step, data FROM user_state WHERE user_id = :uid", {"uid": uid})
    row = res.fetchone() if res else None
    if not row:
        return {}
    return {"intent": row[0], "step": row[1], "data": row[2] or {}}

def insert_error_record(uid: int, payload: dict):
    if not engine: return
    fields = {
        "user_id": uid,
        "error_text": payload.get("error_text", ""),
        "pattern_behavior": payload.get("pattern_behavior"),
        "pattern_emotion": payload.get("pattern_emotion"),
        "pattern_thought": payload.get("pattern_thought"),
        "positive_goal": payload.get("positive_goal"),
        "tote_goal": payload.get("tote_goal"),
        "tote_ops": payload.get("tote_ops"),
        "tote_check": payload.get("tote_check"),
        "tote_exit": payload.get("tote_exit"),
        "checklist_pre": payload.get("checklist_pre"),
        "checklist_post": payload.get("checklist_post"),
    }
    placeholders = ", ".join(fields.keys())
    values = ", ".join([f":{k}" for k in fields.keys()])
    sql = f"INSERT INTO errors({placeholders}) VALUES ({values})"
    db_exec(sql, fields)

# ============ –ë–û–¢ ============
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

WELCOME = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /status /ping"

# ====== –ú–Ø–ì–ö–ò–ô ¬´–ü–†–ï-–®–ê–ì¬ª –ü–ï–†–ï–î MERCEDES ======
@dataclass
class ProbeState:
    """—Ö—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω–æ –¥–æ MERCEDES"""
    raw_issue: Optional[str] = None           # –∫–∞–∫ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    probes: int = 0                           # —Å–∫–æ–ª—å–∫–æ —É—Ç–æ—á–Ω—è—é—â–∏—Ö —É–∂–µ –±—ã–ª–æ
    summary_ready: bool = False               # –±–æ—Ç —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª –≥–∏–ø–æ—Ç–µ–∑—É –∏ —Å–ø—Ä–æ—Å–∏–ª ¬´–û–∫?¬ª
    agreed: bool = False                      # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è
    # ¬´—Å–ª–æ—Ç—ã¬ª –¥–ª—è –º—è–≥–∫–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
    when: Optional[str] = None                # –∫–æ–≥–¥–∞ —ç—Ç–æ —Å–ª—É—á–∞–µ—Ç—Å—è / –≤ –∫–∞–∫–∏–µ –¥–Ω–∏/—É—Å–ª–æ–≤–∏—è
    behavior: Optional[str] = None            # —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—Ç (–≥–ª–∞–≥–æ–ª—ã)
    feelings: Optional[str] = None            # —ç–º–æ—Ü–∏–∏/–æ—â—É—â–µ–Ω–∏—è
    thoughts: Optional[str] = None            # –º—ã—Å–ª–∏/—Å–∞–º–æ—Ä–∞–∑–≥–æ–≤–æ—Ä

    def to_dict(self): return asdict(self)

def get_probe(state: dict) -> ProbeState:
    return ProbeState(**(state.get("probe") or {}))

def set_probe(uid: int, p: ProbeState, intent="error", step="probe"):
    data = load_state(uid).get("data", {})
    data["probe"] = p.to_dict()
    save_state(uid, intent=intent, step=step, data=data)

def clear_probe(uid: int):
    data = load_state(uid).get("data", {})
    data.pop("probe", None)
    save_state(uid, intent="error", step="start", data=data)

def propose_summary(p: ProbeState) -> str:
    parts = []
    if p.raw_issue: parts.append(p.raw_issue.strip())
    if p.when: parts.append(f"–æ—Å–æ–±–µ–Ω–Ω–æ —á–∞—Å—Ç–æ ‚Äî {p.when.strip()}")
    if p.behavior: parts.append(f"–¥–µ–π—Å—Ç–≤–∏–µ: {p.behavior.strip()}")
    if p.feelings: parts.append(f"—ç–º–æ—Ü–∏–∏: {p.feelings.strip()}")
    if p.thoughts: parts.append(f"–º—ã—Å–ª–∏: {p.thoughts.strip()}")
    text = "; ".join(parts)
    if not text:
        text = "–û—à–∏–±–∫–∞ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞."
    return f"–¢–∞–∫ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º—É: *{text}*\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç? –ï—Å–ª–∏ –¥–∞ ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–¥–∞¬ª. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏, —á—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å."

# ====== –•–ï–ù–î–õ–ï–†–´ ======
@bot.message_handler(commands=["start", "menu", "reset"])
def cmd_start(m):
    upsert_user(m.from_user.id)
    save_state(m.from_user.id, intent="idle", step=None, data={})
    bot.send_message(m.chat.id, WELCOME, reply_markup=main_menu())

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    uptime = int(time.time() - STARTED_AT)
    mins = uptime // 60
    db_ok = False
    try:
        if engine:
            db_exec("SELECT 1")
            db_ok = True
    except SQLAlchemyError:
        db_ok = False
    bot.send_message(
        m.chat.id,
        f"‚úÖ –ë–æ—Ç –∂–∏–≤.\nUptime: {mins} –º–∏–Ω\n–ë–î: {'ok' if db_ok else '–Ω–µ—Ç'}\nWebhook: {PUBLIC_URL}/***",
        reply_markup=main_menu()
    )

# ----- –ö–Ω–æ–ø–∫–∏-–∏–Ω—Ç–µ–Ω—Ç—ã -----
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def intent_error_btn(m):
    # —Å—Ç–∞—Ä—Ç ¬´–º—è–≥–∫–æ–≥–æ —Ä–∞–ø–ø–æ—Ä—Ç–∞¬ª
    p = ProbeState()
    set_probe(m.from_user.id, p, intent="error", step="probe")
    bot.send_message(
        m.chat.id,
        "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ *–ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞*.\n"
        "–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def intent_strategy_btn(m):
    save_state(m.from_user.id, intent="strategy", step="start", data={})
    bot.send_message(
        m.chat.id,
        "–û–∫, —Å–æ–±–∏—Ä–∞–µ–º –¢–° –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É:\n"
        "1) –¶–µ–ª–∏\n2) –°—Ç–∏–ª—å (–¥–Ω–µ–≤–Ω–æ–π/—Å–≤–∏–Ω–≥/–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π)\n3) –†—ã–Ω–∫–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n"
        "4) –ü—Ä–∞–≤–∏–ª–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞\n5) –†–∏—Å–∫ (%, —Å—Ç–æ–ø)\n6) –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n7) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def intent_passport_btn(m):
    save_state(m.from_user.id, intent="passport", step="start", data={})
    bot.send_message(
        m.chat.id,
        "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. 1/6) –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å?",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def intent_week_panel_btn(m):
    save_state(m.from_user.id, intent="week_panel", step="start", data={})
    bot.send_message(
        m.chat.id,
        "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏:\n‚Ä¢ –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n‚Ä¢ –ü–ª–∞–Ω (3 —à–∞–≥–∞)\n‚Ä¢ –õ–∏–º–∏—Ç—ã\n‚Ä¢ –†–∏—Ç—É–∞–ª—ã\n‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def intent_panic_btn(m):
    save_state(m.from_user.id, intent="panic", step="start", data={})
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–æ–º\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
        "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä (—á—Ç–æ –≤—ã–±–∏–ª–æ)\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def intent_start_help_btn(m):
    save_state(m.from_user.id, intent="start_help", step="start", data={})
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω)\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°\n"
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º ‚Äî –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏?",
        reply_markup=main_menu()
    )

# ====== –°–¶–ï–ù–ê–†–ò–ô: ¬´–ú–Ø–ì–ö–ê–Ø –ö–û–ù–ö–†–ï–¢–ò–ó–ê–¶–ò–Ø¬ª ‚Üí MERCEDES ======
def handle_probe(uid: int, chat_id: int, text_msg: str) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –ø—Ä–æ–ª–æ–≥ –æ—à–∏–±–∫–∏ (–¥–æ MERCEDES).
    """
    state = load_state(uid)
    if state.get("intent") != "error" or state.get("step") not in (None, "probe", "start"):
        return False

    p = get_probe(state)

    # 1) –µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ ‚Äî –±–µ—Ä—ë–º –µ—ë
    if not p.raw_issue:
        p.raw_issue = text_msg.strip()
        p.probes = 1
        set_probe(uid, p)
        # –ü–µ—Ä–≤—ã–π –º—è–≥–∫–∏–π —É—Ç–æ—á–Ω—è—é—â–∏–π: ¬´–∫–æ–≥–¥–∞/–≤ –∫–∞–∫–∏–µ –¥–Ω–∏/–≤ –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö?¬ª
        bot.send_message(
            chat_id,
            "–ü–æ–Ω—è–ª. *–ö–æ–≥–¥–∞* —ç—Ç–æ —á–∞—â–µ —Å–ª—É—á–∞–µ—Ç—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–≤ –¥–Ω–∏ –±–µ–∑ —Å–µ—Ç–∞–ø–æ–≤¬ª, ¬´–ø–æ—Å–ª–µ —É–±—ã—Ç–∫–æ–≤¬ª, ¬´–Ω–∞ —Å–∏–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö¬ª)"
        )
        return True

    # 2) —Å–æ–±–∏—Ä–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏—è
    low = text_msg.lower().strip()
    if any(x in low for x in ["–∫–æ–≥–¥–∞", "–¥–µ–Ω—å", "–¥–Ω–∏", "–±—ã–≤–∞–µ—Ç", "—á–∞—Å—Ç–æ", "–æ–±—ã—á–Ω–æ"]) and not p.when:
        p.when = text_msg.strip()
        p.probes += 1
        set_probe(uid, p)
        bot.send_message(chat_id, "–ê —á—Ç–æ *–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å* –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (–≥–ª–∞–≥–æ–ª–∞–º–∏: ¬´–≤—Ö–æ–∂—É —Ä–∞–Ω—å—à–µ¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø¬ª, ¬´—Ñ–∏–∫—Å–∏—Ä—É—é—Å—å –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª)")
        return True

    # —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –µ—â—ë –ø—É—Å—Ç–æ ‚Äî –ø—Ä–∏–º–µ–º –Ω—ã–Ω–µ—à–Ω–∏–π –æ—Ç–≤–µ—Ç –∑–∞ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    if not p.behavior:
        p.behavior = text_msg.strip()
        p.probes += 1
        set_probe(uid, p)
        bot.send_message(chat_id, "–ö–∞–∫–∏–µ *—ç–º–æ—Ü–∏–∏/–æ—â—É—â–µ–Ω–∏—è* –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")
        return True

    # –µ—Å–ª–∏ —ç–º–æ—Ü–∏–∏ –ø—É—Å—Ç—ã ‚Äî –ø—Ä–∏–º–µ–º –Ω—ã–Ω–µ—à–Ω–∏–π –æ—Ç–≤–µ—Ç –∑–∞ —ç–º–æ—Ü–∏–∏
    if not p.feelings:
        p.feelings = text_msg.strip()
        p.probes += 1
        set_probe(uid, p)
        bot.send_message(chat_id, "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏–µ –º—ã—Å–ª–∏/—Ñ—Ä–∞–∑—ã.")
        return True

    # –µ—Å–ª–∏ –º—ã—Å–ª–∏ –ø—É—Å—Ç—ã ‚Äî –ø—Ä–∏–º–µ–º –Ω—ã–Ω–µ—à–Ω–∏–π –æ—Ç–≤–µ—Ç –∑–∞ –º—ã—Å–ª–∏
    if not p.thoughts:
        p.thoughts = text_msg.strip()
        p.probes += 1
        set_probe(uid, p)

    # 3) –ø–æ—Å–ª–µ 2‚Äì3 —É—Ç–æ—á–Ω–µ–Ω–∏–π ‚Äî —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É –∏ —Å–ø—Ä–æ—Å–∏—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ
    if p.probes >= 2 and not p.summary_ready:
        p.summary_ready = True
        set_probe(uid, p)
        bot.send_message(chat_id, propose_summary(p))
        return True

    # 4) —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
    if p.summary_ready and not p.agreed:
        if low in ("–¥–∞", "–æ–∫", "–¥–∞, –æ–∫", "—Å–æ–≥–ª–∞—Å–µ–Ω", "–ø–æ–¥—Ö–æ–¥–∏—Ç", "–¥–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç"):
            p.agreed = True
            set_probe(uid, p)
            # –ü–µ—Ä–µ—Ö–æ–¥ –∫ MERCEDES
            # –°–æ—Ö—Ä–∞–Ω–∏–º ¬´–æ—à–∏–±–∫—É¬ª –≤ user_state.data, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —Å–æ–±—Ä–∞—Ç—å –∑–∞–ø–∏—Å—å errors
            data = load_state(uid).get("data", {})
            data["mercedes"] = {
                "context": None,
                "emotions": None,
                "thoughts": None,
                "behavior": None,
                "beliefs_values": None,
                "state": None,
                "raw_issue": p.raw_issue,
                "when": p.when,
            }
            save_state(uid, intent="error", step="mercedes_context", data=data)
            bot.send_message(chat_id, "–ò–¥—ë–º –¥–∞–ª—å—à–µ ‚Äî MERCEDES.\n\n*–ö–û–ù–¢–ï–ö–°–¢.* –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
            return True
        else:
            # –ø–æ–ø—Ä–æ—Å–∏–º –ø–æ–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∏ –ø–æ–≤—Ç–æ—Ä–∏–º –≥–∏–ø–æ—Ç–µ–∑—É
            p.summary_ready = False
            set_probe(uid, p)
            bot.send_message(chat_id, "–•–æ—Ä–æ—à–æ, —É—Ç–æ—á–Ω–∏, —á—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å –≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ ‚Äî –∏ —è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É—é.")
            return True

    return True

def mercedes_step(uid: int, chat_id: int, text_msg: str) -> bool:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ MERCEDES + –ø–µ—Ä–µ—Ö–æ–¥ –∫ TOTE. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏.
    """
    st = load_state(uid)
    if st.get("intent") != "error":
        return False
    step = st.get("step")
    data = st.get("data") or {}
    mer = data.get("mercedes") or {}

    if step == "mercedes_context":
        mer["context"] = text_msg.strip()
        data["mercedes"] = mer
        save_state(uid, "error", "mercedes_emotions", data)
        bot.send_message(chat_id, "*–≠–ú–û–¶–ò–ò.* –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? –ö–∞–∫ —ç—Ç–æ –æ—â—É—â–∞–µ—Ç—Å—è –≤ —Ç–µ–ª–µ? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")
        return True

    if step == "mercedes_emotions":
        mer["emotions"] = text_msg.strip()
        data["mercedes"] = mer
        save_state(uid, "error", "mercedes_thoughts", data)
        bot.send_message(chat_id, "*–ú–´–°–õ–ò.* –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã)")
        return True

    if step == "mercedes_thoughts":
        mer["thoughts"] = text_msg.strip()
        data["mercedes"] = mer
        save_state(uid, "error", "mercedes_behavior", data)
        bot.send_message(chat_id, "*–ü–û–í–ï–î–ï–ù–ò–ï.* –ß—Ç–æ –¥–µ–ª–∞–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ? (–≥–ª–∞–≥–æ–ª–∞–º–∏, 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
        return True

    if step == "mercedes_behavior":
        mer["behavior"] = text_msg.strip()
        data["mercedes"] = mer
        save_state(uid, "error", "mercedes_beliefs", data)
        bot.send_message(chat_id, "*–£–ë–ï–ñ–î–ï–ù–ò–Ø/–¶–ï–ù–ù–û–°–¢–ò.* –ü–æ—á–µ–º—É ¬´–Ω–∞–¥–æ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫¬ª? –ö–∞–∫–∏–µ —É–±–µ–∂–¥–µ–Ω–∏—è/—Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —ç—Ç–∏–º?")
        return True

    if step == "mercedes_beliefs":
        mer["beliefs_values"] = text_msg.strip()
        data["mercedes"] = mer
        save_state(uid, "error", "mercedes_state", data)
        bot.send_message(chat_id, "*–°–û–°–¢–û–Ø–ù–ò–ï.* –í –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Ö–æ–¥–∏–ª? –ß—Ç–æ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–ª–æ: —Ç—Ä–µ–≤–æ–≥–∞, –∞–∑–∞—Ä—Ç, –∫–æ–Ω—Ç—Ä–æ–ª—å?")
        return True

    if step == "mercedes_state":
        mer["state"] = text_msg.strip()
        data["mercedes"] = mer
        # –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
        pattern = f"–ü–æ–≤–µ–¥–µ–Ω–∏–µ: {mer.get('behavior') or '-'}; —ç–º–æ—Ü–∏–∏: {mer.get('emotions') or '-'}; –º—ã—Å–ª–∏: {mer.get('thoughts') or '-'}."
        data["pattern_behavior"] = mer.get("behavior")
        data["pattern_emotion"]  = mer.get("emotions")
        data["pattern_thought"]  = mer.get("thoughts")
        save_state(uid, "error", "tote_goal", data)
        bot.send_message(
            chat_id,
            f"–†–µ–∑—é–º–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: {pattern}\n\n–¢–µ–ø–µ—Ä—å *TOTE*.\n*T (—Ü–µ–ª—å)* ‚Äî —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω–æ –∏ –Ω–∞–±–ª—é–¥–∞–µ–º–æ. –ü—Ä–∏–º–µ—Ä: ¬´–í –±–ª–∏–∂–∞–π—à–∏–µ 3 —Å–¥–µ–ª–∫–∏ –Ω–µ –¥–≤–∏–≥–∞—é —Å—Ç–æ–ø/—Ç–µ–π–∫ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª."
        )
        return True

    # TOTE
    if step == "tote_goal":
        data["tote_goal"] = text_msg.strip()
        save_state(uid, "error", "tote_ops", data)
        bot.send_message(chat_id, "*O (–æ–ø–µ—Ä–∞—Ü–∏–∏):* –ö–∞–∫–∏–µ —à–∞–≥–∏ –ø–æ–º–æ–≥—É—Ç —É–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–ª—å? (—á–µ–∫-–ª–∏—Å—Ç/—Ç–∞–π–º–µ—Ä/–¥—ã—Ö–∞–Ω–∏–µ/–∑–∞–º–µ—Ç–∫–∏)")
        return True

    if step == "tote_ops":
        data["tote_ops"] = text_msg.strip()
        save_state(uid, "error", "tote_check", data)
        bot.send_message(chat_id, "*T (–ø—Ä–æ–≤–µ—Ä–∫–∞):* –ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ —Ü–µ–ª—å —É–¥–µ—Ä–∂–∞–Ω–∞? (–∫—Ä–∏—Ç–µ—Ä–∏–∏) –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å?")
        return True

    if step == "tote_check":
        data["tote_check"] = text_msg.strip()
        save_state(uid, "error", "tote_exit", data)
        bot.send_message(chat_id, "*E (–≤—ã—Ö–æ–¥):* –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–∞. –ß—Ç–æ —É—Å–∏–ª–∏–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑?")
        return True

    if step == "tote_exit":
        data["tote_exit"] = text_msg.strip()
        # Done-—É—Å–ª–æ–≤–∏–µ –£—Ä–æ–∫–∞ 1: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        payload = {
            "error_text": (get_probe(st.get("data", {})).raw_issue if st.get("data") else None)
                          or data.get("mercedes", {}).get("raw_issue") or "–æ—à–∏–±–∫–∞ (–Ω–µ —É–∫–∞–∑–∞–Ω–∞)",
            "pattern_behavior": data.get("pattern_behavior"),
            "pattern_emotion":  data.get("pattern_emotion"),
            "pattern_thought":  data.get("pattern_thought"),
            "positive_goal":    data.get("tote_goal"),
            "tote_goal":        data.get("tote_goal"),
            "tote_ops":         data.get("tote_ops"),
            "tote_check":       data.get("tote_check"),
            "tote_exit":        data.get("tote_exit"),
            "checklist_pre":    "–ß–µ–∫-–ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º: —Å–µ—Ç–∞–ø 100%, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∫, –ø–ª–∞–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è.",
            "checklist_post":   "–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞: –¥—ã—Ö–∞–Ω–∏–µ, —Ç–∞–π–º–µ—Ä, –Ω–µ —Ç—Ä–æ–≥–∞—é —Å—Ç–æ–ø/—Ç–µ–π–∫ –¥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è.",
        }
        try:
            insert_error_record(uid, payload)
        except SQLAlchemyError as e:
            log.warning(f"save error record failed: {e}")

        # –æ—á–∏—Å—Ç–∏–º probe –∏ –ø–µ—Ä–µ–≤–µ–¥—ë–º –≤ idle
        save_state(uid, "idle", None, {})
        bot.send_message(
            chat_id,
            "–ì–æ—Ç–æ–≤–æ ‚úÖ\n–°–æ—Ö—Ä–∞–Ω–∏–ª —Ä–∞–∑–±–æ—Ä.\n–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –¢–°?"
        )
        return True

    return False

# ====== Fallback / —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –º—è–≥–∫–∏–º –≤–æ–∑–≤—Ä–∞—Ç–æ–º ======
@bot.message_handler(content_types=["text"])
def on_text(m):
    uid = m.from_user.id
    txt = (m.text or "").strip()

    # 1) –µ—Å–ª–∏ –º—ã –≤ –ø—Ä–æ–ª–æ–≥–µ ¬´–æ—à–∏–±–∫–∏¬ª ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    if handle_probe(uid, m.chat.id, txt):
        return

    # 2) –µ—Å–ª–∏ –º—ã –≤ MERCEDES/TOTE ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    if mercedes_step(uid, m.chat.id, txt):
        return

    # 3) —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ + –º—è–≥–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ü–µ–Ω–∞—Ä–∏—é
    sys_hint = (
        "–¢—ã –∫–æ—É—á –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ-–¥–æ–±—Ä–æ–º—É, –Ω–∞ ¬´—Ç—ã¬ª. "
        "–ü–∞—Ä–∞ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º –∫—É—Ä—Å–∞/–±–æ—Ç–∞. "
        "–ë–µ–∑ –ª–µ–∫—Ü–∏–π, –º–∞–∫—Å–∏–º—É–º 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
    )
    reply = coach_reply(txt, sys_hint) or "–ü–æ–Ω–∏–º–∞—é. –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ –∏–ª–∏ –ø–æ–π–¥—ë–º –ø–æ —à–∞–≥–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞¬ª)?"
    bot.send_message(m.chat.id, reply, reply_markup=main_menu())

# ============ FLASK / WEBHOOK ============
app = Flask(__name__)

@app.get("/")
def root():
    return "OK"

@app.get("/health")
def health():
    return jsonify({"status": "ok", "time": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())})

@app.post(f"/{WEBHOOK_PATH}")
def tg_webhook():
    # –ü–µ—Ä–∏–º–µ—Ç—Ä: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç –∏ —Ä–∞–∑–º–µ—Ä
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    try:
        j = request.get_json(force=True, silent=False)
        update = Update.de_json(j)
        bot.process_new_updates([update])
    except Exception as e:
        log.error(f"webhook error: {e}")
        return "error", 500
    return "ok"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–±–µ–∑ –≥–æ–Ω–æ–∫)
def ensure_webhook():
    import requests
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook"
    payload = {
        "url": f"{PUBLIC_URL}/{WEBHOOK_PATH}",
        "secret_token": TG_WEBHOOK_SECRET,
        "allowed_updates": ["message", "callback_query"],
        "drop_pending_updates": True
    }
    try:
        r = requests.post(url, json=payload, timeout=10)
        log.info(f"setWebhook -> {r.status_code} {r.text}")
    except Exception as e:
        log.warning(f"setWebhook failed: {e}")

if __name__ == "__main__":
    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ (–±–µ–∑ removeWebhook ‚Äî Telegram —Å–∞–º –∑–∞–º–µ–Ω–∏—Ç).
    ensure_webhook()
    port = int(os.getenv("PORT", "10000"))
    log.info("Starting web server‚Ä¶")
    app.run(host="0.0.0.0", port=port)
