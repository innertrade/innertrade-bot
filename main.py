import os
import logging
import telebot
from telebot import types
from openai import OpenAI
from flask import Flask

# ====== –ö–ª—é—á–∏ –∏–∑ Secrets ======
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets")
if not OPENAI_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets")

# OpenAI client (–Ω–æ–≤—ã–π SDK)
client = OpenAI(api_key=OPENAI_KEY)

# ====== –õ–æ–≥–∏ ======
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# ====== –°–Ω—è—Ç—å webhook –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ======
try:
    bot.remove_webhook()
    logging.info("Webhook removed (ok)")
except Exception as e:
    logging.warning(f"Webhook remove warn: {e}")

# ====== –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ ======
history = {}  # uid -> [{"role":"user"/"assistant","content":"..."}]

def ask_gpt(uid, text):
    """–í—ã–∑–æ–≤ Chat Completions —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π SDK."""
    msgs = history.setdefault(uid, [])
    msgs.append({"role": "user", "content": text})

    resp = client.chat.completions.create(
        model="gpt-4o-mini",    # –º–æ–∂–Ω–æ gpt-4o / gpt-4.1-mini –∏ —Ç.–ø.
        temperature=0.5,
        messages=msgs
    )
    reply = (resp.choices[0].message.content or "").strip()
    msgs.append({"role": "assistant", "content": reply})
    return reply

def send_long(chat_id, text):
    MAX = 3500
    for i in range(0, len(text), MAX):
        bot.send_message(chat_id, text[i:i+MAX])

# ====== /start ======
@bot.message_handler(commands=['start'])
def cmd_start(m):
    uid = m.from_user.id
    history[uid] = []
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("–ú–æ–¥—É–ª—å 1"), types.KeyboardButton("–ú–æ–¥—É–ª—å 2"))
    kb.row(types.KeyboardButton("–ß–µ–∫-–ª–∏—Å—Ç"), types.KeyboardButton("–§–∏–∫—Å–∞—Ü–∏—è"), types.KeyboardButton("–°–±—Ä–æ—Å"))
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade.\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=kb
    )

# ====== /ping (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞) ======
@bot.message_handler(commands=['ping'])
def cmd_ping(m):
    bot.reply_to(m, "pong ‚úÖ")

# ====== /reset ======
@bot.message_handler(commands=['reset'])
def cmd_reset(m):
    history[m.from_user.id] = []
    bot.reply_to(m, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

# ====== –ö–Ω–æ–ø–∫–∏ ======
@bot.message_handler(func=lambda x: x.text in {"–ú–æ–¥—É–ª—å 1","–ú–æ–¥—É–ª—å 2","–ß–µ–∫-–ª–∏—Å—Ç","–§–∏–∫—Å–∞—Ü–∏—è","–°–±—Ä–æ—Å"})
def on_buttons(m):
    uid = m.from_user.id
    t = (m.text or "").strip()
    if t == "–°–±—Ä–æ—Å":
        history[uid] = []
        bot.reply_to(m, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞–∂–º–∏ ¬´–ú–æ–¥—É–ª—å 1¬ª –∏–ª–∏ ¬´–ú–æ–¥—É–ª—å 2¬ª.")
        return
    alias = {"–ú–æ–¥—É–ª—å 1":"–ì–æ—Ç–æ–≤", "–ú–æ–¥—É–ª—å 2":"–¢–°", "–ß–µ–∫-–ª–∏—Å—Ç":"—á–µ–∫–ª–∏—Å—Ç", "–§–∏–∫—Å–∞—Ü–∏—è":"—Ñ–∏–∫—Å–∞—Ü–∏—è"}
    try:
        reply = ask_gpt(uid, alias.get(t, t))
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

# ====== –õ—é–±–æ–π —Ç–µ–∫—Å—Ç ======
@bot.message_handler(func=lambda _: True)
def on_text(m):
    uid = m.from_user.id
    try:
        reply = ask_gpt(uid, m.text or "")
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

# ====== Keep-alive —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render/UptimeRobot ======
app = Flask(__name__)

@app.route('/')
def index():
    return "OK"

@app.route('/health')
def health():
    return "pong"

if __name__ == "__main__":
    logging.info("Starting keepalive web server‚Ä¶")
    import threading
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=8000)).start()

    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
