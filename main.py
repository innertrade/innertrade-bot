# main.py ‚Äî Innertrade Kai Mentor Bot (v8.0.1 Orchestrated)
# –î–∞—Ç–∞: 2025-10-18
# –ò–∑–º.: TG_WEBHOOK_SECRET –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ SET_WEBHOOK=true

import os
import json
import time
import logging
import threading
import hashlib
import re
from datetime import datetime, timezone, timedelta
from typing import Any, Dict, Optional, List

import requests
from flask import Flask, request, abort, jsonify
from sqlalchemy import create_engine, text
from sqlalchemy.pool import QueuePool
import telebot
from telebot import types
from openai import OpenAI

def _code_hash():
    try:
        with open(__file__, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()[:8]
    except Exception:
        return "unknown"

BOT_VERSION = f"2025-10-18-{_code_hash()}"

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
PUBLIC_URL     = os.getenv("PUBLIC_URL", "").strip()
WEBHOOK_PATH   = os.getenv("WEBHOOK_PATH", "webhook").strip()
TG_SECRET      = os.getenv("TG_WEBHOOK_SECRET", "").strip()

DATABASE_URL   = os.getenv("DATABASE_URL", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
OPENAI_MODEL   = os.getenv("OPENAI_MODEL", "gpt-4o-mini").strip()

OFFSCRIPT_ENABLED = os.getenv("OFFSCRIPT_ENABLED", "true").lower() == "true"
SET_WEBHOOK_FLAG  = os.getenv("SET_WEBHOOK", "false").lower() == "true"
LOG_LEVEL         = os.getenv("LOG_LEVEL", "INFO").upper()
MAX_BODY          = int(os.getenv("MAX_BODY", "1000000"))

IDLE_MINUTES_REMIND   = int(os.getenv("IDLE_MINUTES_REMIND", "60"))
IDLE_MINUTES_RESET    = int(os.getenv("IDLE_MINUTES_RESET", "240"))
REMINDERS_ENABLED     = os.getenv("REMINDERS_ENABLED", "true").lower() == "true"

HIST_LIMIT = 16

# ========= Guards (—Å–µ–∫—Ä–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫) =========
missing_env = []
for k in ["TELEGRAM_TOKEN", "PUBLIC_URL", "WEBHOOK_PATH", "DATABASE_URL"]:
    if not os.getenv(k, "").strip():
        missing_env.append(k)
if SET_WEBHOOK_FLAG and not TG_SECRET:
    missing_env.append("TG_WEBHOOK_SECRET")
if missing_env:
    raise RuntimeError(f"ENV variables missing: {', '.join(missing_env)}")

logging.basicConfig(level=LOG_LEVEL, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
log = logging.getLogger("kai-mentor")
log.info(f"Starting bot version: {BOT_VERSION}")

INTENT_GREET = "greet"
INTENT_FREE  = "free"
INTENT_ERR   = "error"
INTENT_DONE  = "done"

STEP_ASK_STYLE  = "ask_style"
STEP_FREE_INTRO = "free_intro"
STEP_ERR_DESCR  = "err_describe"
STEP_MER_CTX    = "mer_context"
STEP_MER_EMO    = "mer_emotions"
STEP_MER_THO    = "mer_thoughts"
STEP_MER_BEH    = "mer_behavior"
STEP_GOAL       = "goal_positive"
STEP_TOTE_OPS   = "tote_ops"
STEP_TOTE_TEST  = "tote_test"
STEP_TOTE_EXIT  = "tote_exit"

MER_ORDER = [STEP_MER_CTX, STEP_MER_EMO, STEP_MER_THO, STEP_MER_BEH]

oai_client = None
openai_status = "disabled"
if OPENAI_API_KEY and OFFSCRIPT_ENABLED:
    try:
        oai_client = OpenAI(api_key=OPENAI_API_KEY)
        oai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": "ping"}],
            max_tokens=5,
        )
        openai_status = "active"
        log.info("OpenAI ready")
    except Exception as e:
        log.error(f"OpenAI init error: {e}")
        oai_client = None
        openai_status = f"error: {e}"

engine = create_engine(
    DATABASE_URL,
    poolclass=QueuePool,
    pool_size=5,
    max_overflow=10,
    pool_timeout=30,
    pool_recycle=1800,
)

def db_exec(sql: str, params: Optional[Dict[str, Any]] = None):
    with engine.begin() as conn:
        return conn.execute(text(sql), params or {})

def init_db():
    db_exec("""
    CREATE TABLE IF NOT EXISTS user_state(
        user_id BIGINT PRIMARY KEY,
        intent TEXT,
        step TEXT,
        data TEXT,
        updated_at TIMESTAMPTZ DEFAULT now()
    );
    """)
    db_exec("CREATE INDEX IF NOT EXISTS idx_user_state_updated_at ON user_state(updated_at)")
    db_exec("CREATE INDEX IF NOT EXISTS idx_user_state_intent_step ON user_state(intent, step)")
    log.info("DB initialized")

def load_state(uid: int) -> Dict[str, Any]:
    row = db_exec("SELECT intent, step, data FROM user_state WHERE user_id=:uid", {"uid": uid}).mappings().first()
    if row:
        data = {}
        if row["data"]:
            try:
                data = json.loads(row["data"])
            except Exception as e:
                log.error("Failed to parse user data: %s", e)
                data = {}
        if "history" not in data:
            data["history"] = []
        return {"user_id": uid, "intent": row["intent"] or INTENT_GREET, "step": row["step"] or STEP_ASK_STYLE, "data": data}
    return {"user_id": uid, "intent": INTENT_GREET, "step": STEP_ASK_STYLE, "data": {"history": []}}

def save_state(uid: int, intent=None, step=None, data=None) -> Dict[str, Any]:
    cur = load_state(uid)
    intent = intent or cur["intent"]
    step   = step   or cur["step"]
    new_data = cur["data"].copy()
    if data:
        new_data.update(data)
    new_data["last_state_write_at"] = datetime.now(timezone.utc).isoformat()
    db_exec("""
        INSERT INTO user_state (user_id, intent, step, data, updated_at)
        VALUES (:uid, :intent, :step, :data, now())
        ON CONFLICT (user_id) DO UPDATE
        SET intent=EXCLUDED.intent, step=EXCLUDED.step, data=EXCLUDED.data, updated_at=now()
    """, {"uid": uid, "intent": intent, "step": step, "data": json.dumps(new_data, ensure_ascii=False)})
    return {"user_id": uid, "intent": intent, "step": step, "data": new_data}

bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML", threaded=False)
app = Flask(__name__)

MAIN_MENU = types.ReplyKeyboardMarkup(resize_keyboard=True)
MAIN_MENU.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
MAIN_MENU.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
MAIN_MENU.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")

STYLE_KB = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
STYLE_KB.row("—Ç—ã", "–≤—ã")

def _now_iso():
    return datetime.now(timezone.utc).isoformat()

def _append_history(data: Dict[str, Any], role: str, content: str) -> Dict[str, Any]:
    hist = data.get("history", [])
    if len(hist) >= HIST_LIMIT:
        hist = hist[-(HIST_LIMIT - 1):]
    hist.append({"role": role, "content": content})
    data["history"] = hist
    return data

def mer_prompt_for(step: str) -> str:
    return {
        STEP_MER_CTX: "–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É. –ì–¥–µ –∏ –∫–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ? (–∫–æ—Ä–æ—Ç–∫–æ)",
        STEP_MER_EMO: "–ß—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª –≤ –º–æ–º–µ–Ω—Ç–µ (2‚Äì3 —Å–ª–æ–≤–∞)?",
        STEP_MER_THO: "–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –º–µ–ª—å–∫–∞–ª–∏ (2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑—ã)?",
        STEP_MER_BEH: "–ß—Ç–æ —Å–¥–µ–ª–∞–ª —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏? –î–µ–π—Å—Ç–≤–∏—è.",
    }.get(step, "–ü—Ä–æ–¥–æ–ª–∂–∏–º.")

def gpt_orchestrator(uid: int, text_in: str, st: Dict[str, Any]) -> Dict[str, Any]:
    fallback = {
        "reply": "–ü–æ–Ω—è–ª. –î–∞–≤–∞–π —Å—Ñ–æ–∫—É—Å–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É: –≥–¥–µ/–∫–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ –∏ –≤ –∫–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –ø–æ–Ω—è–ª, —á—Ç–æ –æ—Ç–∫–ª–æ–Ω—è–µ—à—å—Å—è –æ—Ç –ø–ª–∞–Ω–∞?",
        "phase": "calibrate",
        "summary_draft": "",
        "mercedes": {"next_step": None, "allow_backtrack": True},
        "tote": {"next_step": None},
        "buttons": [],
        "require_user_confirm": False
    }
    if not oai_client or not OFFSCRIPT_ENABLED:
        return fallback

    style = st["data"].get("style", "—Ç—ã")
    history = st["data"].get("history", [])

    system = f"""
–¢—ã ‚Äî –ê–ª–µ–∫—Å, –∫–æ—É—á-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ (–Ω–∞ ¬´{style}¬ª). –§–∞–∑—ã: –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ ‚Üí —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Ä–∞–∑–±–æ—Ä ‚Üí –ø–ª–∞–Ω 3 —Å–¥–µ–ª–∫–∏.
–ü–æ–∫–∞ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ ‚Äî –∑–∞–¥–∞–≤–∞–π 1‚Äì2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ (–±–µ–∑ –ª–µ–∫—Ü–∏–π).
–ö–æ–≥–¥–∞ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ ‚Äî –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π —á–µ—Ä–Ω–æ–≤–∏–∫ summary_draft –∏ —Å–ø—Ä–æ—Å–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (phase: ask_confirm).
–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–±–æ—Ä—É (phase: ready_for_mercedes).
–í —Ä–∞–∑–±–æ—Ä–µ –ø–æ —à–∞–≥–∞–º –Ω–µ –Ω–∞–∑—ã–≤–∞–π —Ç–µ—Ö–Ω–∏–∫–∏. –ö–æ–≥–¥–∞ –∫–∞—Ä—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–ª–∞–Ω –Ω–∞ 3 —Å–¥–µ–ª–∫–∏ (phase: ready_for_tote).
–û—Ç–≤–µ—Ç –≤ JSON: reply, phase, summary_draft, mercedes{{next_step,allow_backtrack}}, tote{{next_step}}, buttons, require_user_confirm.
""".strip()

    msgs = [{"role": "system", "content": system}]
    for h in history[-HIST_LIMIT:]:
        if h.get("role") in ("user","assistant") and isinstance(h.get("content"), str):
            msgs.append(h)
    msgs.append({"role": "user", "content": text_in})

    try:
        res = oai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=msgs,
            temperature=0.6,
            response_format={"type": "json_object"},
        )
        dec = json.loads(res.choices[0].message.content or "{}")
        for k in ["reply","phase","summary_draft","mercedes","tote","buttons","require_user_confirm"]:
            if k not in dec:
                return fallback
        dec["reply"] = re.sub(r'\s+', ' ', (dec.get("reply") or "")).strip()
        return dec
    except Exception as e:
        log.error("gpt_orchestrator error: %s", e)
        return fallback

@bot.message_handler(commands=["start", "reset"])
def cmd_start(m: types.Message):
    uid = m.from_user.id
    st = save_state(uid, INTENT_GREET, STEP_ASK_STYLE, {"history": []})
    bot.send_message(uid,
        "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —É–¥–æ–±–Ω–µ–µ ‚Äî <b>—Ç—ã</b> –∏–ª–∏ <b>–≤—ã</b>?\n\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ ‚Äî –Ω–∞–ø–∏—à–∏: <b>–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä</b>.",
        reply_markup=STYLE_KB
    )

@bot.message_handler(commands=["version", "v"])
def cmd_version(m: types.Message):
    info = (
        f"üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {BOT_VERSION}\n"
        f"üìù –•—ç—à –∫–æ–¥–∞: {_code_hash()}\n"
        f"üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now(timezone.utc).isoformat()}\n"
        f"ü§ñ OpenAI: {openai_status}"
    )
    bot.reply_to(m, info)

@bot.message_handler(commands=["menu"])
def cmd_menu(m: types.Message):
    bot.send_message(m.chat.id, "–ú–µ–Ω—é:", reply_markup=MAIN_MENU)

@bot.message_handler(content_types=["text"])
def on_text(m: types.Message):
    handle_text_message(m.from_user.id, m.text.strip(), m)

def handle_text_message(uid: int, text_in: str, original_message=None):
    st = load_state(uid)
    txt = (text_in or "").strip()
    log.info("User %s: intent=%s step=%s text='%s'", uid, st["intent"], st["step"], txt[:200])

    if txt.lower() in ("–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä", "–Ω–æ–≤—ã–π", "—Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞", "start over"):
        st = save_state(uid, INTENT_FREE, STEP_FREE_INTRO, {"history": [], "struct_offer_shown": False})
        bot.send_message(uid, "–û–∫–µ–π, –Ω–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å?", reply_markup=MAIN_MENU)
        return

    st["data"] = _append_history(st["data"], "user", txt)
    st["data"]["last_user_msg_at"] = _now_iso()
    st["data"]["awaiting_reply"] = True

    if st["intent"] == INTENT_GREET and st["step"] == STEP_ASK_STYLE:
        if txt.lower() in ("—Ç—ã", "–≤—ã"):
            st["data"]["style"] = txt.lower()
            st = save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
            bot.send_message(uid, f"–ü—Ä–∏–Ω—è—Ç–æ ({txt}). –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? –ß—Ç–æ —Å–µ–π—á–∞—Å –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ —Ö–æ—á–µ—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=MAIN_MENU)
        else:
            save_state(uid, data=st["data"])
            bot.send_message(uid, "–í—ã–±–µ—Ä–∏ ¬´—Ç—ã¬ª –∏–ª–∏ ¬´–≤—ã¬ª.", reply_markup=STYLE_KB)
        return

    if st["intent"] == INTENT_ERR:
        proceed_struct(uid, txt, st)
        return

    decision = gpt_orchestrator(uid, txt, st)
    reply = decision.get("reply") or "–ü–æ–Ω—è–ª. –°–∫–∞–∂–∏ –µ—â—ë, –≥–¥–µ –∏–º–µ–Ω–Ω–æ –æ—Ç—Å—Ç—É–ø–∏–ª –æ—Ç –ø–ª–∞–Ω–∞ ‚Äî –≤—Ö–æ–¥, —Å—Ç–æ–ø –∏–ª–∏ –≤—ã—Ö–æ–¥?"
    phase = decision.get("phase", "calibrate")

    if decision.get("summary_draft"):
        st["data"]["problem_draft"] = decision["summary_draft"]

    st["data"] = _append_history(st["data"], "assistant", reply)
    save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
    if original_message:
        bot.reply_to(original_message, reply, reply_markup=MAIN_MENU)
    else:
        bot.send_message(uid, reply, reply_markup=MAIN_MENU)

    if phase == "ask_confirm" and st["data"].get("problem_draft"):
        kb = types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton("–î–∞, —ç—Ç–æ –æ–Ω–æ", callback_data="confirm_problem"),
            types.InlineKeyboardButton("–ù–µ—Ç, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å", callback_data="refine_problem")
        )
        bot.send_message(uid, f"–°—É–º–º–∏—Ä—É—é –∫–æ—Ä–æ—Ç–∫–æ:\n\n<b>{st['data']['problem_draft']}</b>\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç?", reply_markup=kb)
        return

    if phase == "ready_for_mercedes":
        kb = types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton("–†–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ —à–∞–≥–∞–º", callback_data="start_error_flow"),
            types.InlineKeyboardButton("–ü–æ–∫–∞ –Ω–µ—Ç", callback_data="skip_error_flow")
        )
        bot.send_message(uid, "–ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ —à–∞–≥–∞–º —Å–µ–π—á–∞—Å?", reply_markup=kb)
        return

    if phase == "in_mercedes":
        nxt = (decision.get("mercedes") or {}).get("next_step")
        if nxt in ("ctx", "emo", "thoughts", "behavior"):
            nxt_map = {"ctx": STEP_MER_CTX, "emo": STEP_MER_EMO, "thoughts": STEP_MER_THO, "behavior": STEP_MER_BEH}
            save_state(uid, INTENT_ERR, nxt_map[nxt], st["data"])
            bot.send_message(uid, mer_prompt_for(nxt_map[nxt]), reply_markup=MAIN_MENU)
            return

    if phase == "ready_for_tote":
        kb = types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–ª–∞–Ω—É –Ω–∞ 3 —Å–¥–µ–ª–∫–∏", callback_data="start_tote"),
            types.InlineKeyboardButton("–ï—â—ë —É—Ç–æ—á–Ω–∏—Ç—å", callback_data="back_to_mercedes")
        )
        bot.send_message(uid, "–•–æ—á–µ—à—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –ø–ª–∞–Ω –Ω–∞ 3 —Å–¥–µ–ª–∫–∏?", reply_markup=kb)
        return

    if phase == "wrap_up":
        bot.send_message(uid, "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –ø–æ–¥–≤–µ–¥—É –∏—Ç–æ–≥ –∏ –≤—ã–Ω–µ—Å—É –≤ ¬´—Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏¬ª.", reply_markup=MAIN_MENU)
        return

def proceed_struct(uid: int, text_in: str, st: Dict[str, Any]):
    step = st["step"]
    data = st["data"].copy()

    if step == STEP_ERR_DESCR:
        data["error_description"] = text_in
        save_state(uid, INTENT_ERR, STEP_MER_CTX, data)
        bot.send_message(uid, mer_prompt_for(STEP_MER_CTX), reply_markup=MAIN_MENU)
        return

    if step in MER_ORDER:
        mer = data.get("mer", {})
        mer[step] = text_in
        data["mer"] = mer
        idx = MER_ORDER.index(step)
        if idx + 1 < len(MER_ORDER):
            nxt = MER_ORDER[idx + 1]
            save_state(uid, INTENT_ERR, nxt, data)
            bot.send_message(uid, mer_prompt_for(nxt), reply_markup=MAIN_MENU)
        else:
            save_state(uid, INTENT_ERR, STEP_GOAL, data)
            bot.send_message(uid, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å: —á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?", reply_markup=MAIN_MENU)
        return

    if step == STEP_GOAL:
        data["goal"] = text_in
        save_state(uid, INTENT_ERR, STEP_TOTE_OPS, data)
        bot.send_message(uid, "–î–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–æ–∫ –Ω–∞–∑–æ–≤–∏ 2‚Äì3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ (–∫–æ—Ä–æ—Ç–∫–æ, —Å–ø–∏—Å–∫–æ–º).", reply_markup=MAIN_MENU)
        return

    if step == STEP_TOTE_OPS:
        tote = data.get("tote", {})
        tote["ops"] = text_in
        data["tote"] = tote
        save_state(uid, INTENT_ERR, STEP_TOTE_TEST, data)
        bot.send_message(uid, "–ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –û–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π.", reply_markup=MAIN_MENU)
        return

    if step == STEP_TOTE_TEST:
        tote = data.get("tote", {})
        tote["test"] = text_in
        data["tote"] = tote
        save_state(uid, INTENT_ERR, STEP_TOTE_EXIT, data)
        bot.send_message(uid, "–ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∂–µ—Ç ¬´–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª ‚Äî —á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å?", reply_markup=MAIN_MENU)
        return

    if step == STEP_TOTE_EXIT:
        tote = data.get("tote", {})
        tote["exit"] = text_in
        data["tote"] = tote

        mer = data.get('mer', {})
        summary = [
            "<b>–ò—Ç–æ–≥ —Ä–∞–∑–±–æ—Ä–∞</b>",
            f"–ü—Ä–æ–±–ª–µ–º–∞: {data.get('error_description', data.get('problem', '‚Äî'))}",
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {mer.get(STEP_MER_CTX, '‚Äî')}",
            f"–≠–º–æ—Ü–∏–∏: {mer.get(STEP_MER_EMO, '‚Äî')}",
            f"–ú—ã—Å–ª–∏: {mer.get(STEP_MER_THO, '‚Äî')}",
            f"–ü–æ–≤–µ–¥–µ–Ω–∏–µ: {mer.get(STEP_MER_BEH, '‚Äî')}",
            f"–¶–µ–ª—å: {data.get('goal', '‚Äî')}",
            f"–®–∞–≥–∏ (3 —Å–¥–µ–ª–∫–∏): {data.get('tote', {}).get('ops', '‚Äî')}",
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {data.get('tote', {}).get('test', '‚Äî')}",
            f"–ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ: {data.get('tote', {}).get('exit', '‚Äî')}",
        ]
        save_state(uid, INTENT_DONE, STEP_FREE_INTRO, data)
        bot.send_message(uid, "\n".join(summary), reply_markup=MAIN_MENU)
        bot.send_message(uid, "–ì–æ—Ç–æ–≤ –≤—ã–Ω–µ—Å—Ç–∏ —ç—Ç–æ –≤ ¬´—Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏¬ª –∏–ª–∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ?", reply_markup=MAIN_MENU)
        return

    save_state(uid, INTENT_FREE, STEP_FREE_INTRO, data)
    bot.send_message(uid, "–û–∫–µ–π, –≤–µ—Ä–Ω—ë–º—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ –∏ —É—Ç–æ—á–Ω–∏–º –µ—â—ë —á—É—Ç—å-—á—É—Ç—å.", reply_markup=MAIN_MENU)

MENU_BTNS = {
    "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞": "error",
    "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é": "strategy",
    "üìÑ –ü–∞—Å–ø–æ—Ä—Ç": "passport",
    "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏": "weekpanel",
    "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ": "panic",
    "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å": "start_help",
}

@bot.message_handler(func=lambda m: m.text in MENU_BTNS.keys())
def handle_menu(m: types.Message):
    uid = m.from_user.id
    st = load_state(uid)
    label = m.text
    code = MENU_BTNS[label]

    st["data"] = _append_history(st["data"], "user", label)

    if code == "error":
        if st["data"].get("problem_confirmed"):
            save_state(uid, INTENT_ERR, STEP_ERR_DESCR, st["data"])
            bot.send_message(uid, "–û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–µ–π—Å –æ—à–∏–±–∫–∏: –≥–¥–µ/–∫–æ–≥–¥–∞, –≤—Ö–æ–¥/—Å—Ç–æ–ø/–ø–ª–∞–Ω, –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª, —á–µ–º –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.")
        else:
            save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
            bot.send_message(uid, "–ö–æ—Ä–æ—Ç–∫–æ ‚Äî —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å –º–µ—à–∞–µ—Ç? –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤ –æ–¥–Ω–æ–º-–¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.", reply_markup=MAIN_MENU)
    elif code == "start_help":
        bot.send_message(uid, "–ü–ª–∞–Ω: 1) –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä, 2) —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏, 3) –∫–∞—Ä–∫–∞—Å –¢–°. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?", reply_markup=MAIN_MENU)
        save_state(uid, data=st["data"])
    else:
        bot.send_message(uid, "–û–∫. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É—Å–∫–æ—Ä–∏—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏ ¬´üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞¬ª.", reply_markup=MAIN_MENU)
        save_state(uid, data=st["data"])

@bot.callback_query_handler(func=lambda call: True)
def on_callback(call: types.CallbackQuery):
    uid = call.from_user.id
    data = call.data or ""
    bot.answer_callback_query(call.id, "–û–∫")

    st = load_state(uid)

    if data == "confirm_problem":
        st["data"]["problem"] = st["data"].get("problem_draft", "‚Äî")
        st["data"]["problem_confirmed"] = True
        st["data"]["struct_offer_shown"] = False
        save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
        kb = types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton("–†–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ —à–∞–≥–∞–º", callback_data="start_error_flow"),
            types.InlineKeyboardButton("–ü–æ–∫–∞ –Ω–µ—Ç", callback_data="skip_error_flow"),
        )
        bot.send_message(uid, "–ü—Ä–∏–Ω—è—Ç–æ. –ì–æ—Ç–æ–≤ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —ç—Ç–æ –ø–æ —à–∞–≥–∞–º?", reply_markup=kb)
        return

    if data == "refine_problem":
        st["data"]["problem_confirmed"] = False
        save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
        bot.send_message(uid, "–•–æ—Ä–æ—à–æ. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ç–æ–≥–¥–∞ –ø–æ–∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—Ç—å.", reply_markup=MAIN_MENU)
        return

    if data == "start_error_flow":
        st["data"]["problem_confirmed"] = True
        st = save_state(uid, INTENT_ERR, STEP_ERR_DESCR, st["data"])
        bot.send_message(uid, "–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–±–æ—Ä. –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: –≤—Ö–æ–¥/–ø–ª–∞–Ω, –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª, —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        return

    if data == "skip_error_flow":
        bot.send_message(uid, "–û–∫–µ–π, –≤–µ—Ä–Ω—ë–º—Å—è –∫ —ç—Ç–æ–º—É –ø–æ–∑–∂–µ.", reply_markup=MAIN_MENU)
        return

    if data == "start_tote":
        st = save_state(uid, INTENT_ERR, STEP_GOAL, st["data"])
        bot.send_message(uid, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å: —á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?", reply_markup=MAIN_MENU)
        return

    if data == "back_to_mercedes":
        st = save_state(uid, INTENT_ERR, STEP_MER_CTX, st["data"])
        bot.send_message(uid, mer_prompt_for(STEP_MER_CTX), reply_markup=MAIN_MENU)
        return

    if data == "continue_session":
        st["data"]["awaiting_reply"] = False
        st["data"]["last_nag_at"] = _now_iso()
        save_state(uid, data=st["data"])
        bot.send_message(uid, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º. –ù–∞ —á—ë–º –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?", reply_markup=MAIN_MENU)
        return

    if data == "restart_session":
        st = save_state(uid, INTENT_FREE, STEP_FREE_INTRO, {"history": [], "struct_offer_shown": False})
        bot.send_message(uid, "–û–∫–µ–π, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ß—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ—á–µ—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=MAIN_MENU)
        return

@app.get("/")
def root():
    return jsonify({"ok": True, "time": _now_iso()})

@app.get("/version")
def version_api():
    return jsonify({"version": BOT_VERSION, "code_hash": _code_hash(), "status": "running", "timestamp": _now_iso(), "openai": openai_status})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    # –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ TG_SECRET (–µ—Å–ª–∏ SET_WEBHOOK=false) ‚Äî –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if SET_WEBHOOK_FLAG:
        if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_SECRET:
            abort(401)
    if request.content_length and request.content_length > MAX_BODY:
        abort(413, description="Body too large")
    body = request.get_data()
    if not body:
        abort(400, description="Empty body")
    try:
        update = telebot.types.Update.de_json(body.decode("utf-8"))
        if update is None:
            log.error("Failed to parse update")
            abort(400, description="Invalid update")
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        log.error("Webhook processing error: %s", e)
        abort(500)

def cleanup_old_states(days: int = 30):
    try:
        days = int(days)
        db_exec(f"DELETE FROM user_state WHERE updated_at < NOW() - INTERVAL '{days} days'")
        log.info("Old user states cleanup done (> %s days).", days)
    except Exception as e:
        log.error("Cleanup error: %s", e)

def reminder_tick():
    if not REMINDERS_ENABLED:
        return
    try:
        mins = int(IDLE_MINUTES_REMIND)
        reset_mins = int(IDLE_MINUTES_RESET)
        rows = db_exec("SELECT user_id, intent, step, data, updated_at FROM user_state").mappings().all()
        now = datetime.now(timezone.utc)
        for r in rows:
            try:
                data = json.loads(r["data"] or "{}")
            except Exception:
                data = {}
            if not data.get("awaiting_reply"):
                continue
            last_user_ts = data.get("last_user_msg_at")
            if not last_user_ts:
                continue
            try:
                last_dt = datetime.fromisoformat(last_user_ts)
            except Exception:
                continue
            delta = now - last_dt
            last_nag_at = data.get("last_nag_at")
            nag_ok = True
            if last_nag_at:
                try:
                    if (now - datetime.fromisoformat(last_nag_at)) < timedelta(minutes=mins//2 or 1):
                        nag_ok = False
                except Exception:
                    pass
            if delta >= timedelta(minutes=reset_mins) and nag_ok:
                kb = types.InlineKeyboardMarkup().row(
                    types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º", callback_data="continue_session"),
                    types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_session"),
                )
                bot.send_message(r["user_id"], "–î–µ–ª–∞ –∑–∞—Ç–∞—â–∏–ª–∏? –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ?", reply_markup=kb)
                data["last_nag_at"] = _now_iso()
                save_state(r["user_id"], data=data)
            elif delta >= timedelta(minutes=mins) and nag_ok:
                kb = types.InlineKeyboardMarkup().row(
                    types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º", callback_data="continue_session"),
                )
                bot.send_message(r["user_id"], "–ö–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º?", reply_markup=kb)
                data["last_nag_at"] = _now_iso()
                save_state(r["user_id"], data=data)
    except Exception as e:
        log.error("Reminder error: %s", e)

def background_housekeeping():
    last_cleanup = time.time()
    while True:
        time.sleep(60)
        reminder_tick()
        if time.time() - last_cleanup > 24*60*60:
            cleanup_old_states(30)
            last_cleanup = time.time()

try:
    init_db()
    log.info("DB initialized (import)")
except Exception as e:
    log.error("DB init (import) failed: %s", e)

if SET_WEBHOOK_FLAG:
    try:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(
            url=f"{PUBLIC_URL}/{WEBHOOK_PATH}",
            secret_token=TG_SECRET,  # –∑–¥–µ—Å—å —Å–µ–∫—Ä–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ –º—ã —ç—Ç–æ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤ Guards
            allowed_updates=["message", "callback_query"]
        )
        log.info("Webhook set to %s/%s", PUBLIC_URL, WEBHOOK_PATH)
    except Exception as e:
        log.error("Webhook setup error: %s", e)

try:
    th = threading.Thread(target=background_housekeeping, daemon=True)
    th.start()
except Exception as e:
    log.error("Can't start housekeeping thread: %s", e)

if __name__ == "__main__":
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
