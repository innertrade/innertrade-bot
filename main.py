# main.py ‚Äî Innertrade Kai Mentor Bot
# –í–µ—Ä—Å–∏—è: 2025-09-22 (session-continue + idle-nudge)
# –ó–∞–ø—É—Å–∫ (Render): gunicorn -w 1 -b 0.0.0.0:$PORT main:app

import os
import json
import time
import logging
import threading
import hashlib
import re
from datetime import datetime, timezone, timedelta
from typing import Any, Dict, Optional, List
from difflib import SequenceMatcher

import requests
from flask import Flask, request, abort, jsonify
from sqlalchemy import create_engine, text
from sqlalchemy.pool import QueuePool
import telebot
from telebot import types
from openai import OpenAI

# ========= Version =========
def get_code_version():
    try:
        with open(__file__, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()[:8]
    except Exception:
        return "unknown"

BOT_VERSION = f"2025-09-22-{get_code_version()}"

# ========= ENV =========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
PUBLIC_URL = os.getenv("PUBLIC_URL", "").strip()
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "webhook").strip()
TG_SECRET = os.getenv("TG_WEBHOOK_SECRET", "").strip()
DATABASE_URL = os.getenv("DATABASE_URL", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini").strip()
OFFSCRIPT_ENABLED = os.getenv("OFFSCRIPT_ENABLED", "true").lower() == "true"
SET_WEBHOOK_FLAG = os.getenv("SET_WEBHOOK", "false").lower() == "true"
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
MAX_BODY = int(os.getenv("MAX_BODY", "1000000"))
HIST_LIMIT = 12

# –°–µ—Å—Å–∏–∏/–ø—Ä–æ—Å—Ç–æ–∏
IDLE_MINUTES = int(os.getenv("IDLE_MINUTES", "60"))  # –∫–æ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ¬´–ø—Ä–æ–ø–∞–ª¬ª
CODEWORD_NEW = os.getenv("CODEWORD_NEW", "–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä").strip().lower()
NUDGE_TEXT = os.getenv("NUDGE_TEXT", "–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º—è. –ü—Ä–æ–¥–æ–ª–∂–∏–º –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑–±–æ—Ä –∏–ª–∏ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ?").strip()

# ========= Validation =========
if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN is required")
if not DATABASE_URL:
    raise RuntimeError("DATABASE_URL is required")
if not PUBLIC_URL:
    raise RuntimeError("PUBLIC_URL is required")
if not WEBHOOK_PATH:
    raise RuntimeError("WEBHOOK_PATH is required")
if not TG_SECRET:
    raise RuntimeError("TG_WEBHOOK_SECRET is required")

# ========= Logging =========
logging.basicConfig(level=LOG_LEVEL, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
log = logging.getLogger("innertrade")
log.info(f"Starting bot version: {BOT_VERSION}")

# ========= INTENTS/STEPS =========
INTENT_GREET = "greet"
INTENT_FREE = "free"
INTENT_ERR = "error"

STEP_ASK_STYLE = "ask_style"
STEP_FREE_INTRO = "free_intro"
STEP_ERR_DESCR = "err_describe"
STEP_MER_CTX = "mer_context"
STEP_MER_EMO = "mer_emotions"
STEP_MER_THO = "mer_thoughts"
STEP_MER_BEH = "mer_behavior"
STEP_GOAL = "goal_positive"
STEP_TOTE_OPS = "tote_ops"
STEP_TOTE_TEST = "tote_test"
STEP_TOTE_EXIT = "tote_exit"
STEP_DONE = "done"

MER_ORDER = [STEP_MER_CTX, STEP_MER_EMO, STEP_MER_THO, STEP_MER_BEH]

# ========= OpenAI =========
oai_client = None
openai_status = "disabled"

if OPENAI_API_KEY and OFFSCRIPT_ENABLED:
    try:
        oai_client = OpenAI(api_key=OPENAI_API_KEY)
        # ping
        _ = oai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": "ping"}],
            max_tokens=4
        )
        openai_status = "active"
        log.info("OpenAI client initialized successfully")
    except Exception as e:
        log.error(f"OpenAI init error: {e}")
        oai_client = None
        openai_status = f"error: {str(e)}"
else:
    log.warning("OpenAI disabled - missing API key or OFFSCRIPT_ENABLED=false")
    openai_status = "disabled"

# ========= DB =========
engine = create_engine(
    DATABASE_URL,
    poolclass=QueuePool,
    pool_size=5,
    max_overflow=10,
    pool_timeout=30,
    pool_recycle=1800,
)

def db_exec(sql: str, params: Optional[Dict[str, Any]] = None):
    try:
        with engine.begin() as conn:
            return conn.execute(text(sql), params or {})
    except Exception as e:
        log.error("DB error: %s | SQL: %s | params: %s", e, sql, params)
        raise

def init_db():
    db_exec("""
    CREATE TABLE IF NOT EXISTS user_state(
        user_id BIGINT PRIMARY KEY,
        intent TEXT,
        step TEXT,
        data TEXT,
        updated_at TIMESTAMPTZ DEFAULT now(),
        nudge_sent BOOLEAN DEFAULT FALSE
    );
    """)
    # –ù–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    db_exec("ALTER TABLE user_state ADD COLUMN IF NOT EXISTS nudge_sent BOOLEAN DEFAULT FALSE;")
    db_exec("CREATE INDEX IF NOT EXISTS idx_user_state_updated_at ON user_state(updated_at)")
    db_exec("CREATE INDEX IF NOT EXISTS idx_user_state_intent_step ON user_state(intent, step)")
    log.info("DB initialized")

# ========= State =========
def load_state(uid: int) -> Dict[str, Any]:
    try:
        row = db_exec(
            "SELECT intent, step, data, updated_at, nudge_sent FROM user_state WHERE user_id = :uid",
            {"uid": uid}
        ).mappings().first()
        if row:
            data = {}
            if row["data"]:
                try:
                    data = json.loads(row["data"])
                except Exception as e:
                    log.error("Failed to parse user data: %s", e)
                    data = {}
            return {
                "user_id": uid,
                "intent": row["intent"] or INTENT_GREET,
                "step": row["step"] or STEP_ASK_STYLE,
                "data": data,
                "updated_at": row["updated_at"],
                "nudge_sent": bool(row.get("nudge_sent", False))
            }
    except Exception as e:
        log.error("load_state error: %s", e)

    return {
        "user_id": uid,
        "intent": INTENT_GREET,
        "step": STEP_ASK_STYLE,
        "data": {"history": []},
        "updated_at": datetime.now(timezone.utc),
        "nudge_sent": False
    }

def save_state(uid: int, intent: Optional[str] = None,
               step: Optional[str] = None, data: Optional[Dict[str, Any]] = None,
               nudge_sent: Optional[bool] = None) -> Dict[str, Any]:
    cur = load_state(uid)
    new_intent = intent if intent is not None else cur["intent"]
    new_step = step if step is not None else cur["step"]
    new_data = cur["data"].copy()
    if data:
        new_data.update(data)
    if "history" not in new_data:
        new_data["history"] = []

    payload = {
        "uid": uid,
        "intent": new_intent,
        "step": new_step,
        "data": json.dumps(new_data, ensure_ascii=False),
        "nudge_sent": nudge_sent if nudge_sent is not None else cur.get("nudge_sent", False)
    }
    db_exec("""
        INSERT INTO user_state (user_id, intent, step, data, updated_at, nudge_sent)
        VALUES (:uid, :intent, :step, :data, now(), :nudge_sent)
        ON CONFLICT (user_id) DO UPDATE
        SET intent = EXCLUDED.intent,
            step   = EXCLUDED.step,
            data   = EXCLUDED.data,
            updated_at = now(),
            nudge_sent = EXCLUDED.nudge_sent;
    """, payload)

    return {"user_id": uid, "intent": new_intent, "step": new_step,
            "data": new_data, "updated_at": datetime.now(timezone.utc),
            "nudge_sent": payload["nudge_sent"]}

# ========= Bot & Flask =========
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML", threaded=False)
app = Flask(__name__)

# ========= Keyboards =========
def main_menu() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    kb.row("üîÑ –ù–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä")
    return kb

MAIN_MENU = main_menu()

def style_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row("—Ç—ã", "–≤—ã")
    return kb

def continue_or_new_kb() -> types.InlineKeyboardMarkup:
    kb = types.InlineKeyboardMarkup()
    kb.row(
        types.InlineKeyboardButton("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º", callback_data="cont_session"),
        types.InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_new")
    )
    return kb

# ========= Pattern Detection =========
def detect_trading_patterns(text: str) -> List[str]:
    patterns = {
        "remove_stop": ["—É–±–∏—Ä–∞—é —Å—Ç–æ–ø", "—É–±–∏—Ä–∞—é —Å—Ç–æ–ø-–ª–æ—Å—Å", "—Å–Ω–∏–º–∞—é —Å—Ç–æ–ø"],
        "move_stop": ["–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø", "–ø–µ—Ä–µ–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø", "–ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è—é —Å—Ç–æ–ø"],
        "early_close": ["–∑–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é", "—Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫—Ä—ã—Ç—å"],
        "averaging": ["—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ", "–¥–æ–∫—É–ø–∞—Ç—å", "–¥–æ–±–∞–≤–ª—è—Ç—å—Å—è"],
        "break_even": ["–±–µ–∑—É–±—ã—Ç–æ–∫", "–≤ –Ω–æ–ª—å", "–±–µ–∑ —É–±—ã—Ç–∫–∞"],
        "small_profit": ["–º–µ–ª–∫–∏–π –ø—Ä–æ—Ñ–∏—Ç", "–Ω–µ–±–æ–ª—å—à—É—é –ø—Ä–∏–±—ã–ª—å", "—Å–∫–æ—Ä–µ–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å"],
        "self_doubt": ["–Ω–µ —É–≤–µ—Ä–µ–Ω", "—Å–æ–º–Ω–µ–≤–∞—é—Å—å", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å"],
        "fear_of_loss": ["—Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—è—Ç—å", "–±–æ—é—Å—å –ø–æ—Ç–µ—Ä—è—Ç—å", "—Å—Ç—Ä–∞—Ö —É–±—ã—Ç–∫–∞"],
        "chaos": ["—Ö–∞–æ—Å", "—Ç–æ–ø—á—É—Å—å –Ω–∞ –º–µ—Å—Ç–µ", "–Ω–µ –∑–Ω–∞—é —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å"],
        "rule_breaking": ["–Ω–∞—Ä—É—à–∞—é –ø—Ä–∞–≤–∏–ª–∞", "–Ω–µ —Å–æ–±–ª—é–¥–∞—é –ø—Ä–∞–≤–∏–ª–∞", "–∏–≥–Ω–æ—Ä–∏—Ä—É—é –ø—Ä–∞–≤–∏–ª–∞"]
    }
    detected = []
    text_lower = (text or "").lower()
    for pattern, keywords in patterns.items():
        if any(k in text_lower for k in keywords):
            detected.append(pattern)
    return detected

def should_suggest_deep_analysis(text: str, patterns: List[str]) -> bool:
    crisis_words = ["—Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏", "–¥–∞–≤–Ω–æ", "–Ω–µ –º–æ–≥—É", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è", "–ø–æ—Å—Ç–æ—è–Ω–Ω–æ", "—Ä–µ–≥—É–ª—è—Ä–Ω–æ"]
    return any(w in (text or "").lower() for w in crisis_words) or len(patterns) >= 2

# ========= Helpers =========
def anti_echo(user_text: str, model_text: str) -> str:
    u = (user_text or "").strip().lower()
    m = (model_text or "").strip()
    if len(u) < 15 or len(m) < 15:
        return m
    if SequenceMatcher(None, u, m.lower()).ratio() > 0.7:
        return "–°–∫–∞–∂—É –ø–æ-—Å–≤–æ–µ–º—É: " + m
    return m

def remove_template_phrases(text: str) -> str:
    template_phrases = [
        "–ø–æ–Ω–∏–º–∞—é, —ç—Ç–æ", "—è –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ", "—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å", "–≤–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å",
        "—Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å", "–¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º", "—ç—Ç–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—ë–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞",
        "–º–æ–∂–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å", "–∫–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ", "—á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç",
        "–∫–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ", "–∫–∞–∫ –¥–æ–ª–≥–æ", "–≤ –∫–∞–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö", "–ø–æ–Ω–∏–º–∞—é, –∫–∞–∫",
        "—Å–∫–∞–∂–∏,", "—Ä–∞—Å—Å–∫–∞–∂–∏,", "–≤–∞–∂–Ω–æ", "–æ–±—ã—á–Ω–æ", "—á–∞—Å—Ç–æ", "—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç",
        "–¥–∞–≤–∞–π —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º", "–º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å", "–±—ã–ª–æ –±—ã –ø–æ–ª–µ–∑–Ω–æ"
    ]
    s = text
    for phrase in template_phrases:
        s = re.sub(rf"{phrase}[^.!?]*?[.!?]", "", s, flags=re.IGNORECASE)
    s = re.sub(r'\s+', ' ', s).strip()
    s = re.sub(r'^[,\s\.!?]+', '', s)
    return s

def mer_prompt_for(step: str) -> str:
    prompts = {
        STEP_MER_CTX: "–ö–æ—Ä–æ—Ç–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç: –≥–¥–µ/–∫–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ?",
        STEP_MER_EMO: "–ß—Ç–æ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª(–∞) –≤ –º–æ–º–µ–Ω—Ç? 2‚Äì3 —Å–ª–æ–≤–∞.",
        STEP_MER_THO: "–ö–∞–∫–∏–µ —Ñ—Ä–∞–∑—ã –º–µ–ª—å–∫–∞–ª–∏ –≤ –≥–æ–ª–æ–≤–µ? 2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏–µ.",
        STEP_MER_BEH: "–ß—Ç–æ —Å–¥–µ–ª–∞–ª(–∞) —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏? –î–µ–π—Å—Ç–≤–∏—è."
    }
    return prompts.get(step, "–ü—Ä–æ–¥–æ–ª–∂–∏–º.")

def extract_problem_summary(history: List[Dict]) -> str:
    user_messages = [m["content"] for m in history if m.get("role") == "user"]
    patterns = []
    for msg in user_messages:
        patterns.extend(detect_trading_patterns(msg))
    uniq = set(patterns)
    parts = []
    if "self_doubt" in uniq: parts.append("–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Ä–µ—à–µ–Ω–∏—è—Ö")
    if "fear_of_loss" in uniq: parts.append("—Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—å/—Å—Ç–æ–ø–∞")
    if {"remove_stop","move_stop"} & uniq: parts.append("–Ω–∞—Ä—É—à–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–æ–º (—Å—Ç–æ–ø)")
    if "early_close" in uniq: parts.append("–ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ")
    if "averaging" in uniq: parts.append("—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ —É–±—ã—Ç–æ—á–Ω—ã—Ö")
    if "chaos" in uniq: parts.append("—Ö–∞–æ—Å/–Ω–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
    if "rule_breaking" in uniq: parts.append("—Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª")
    return "–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∏—Å–∫–∏: " + ", ".join(parts) if parts else "–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"

# ========= Voice =========
def transcribe_voice(audio_file_path: str) -> Optional[str]:
    if not oai_client:
        return None
    try:
        with open(audio_file_path, "rb") as f:
            tr = oai_client.audio.transcriptions.create(
                model="whisper-1",
                file=f,
                language="ru"
            )
        return tr.text
    except Exception as e:
        log.error("Voice transcription error: %s", e)
        return None

# ========= GPT Decision =========
def gpt_decide(uid: int, text_in: str, st: Dict[str, Any]) -> Dict[str, Any]:
    fallback = {
        "next_step": st["step"],
        "intent": st["intent"],
        "response_text": "–û–∫, –ø—Ä–æ–¥–æ–ª–∂–∏–º.",
        "store": {},
        "is_structural": False
    }
    if not oai_client or not OFFSCRIPT_ENABLED:
        log.warning(f"OpenAI not available: oai_client={oai_client}, OFFSCRIPT_ENABLED={OFFSCRIPT_ENABLED}")
        return fallback

    try:
        history = st["data"].get("history", [])
        style = st["data"].get("style", "—Ç—ã")
        patterns = detect_trading_patterns(text_in)
        patterns_text = ", ".join(patterns) if patterns else "–Ω–µ—Ç"

        system_prompt = f"""
–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É –ø–æ –∏–º–µ–Ω–∏ –ê–ª–µ–∫—Å. –ì–æ–≤–æ—Ä–∏ –Ω–∞ {style}. –ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–º, –Ω–µ –∑–∞–Ω—É–¥—Å—Ç–≤—É–π.
–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {patterns_text}

–ü–†–ê–í–ò–õ–ê:
1) –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –∫–ª–∏—à–µ.
2) –ù–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–π —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π.
3) –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–∞–ª –∫–µ–π—Å ‚Äî –ø—Ä–æ–¥–≤–∏–≥–∞–π –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã –∏ –∑–∞–ø—É—Å–∫—É —Ä–∞–∑–±–æ—Ä–∞.
4) –í —Ä–∞–∑–±–æ—Ä–µ –Ω–µ –Ω–∞–∑—ã–≤–∞–π ¬´MERCEDES¬ª/¬´TOTE¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ —à–∞–≥–∞–º.
5) –ë—É–¥—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º: –∫–æ—Ä–æ—Ç–∫–∏–µ, —Ç—ë–ø–ª—ã–µ —Ñ—Ä–∞–∑—ã + –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞.
6) –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–µ–π—Å—É.

–í–µ—Ä–Ω–∏ JSON: next_step, intent, response_text, store(object), is_structural(boolean).
"""
        msgs = [{"role": "system", "content": system_prompt}]
        for h in history[-HIST_LIMIT:]:
            if h.get("role") in ("user", "assistant") and isinstance(h.get("content"), str):
                msgs.append({"role": h["role"], "content": h["content"]})
        msgs.append({"role": "user", "content": text_in})

        res = oai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=msgs,
            temperature=0.4,
            response_format={"type": "json_object"},
        )
        raw = res.choices[0].message.content or "{}"
        dec = json.loads(raw)
        for k in ["next_step", "intent", "response_text"]:
            if k not in dec:
                return fallback
        if not isinstance(dec.get("store"), dict):
            dec["store"] = {}
        if not isinstance(dec.get("is_structural"), bool):
            dec["is_structural"] = False

        dec["response_text"] = anti_echo(text_in, remove_template_phrases(dec["response_text"]))
        if len(dec["response_text"]) < 8:
            dec["response_text"] = "–•–æ—á—É –ø–æ–Ω—è—Ç—å —Ç–æ—á–Ω–µ–µ. –ú–æ–∂–µ—à—å –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–∏–º–µ—Ä –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏?"
        return dec
    except Exception as e:
        log.error("GPT decision error: %s", e)
        return fallback

# ========= Greetings / Idle logic =========
GREET_WORDS = {"–ø—Ä–∏–≤–µ—Ç","–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π","–¥–æ–±—Ä—ã–π –¥–µ–Ω—å","–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä","–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ","hi","hello","hey","hai"}

def is_greeting(text: str) -> bool:
    t = (text or "").strip().lower()
    return any(t.startswith(w) for w in GREET_WORDS) or t in GREET_WORDS

def too_idle(updated_at: Optional[datetime]) -> bool:
    if not updated_at:
        return False
    try:
        now = datetime.now(timezone.utc)
        return (now - updated_at) > timedelta(minutes=IDLE_MINUTES)
    except Exception:
        return False

# ========= Message Handlers =========
@bot.message_handler(commands=["ping"])
def cmd_ping(m: types.Message):
    bot.reply_to(m, "pong")

@bot.message_handler(commands=["version", "v"])
def cmd_version(m: types.Message):
    info = f"""üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {BOT_VERSION}
üìù –•—ç—à –∫–æ–¥–∞: {get_code_version()}
üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now(timezone.utc).isoformat()}
ü§ñ OpenAI: {openai_status}"""
    bot.reply_to(m, info)

@bot.message_handler(commands=["status"])
def cmd_status(m: types.Message):
    uid = m.from_user.id
    st = load_state(uid)
    response = {
        "ok": True,
        "time": datetime.now(timezone.utc).isoformat(),
        "intent": st["intent"],
        "step": st["step"],
        "nudge_sent": st.get("nudge_sent", False),
        "idle_minutes": IDLE_MINUTES
    }
    bot.reply_to(m, f"<code>{json.dumps(response, ensure_ascii=False, indent=2)}</code>")

@bot.message_handler(commands=["reset", "start"])
def cmd_reset(m: types.Message):
    uid = m.from_user.id
    save_state(uid, intent=INTENT_GREET, step=STEP_ASK_STYLE, data={"history": []}, nudge_sent=False)
    bot.send_message(uid,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name or '—Ç—Ä–µ–π–¥–µ—Ä'}!\n–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî <b>—Ç—ã</b> –∏–ª–∏ <b>–≤—ã</b>? (–Ω–∞–ø–∏—à–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ)\n"
        f"–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–ø–∏—à–∏: ¬´{CODEWORD_NEW}¬ª.",
        reply_markup=style_kb()
    )

# ===== Voice =====
@bot.message_handler(content_types=['voice', 'audio'])
def handle_voice(message: types.Message):
    try:
        uid = message.from_user.id
        bot.send_chat_action(uid, 'typing')
        file_id = message.voice.file_id if message.content_type == 'voice' else message.audio.file_id
        file_info = bot.get_file(file_id)
        data = bot.download_file(file_info.file_path)
        path = f"temp_voice_{uid}.ogg"
        with open(path, "wb") as f:
            f.write(data)
        text = transcribe_voice(path)
        try:
            os.remove(path)
        except Exception:
            pass
        if text:
            handle_text_message(uid, text, message)
        else:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑.")
    except Exception as e:
        log.error("Voice processing error: %s", e)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

# ===== Core text =====
def handle_text_message(uid: int, text: str, original_message=None):
    st = load_state(uid)
    txt = (text or "").strip()
    log.info("User %s: intent=%s step=%s text='%s'", uid, st["intent"], st["step"], txt[:120])

    # –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ ¬´–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä¬ª
    if txt.lower() == CODEWORD_NEW or txt == "üîÑ –ù–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä":
        save_state(uid, intent=INTENT_ERR, step=STEP_ERR_DESCR,
                   data={"history": []}, nudge_sent=False)
        bot.send_message(uid, "–û–∫, –Ω–∞—á–Ω—ë–º –Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä. –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
        return

    # –ò—Å—Ç–æ—Ä–∏—è (user)
    history = st["data"].get("history", [])
    if len(history) >= HIST_LIMIT:
        history = history[-(HIST_LIMIT-1):]
    history.append({"role": "user", "content": txt})
    st["data"]["history"] = history

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –∏–ª–∏ –¥–æ–ª–≥–∏–π –ø—Ä–æ—Å—Ç–æ–π
    if is_greeting(txt) and st["intent"] != INTENT_GREET and st["step"] not in (STEP_FREE_INTRO, STEP_DONE):
        # –í–µ–∂–ª–∏–≤–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        bot.send_message(
            uid,
            "–ü—Ä–∏–≤–µ—Ç! –ü–æ—Ö–æ–∂–µ, –º—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑–±–æ—Ä. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–ª–∏ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ?",
            reply_markup=continue_or_new_kb()
        )
        save_state(uid, data=st["data"], nudge_sent=False)  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω—É–¥–∂–∞
        return

    # –ï—Å–ª–∏ –±—ã–ª –¥–æ–ª–≥–∏–π –ø—Ä–æ—Å—Ç–æ–π ‚Äî —Å–ø—Ä–æ—Å–∏–º
    if too_idle(st.get("updated_at")):
        bot.send_message(uid, NUDGE_TEXT, reply_markup=continue_or_new_kb())
        save_state(uid, data=st["data"], nudge_sent=True)
        return

    # –í—ã–±–æ—Ä —Å—Ç–∏–ª—è –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–∏
    if st["intent"] == INTENT_GREET and st["step"] == STEP_ASK_STYLE:
        if txt.lower() in ("—Ç—ã", "–≤—ã"):
            st["data"]["style"] = txt.lower()
            save_state(uid, intent=INTENT_FREE, step=STEP_FREE_INTRO, data=st["data"])
            bot.send_message(uid,
                f"–ü—Ä–∏–Ω—è—Ç–æ ({txt}). –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî –Ω–∞–ø–∏—à–∏ ¬´{CODEWORD_NEW}¬ª.\n"
                f"–ß—Ç–æ —Å–µ–π—á–∞—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–≤–æ–µ–π —Ç–æ—Ä–≥–æ–≤–ª–µ?",
                reply_markup=MAIN_MENU)
        else:
            save_state(uid, data=st["data"])
            bot.send_message(uid, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ ¬´—Ç—ã¬ª –∏–ª–∏ ¬´–≤—ã¬ª.", reply_markup=style_kb())
        return

    # –ï—Å–ª–∏ –º—ã —Å–µ–π—á–∞—Å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ ‚Äî –≤–µ–¥—ë–º –ø–æ —à–∞–≥–∞–º
    if st["intent"] == INTENT_ERR and st["step"] != STEP_FREE_INTRO:
        handle_structural_flow(uid, txt, st)
        return

    # –°–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ ‚Äî GPT
    patterns = detect_trading_patterns(txt)
    suggest_analysis = should_suggest_deep_analysis(txt, patterns)
    decision = gpt_decide(uid, txt, st)
    resp = decision.get("response_text", "–ü–æ–Ω—è–ª.")

    # –ò—Å—Ç–æ—Ä–∏—è (assistant)
    history = st["data"].get("history", [])
    if len(history) >= HIST_LIMIT:
        history = history[-(HIST_LIMIT-1):]
    history.append({"role": "assistant", "content": resp})

    merged = st["data"].copy()
    store = decision.get("store", {})
    if isinstance(store, dict):
        merged.update(store)
    merged["history"] = history

    new_intent = decision.get("intent", st["intent"])
    new_step = decision.get("next_step", st["step"])

    save_state(uid, intent=new_intent, step=new_step, data=merged, nudge_sent=False)

    # –û—Ç–≤–µ—Ç
    if original_message:
        bot.reply_to(original_message, resp, reply_markup=MAIN_MENU)
    else:
        bot.send_message(uid, resp, reply_markup=MAIN_MENU)

    # –ú—è–≥–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–±–æ—Ä—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if suggest_analysis and new_intent != INTENT_ERR and not st["data"].get("problem_confirmed"):
        problem_summary = extract_problem_summary(history)
        bot.send_message(
            uid,
            f"–ü–æ—Ö–æ–∂–µ, –∫–ª—é—á–µ–≤–∞—è —Ç–µ–º–∞ —Ç–∞–∫–æ–≤–∞:\n\n{problem_summary}\n\n–†–∞–∑–±–µ—Ä—ë–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –∫–µ–π—Å–µ?",
            reply_markup=types.InlineKeyboardMarkup().row(
                types.InlineKeyboardButton("–î–∞, –ø–æ–π–¥—ë–º –≤ —Ä–∞–∑–±–æ—Ä", callback_data="go_struct"),
                types.InlineKeyboardButton("–ü–æ–∫–∞ –Ω–µ—Ç", callback_data="no_struct")
            )
        )

@bot.message_handler(content_types=['text'])
def all_text(m: types.Message):
    handle_text_message(m.from_user.id, m.text, m)

# ========= Structural Flow (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ—Ö–Ω–∏–∫ –≤ —Ç–µ–∫—Å—Ç–µ) =========
def handle_structural_flow(uid: int, text_in: str, st: Dict[str, Any]):
    # a) –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    if st["step"] == STEP_ERR_DESCR:
        new_data = st["data"].copy()
        new_data["error_description"] = text_in
        save_state(uid, intent=INTENT_ERR, step=STEP_MER_CTX, data=new_data)
        bot.send_message(uid, mer_prompt_for(STEP_MER_CTX))
        return

    # b) MER (4 —à–∞–≥–∞)
    if st["step"] in MER_ORDER:
        mer = st["data"].get("mer", {})
        mer[st["step"]] = text_in
        new_data = st["data"].copy()
        new_data["mer"] = mer

        idx = MER_ORDER.index(st["step"])
        if idx + 1 < len(MER_ORDER):
            next_step = MER_ORDER[idx + 1]
            save_state(uid, intent=INTENT_ERR, step=next_step, data=new_data)
            bot.send_message(uid, mer_prompt_for(next_step))
        else:
            # –ö–æ—Ä–æ—Ç–∫–∞—è —Ñ–∏–∫—Å–∞—Ü–∏—è MER –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            fix = [
                "–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º:",
                f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç ‚Äî {mer.get(STEP_MER_CTX, '‚Äî')}",
                f"‚Ä¢ –≠–º–æ—Ü–∏–∏ ‚Äî {mer.get(STEP_MER_EMO, '‚Äî')}",
                f"‚Ä¢ –ú—ã—Å–ª–∏ ‚Äî {mer.get(STEP_MER_THO, '‚Äî')}",
                f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è ‚Äî {mer.get(STEP_MER_BEH, '‚Äî')}"
            ]
            bot.send_message(uid, "\n".join(fix))
            save_state(uid, intent=INTENT_ERR, step=STEP_GOAL, data=new_data)
            bot.send_message(uid, "–¢–µ–ø–µ—Ä—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å: —á—Ç–æ –¥–µ–ª–∞–µ—à—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?")
        return

    # c) –¶–µ–ª—å
    if st["step"] == STEP_GOAL:
        new_data = st["data"].copy()
        new_data["goal"] = text_in
        save_state(uid, intent=INTENT_ERR, step=STEP_TOTE_OPS, data=new_data)
        bot.send_message(uid, "–ù–∞–∑–æ–≤–∏ 2‚Äì3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–æ–∫ (–∫–æ—Ä–æ—Ç–∫–æ, —Å–ø–∏—Å–∫–æ–º).")
        return

    # d) –û–ø–µ—Ä–∞—Ü–∏–∏
    if st["step"] == STEP_TOTE_OPS:
        tote = st["data"].get("tote", {})
        tote["ops"] = text_in
        new_data = st["data"].copy()
        new_data["tote"] = tote
        save_state(uid, intent=INTENT_ERR, step=STEP_TOTE_TEST, data=new_data)
        bot.send_message(uid, "–ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –û–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π.")
        return

    # e) –ü—Ä–æ–≤–µ—Ä–∫–∞
    if st["step"] == STEP_TOTE_TEST:
        tote = st["data"].get("tote", {})
        tote["test"] = text_in
        new_data = st["data"].copy()
        new_data["tote"] = tote
        save_state(uid, intent=INTENT_ERR, step=STEP_TOTE_EXIT, data=new_data)
        bot.send_message(uid, "–ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∂–µ—Ç ¬´–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª, —á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å –¥–∞–ª—å—à–µ?")
        return

    # f) –í—ã—Ö–æ–¥ (–∏—Ç–æ–≥)
    if st["step"] == STEP_TOTE_EXIT:
        tote = st["data"].get("tote", {})
        tote["exit"] = text_in
        new_data = st["data"].copy()
        new_data["tote"] = tote

        summary = [
            "<b>–ò—Ç–æ–≥ —Ä–∞–∑–±–æ—Ä–∞</b>",
            f"–û—à–∏–±–∫–∞: {new_data.get('error_description', '‚Äî')}",
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {new_data.get('mer', {}).get(STEP_MER_CTX, '‚Äî')}",
            f"–≠–º–æ—Ü–∏–∏: {new_data.get('mer', {}).get(STEP_MER_EMO, '‚Äî')}",
            f"–ú—ã—Å–ª–∏: {new_data.get('mer', {}).get(STEP_MER_THO, '‚Äî')}",
            f"–î–µ–π—Å—Ç–≤–∏—è: {new_data.get('mer', {}).get(STEP_MER_BEH, '‚Äî')}",
            f"–¶–µ–ª—å: {new_data.get('goal', '‚Äî')}",
            f"–®–∞–≥–∏: {new_data.get('tote', {}).get('ops', '‚Äî')}",
            f"–ö—Ä–∏—Ç–µ—Ä–∏–π: {new_data.get('tote', {}).get('test', '‚Äî')}",
            f"–ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ: {new_data.get('tote', {}).get('exit', '‚Äî')}"
        ]
        save_state(uid, intent=INTENT_FREE, step=STEP_FREE_INTRO, data=new_data, nudge_sent=False)
        bot.send_message(uid, "\n".join(summary), reply_markup=MAIN_MENU)
        bot.send_message(uid, "–ì–æ—Ç–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ?")
        return

# ========= Callbacks =========
@bot.callback_query_handler(func=lambda call: True)
def on_callback(call: types.CallbackQuery):
    uid = call.from_user.id
    data = call.data or ""
    bot.answer_callback_query(call.id)
    st = load_state(uid)

    if data == "confirm_problem" or data == "go_struct":
        save_state(uid, intent=INTENT_ERR, step=STEP_ERR_DESCR, data={"problem_confirmed": True}, nudge_sent=False)
        bot.send_message(uid, "–û—Ç–ª–∏—á–Ω–æ. –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: –≤—Ö–æ–¥/–ø–ª–∞–Ω, –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª, —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        return
    if data == "reject_problem" or data == "no_struct":
        bot.send_message(uid, "–•–æ—Ä–æ—à–æ. –¢–æ–≥–¥–∞ —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º —Å–µ–π—á–∞—Å?", reply_markup=MAIN_MENU)
        return
    if data == "cont_session":
        # –ü—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ç–µ–∫—É—â–∏–π —à–∞–≥
        bot.send_message(uid, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å.", reply_markup=MAIN_MENU)
        save_state(uid, data=st["data"], nudge_sent=False)
        # –ù–µ–∂–Ω–æ ¬´–ø–æ–¥—Ç–æ–ª–∫–Ω—ë–º¬ª –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É —à–∞–≥—É
        if st["intent"] == INTENT_ERR:
            step = st["step"]
            if step in MER_ORDER:
                bot.send_message(uid, mer_prompt_for(step))
            elif step == STEP_ERR_DESCR:
                bot.send_message(uid, "–ù–∞–ø–æ–º–Ω–∏ –∫–æ—Ä–æ—Ç–∫–æ: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
            elif step == STEP_GOAL:
                bot.send_message(uid, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å: —á—Ç–æ –¥–µ–ª–∞–µ—à—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?")
            elif step == STEP_TOTE_OPS:
                bot.send_message(uid, "–ù–∞–∑–æ–≤–∏ 2‚Äì3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ (–∫–æ—Ä–æ—Ç–∫–æ, —Å–ø–∏—Å–∫–æ–º).")
            elif step == STEP_TOTE_TEST:
                bot.send_message(uid, "–ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –û–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π.")
            elif step == STEP_TOTE_EXIT:
                bot.send_message(uid, "–ï—Å–ª–∏ ¬´–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª, —á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å –¥–∞–ª—å—à–µ?")
        return
    if data == "start_new":
        save_state(uid, intent=INTENT_ERR, step=STEP_ERR_DESCR, data={"history": []}, nudge_sent=False)
        bot.send_message(uid, "–û–∫, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
        return

# ========= Menu =========
MENU_BTNS = {
    "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞": "error",
    "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é": "strategy",
    "üìÑ –ü–∞—Å–ø–æ—Ä—Ç": "passport",
    "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏": "weekpanel",
    "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ": "panic",
    "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å": "start_help",
    "üîÑ –ù–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä": "new_case",
}

@bot.message_handler(func=lambda m: m.text in MENU_BTNS.keys())
def handle_menu(m: types.Message):
    uid = m.from_user.id
    st = load_state(uid)
    label = m.text
    code = MENU_BTNS[label]

    history = st["data"].get("history", [])
    if len(history) >= HIST_LIMIT:
        history = history[-(HIST_LIMIT-1):]
    history.append({"role": "user", "content": label})
    st["data"]["history"] = history

    if code in ("error", "new_case"):
        save_state(uid, intent=INTENT_ERR, step=STEP_ERR_DESCR, data=st["data"], nudge_sent=False)
        bot.send_message(uid, "–û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
    elif code == "start_help":
        bot.send_message(uid, "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫: 1) –ü–∞—Å–ø–æ—Ä—Ç, 2) –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏, 3) –°–∫–µ–ª–µ—Ç –¢–°. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?", reply_markup=MAIN_MENU)
        save_state(uid, data=st["data"])
    else:
        bot.send_message(uid, "–û–∫–µ–π. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É—Å–∫–æ—Ä–∏—Ç—å—Å—è ‚Äî –Ω–∞—á–Ω—ë–º —Å —Ä–∞–∑–±–æ—Ä–∞ –æ—à–∏–±–∫–∏.", reply_markup=MAIN_MENU)
        save_state(uid, data=st["data"])

# ========= Webhook / Health =========
@app.get("/")
def root():
    return jsonify({"ok": True, "time": datetime.now(timezone.utc).isoformat()})

@app.get("/health")
def health():
    return jsonify({"status": "ok", "time": datetime.now(timezone.utc).isoformat()})

@app.get("/version")
def version_api():
    return jsonify({
        "version": BOT_VERSION,
        "code_hash": get_code_version(),
        "status": "running",
        "timestamp": datetime.now(timezone.utc).isoformat()
    })

@app.get("/status")
def status():
    return jsonify({"ok": True, "time": datetime.now(timezone.utc).isoformat(), "version": BOT_VERSION})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_SECRET:
        abort(401)
    if request.content_length and request.content_length > MAX_BODY:
        abort(413, description="Body too large")
    body = request.get_data()
    if not body:
        abort(400, description="Empty body")
    try:
        update = telebot.types.Update.de_json(body.decode("utf-8"))
        if update is None:
            log.error("Failed to parse update")
            abort(400, description="Invalid update")
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        log.error("Webhook processing error: %s", e)
        abort(500)

def setup_webhook():
    try:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(
            url=f"{PUBLIC_URL}/{WEBHOOK_PATH}",
            secret_token=TG_SECRET,
            allowed_updates=["message", "callback_query"]
        )
        log.info("Webhook set to %s/%s", PUBLIC_URL, WEBHOOK_PATH)
    except Exception as e:
        log.error("Webhook setup error: %s", e)

def cleanup_old_states(days: int = 60):
    try:
        result = db_exec(
            "DELETE FROM user_state WHERE updated_at < NOW() - (INTERVAL '1 day' * :days)",
            {"days": days}
        )
        log.info("Cleaned up %s old user states", result.rowcount)
    except Exception as e:
        log.error("Cleanup error: %s", e)

def nudge_scheduler():
    """–†–∞–∑ –≤ 5 –º–∏–Ω—É—Ç: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ¬´–∑–∞–≤–∏—Å¬ª –¥–æ–ª—å—à–µ IDLE_MINUTES –∏ –Ω—É–¥–∂ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ¬´–ü—Ä–æ–¥–æ–ª–∂–∏–º?¬ª"""
    while True:
        try:
            rows = db_exec("""
                SELECT user_id, step, intent, data, updated_at, nudge_sent
                FROM user_state
                WHERE updated_at < NOW() - (INTERVAL '1 minute' * :idle)
                  AND nudge_sent = FALSE
                  AND intent = :intent_err
                  AND step NOT IN (:free_intro, :done)
            """, {
                "idle": IDLE_MINUTES,
                "intent_err": INTENT_ERR,
                "free_intro": STEP_FREE_INTRO,
                "done": STEP_DONE
            }).mappings().all()
            for r in rows:
                uid = r["user_id"]
                try:
                    bot.send_message(uid, NUDGE_TEXT, reply_markup=continue_or_new_kb())
                    save_state(uid, nudge_sent=True)
                    time.sleep(0.3)
                except Exception as e:
                    log.error("Nudge send error to %s: %s", uid, e)
        except Exception as e:
            log.error("Nudge scheduler error: %s", e)
        time.sleep(300)  # 5 –º–∏–Ω—É—Ç

def cleanup_scheduler():
    while True:
        time.sleep(24 * 60 * 60)
        cleanup_old_states(60)

# ========= Entry =========
if __name__ == "__main__":
    init_db()

    # —Ñ–æ–Ω–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏
    threading.Thread(target=cleanup_scheduler, daemon=True).start()
    threading.Thread(target=nudge_scheduler, daemon=True).start()

    if SET_WEBHOOK_FLAG:
        setup_webhook()

    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
