# main.py ‚Äî Innertrade (secure webhook edition)
import os, logging, time
from collections import deque, defaultdict
from flask import Flask, request, jsonify, abort
from telebot import TeleBot, types
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

# ---------- CONFIG ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

TELEGRAM_TOKEN    = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY    = os.getenv("OPENAI_API_KEY")   # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞
DATABASE_URL      = os.getenv("DATABASE_URL")
PUBLIC_URL        = os.getenv("PUBLIC_URL")       # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://innertrade-bot.onrender.com
WEBHOOK_PATH      = os.getenv("WEBHOOK_PATH", "hook")  # –ª—é–±–∞—è —Å–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
TG_WEBHOOK_SECRET = os.getenv("TG_WEBHOOK_SECRET")     # —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏ –ø–æ–ª–æ–∂–∏ –≤ Secrets

if not TELEGRAM_TOKEN:    raise RuntimeError("TELEGRAM_TOKEN missing")
if not OPENAI_API_KEY:    raise RuntimeError("OPENAI_API_KEY missing")
if not PUBLIC_URL:        raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")
if not TG_WEBHOOK_SECRET: raise RuntimeError("TG_WEBHOOK_SECRET missing")

# –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–µ—Ä–∏–º–µ—Ç—Ä–∞
MAX_BODY_BYTES = 1_000_000  # 1 MB
RATE_WINDOW_S  = 60         # –æ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
RATE_LIMIT     = 120        # –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ IP –≤ –æ–∫–Ω–æ (—Å –∑–∞–ø–∞—Å–æ–º –ø–æ–¥ –±–∞—Ç—á–∏ Telegram)

# ---------- DB ----------
engine = create_engine(DATABASE_URL, pool_pre_ping=True) if DATABASE_URL else None

def save_state(user_id: int, intent: str, step: str | None = None, data: dict | None = None):
    if not engine:
        return
    try:
        with engine.begin() as conn:
            # –µ—Å–ª–∏ –¥–∞–ª—å—à–µ –≤–∫–ª—é—á–∏–º RLS ‚Äî —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞
            conn.execute(text("SET app.user_id = :uid"), {"uid": str(user_id)})
            conn.execute(text("""
                INSERT INTO user_state(user_id, intent, step, data, updated_at)
                VALUES (:uid, :intent, :step, COALESCE(:data, '{}'::jsonb), now())
                ON CONFLICT (user_id) DO UPDATE
                SET intent = EXCLUDED.intent,
                    step   = EXCLUDED.step,
                    data   = EXCLUDED.data,
                    updated_at = now()
            """), {"uid": user_id, "intent": intent, "step": step, "data": data})
    except SQLAlchemyError as e:
        # –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞
        logging.error(f"DB save_state failed for {user_id}: {e.__class__.__name__}")

# ---------- TELEGRAM BOT ----------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m):
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*.\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=main_menu()
    )
    save_state(m.from_user.id, "idle")

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

# --- –∏–Ω—Ç–µ–Ω—Ç—ã
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def intent_error(m):
    save_state(m.from_user.id, "error")
    bot.send_message(
        m.chat.id,
        "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º —á–µ—Ä–µ–∑ *MERCEDES + TOTE*.\n\n"
        "*M* –ú–æ—Ç–∏–≤–∞—Ü–∏—è?\n*E* –≠–º–æ—Ü–∏–∏?\n*R* –†–µ–∑—É–ª—å—Ç–∞—Ç?\n*C* –ö–æ–Ω—Ç–µ–∫—Å—Ç?\n*E* –≠—Ñ—Ñ–µ–∫—Ç?\n*D* –î–µ–π—Å—Ç–≤–∏—è?\n*S* –°—Ç—Ä–∞—Ç–µ–≥–∏—è?\n\n"
        "*T* Test ‚Äî —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫?\n*O* Operate ‚Äî —á—Ç–æ —Å–¥–µ–ª–∞–ª?\n*T* Test ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç?\n*E* Evolve ‚Äî —á—Ç–æ –∏–∑–º–µ–Ω–∏—à—å?",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def intent_strategy(m):
    save_state(m.from_user.id, "strategy")
    bot.send_message(
        m.chat.id,
        "–û–∫, —Å–æ–±–∏—Ä–∞–µ–º –¢–° –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É:\n"
        "1) –¶–µ–ª–∏\n2) –°—Ç–∏–ª—å (–¥–Ω–µ–≤–Ω–æ–π/—Å–≤–∏–Ω–≥/–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π)\n"
        "3) –†—ã–Ω–∫–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n4) –ü—Ä–∞–≤–∏–ª–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞\n"
        "5) –†–∏—Å–∫ (%, —Å—Ç–æ–ø)\n6) –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n7) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏—Å—Ç–æ—Ä–∏—è/–¥–µ–º–æ)",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def intent_passport(m):
    save_state(m.from_user.id, "passport")
    bot.send_message(
        m.chat.id,
        "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. 1/6) –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å?",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def intent_week_panel(m):
    save_state(m.from_user.id, "week_panel")
    bot.send_message(
        m.chat.id,
        "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏:\n‚Ä¢ –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n‚Ä¢ –ü–ª–∞–Ω (3 —à–∞–≥–∞)\n‚Ä¢ –õ–∏–º–∏—Ç—ã\n‚Ä¢ –†–∏—Ç—É–∞–ª—ã\n‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def intent_panic(m):
    save_state(m.from_user.id, "panic")
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–æ–º\n3) –°–¥–µ–ª–∞–π 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
        "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä (—á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–±–∏–ª–æ)\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def intent_start_help(m):
    save_state(m.from_user.id, "start_help")
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω)\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°\n"
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º ‚Äî –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏?",
        reply_markup=main_menu()
    )

@bot.message_handler(content_types=["text"])
def fallback(m):
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–Ω—è–ª. –ß—Ç–æ–±—ã –±—ã–ª–æ –±—ã—Å—Ç—Ä–µ–µ, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /menu.",
        reply_markup=main_menu()
    )

# ---------- FLASK APP (WEBHOOK ONLY) ----------
app = Flask(__name__)

# –ø—Ä–æ—Å—Ç–µ–π—à–∏–π rate-limit –ø–æ IP
_hits: dict[str, deque] = defaultdict(deque)
def _client_ip():
    # Render/–ø—Ä–æ–∫—Å–∏ –º–æ–≥—É—Ç —Å—Ç–∞–≤–∏—Ç—å X-Forwarded-For
    xff = request.headers.get("X-Forwarded-For")
    if xff:
        return xff.split(",")[0].strip()
    return request.remote_addr or "?"

@app.before_request
def guard():
    if request.path.startswith(f"/webhook/{WEBHOOK_PATH}"):
        if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
            abort(401)
        if request.content_length and request.content_length > MAX_BODY_BYTES:
            abort(413)
        # rate limit
        now = time.time()
        dq = _hits[_client_ip()]
        while dq and now - dq[0] > RATE_WINDOW_S:
            dq.popleft()
        if len(dq) >= RATE_LIMIT:
            abort(429)
        dq.append(now)

@app.get("/")
def root():
    return "OK (webhook)", 200

@app.get("/health")
def health():
    return jsonify({"status": "ok"}), 200

@app.post(f"/webhook/{WEBHOOK_PATH}")
def webhook():
    try:
        upd = request.get_json(force=True, silent=False)
    except Exception:
        abort(400)
    try:
        update = types.Update.de_json(upd)
        bot.process_new_updates([update])
    except Exception as e:
        logging.error(f"update fail: {e.__class__.__name__}")
        # 200 —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ—Ç—Ä–∞–π–ª –º–∏–ª–ª–∏–æ–Ω —Ä–∞–∑
        return jsonify({"ok": False}), 200
    return jsonify({"ok": True}), 200

def setup_webhook():
    # –°–±—Ä–æ—Å –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Å —Å–µ–∫—Ä–µ—Ç–æ–º (drop_pending_updates=True –Ω–∞ –≤—Å—è–∫–∏–π)
    try:
        bot.remove_webhook()
    except Exception:
        pass
    url = f"{PUBLIC_URL}/webhook/{WEBHOOK_PATH}"
    ok = bot.set_webhook(url=url, secret_token=TG_WEBHOOK_SECRET, drop_pending_updates=True)
    logging.info(f"Webhook set to {url}: {ok}")

if __name__ == "__main__":
    setup_webhook()
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
