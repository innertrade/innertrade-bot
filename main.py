# main.py ‚Äî Innertrade Kai Mentor Bot (coach-struct v7.1)
# –í–µ—Ä—Å–∏—è: 2025-09-23

import os, json, time, logging, threading, hashlib, re
from datetime import datetime, timezone
from typing import Any, Dict, Optional, List
from difflib import SequenceMatcher

import requests
from flask import Flask, request, abort, jsonify
from sqlalchemy import create_engine, text
from sqlalchemy.pool import QueuePool
import telebot
from telebot import types
from openai import OpenAI

# ========= Version =========
def get_code_version():
    try:
        with open(__file__, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()[:8]
    except Exception:
        return "unknown"

BOT_VERSION = f"2025-09-23-{get_code_version()}"

# ========= ENV =========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
PUBLIC_URL     = os.getenv("PUBLIC_URL", "").strip()
WEBHOOK_PATH   = os.getenv("WEBHOOK_PATH", "webhook").strip()
TG_SECRET      = os.getenv("TG_WEBHOOK_SECRET", "").strip()
DATABASE_URL   = os.getenv("DATABASE_URL", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
OPENAI_MODEL   = os.getenv("OPENAI_MODEL", "gpt-4o-mini").strip()
OFFSCRIPT_ENABLED = os.getenv("OFFSCRIPT_ENABLED", "true").lower() == "true"
SET_WEBHOOK_FLAG  = os.getenv("SET_WEBHOOK", "false").lower() == "true"
LOG_LEVEL      = os.getenv("LOG_LEVEL", "INFO").upper()
MAX_BODY       = int(os.getenv("MAX_BODY", "1000000"))
HIST_LIMIT     = 12

# ========= Sanity =========
for var in ("TELEGRAM_TOKEN","PUBLIC_URL","WEBHOOK_PATH","TG_SECRET","DATABASE_URL"):
    if not globals()[var]:
        raise RuntimeError(f"{var} is required")

# ========= Logging =========
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)
log = logging.getLogger("kai-mentor")
log.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤–µ—Ä—Å–∏—è: {BOT_VERSION}")

# ========= Intents/Steps =========
INTENT_GREET = "greet"
INTENT_FREE  = "free"
INTENT_ERR   = "error"

STEP_ASK_STYLE     = "ask_style"
STEP_FREE_INTRO    = "free_intro"

STEP_CONFIRM_PROBLEM = "confirm_problem"  # <-- –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

STEP_ERR_DESCR   = "err_describe"
STEP_MER_CTX     = "mer_context"
STEP_MER_EMO     = "mer_emotions"
STEP_MER_THO     = "mer_thoughts"
STEP_MER_BEH     = "mer_behavior"
STEP_GOAL        = "goal_positive"
STEP_TOTE_OPS    = "tote_ops"
STEP_TOTE_TEST   = "tote_test"
STEP_TOTE_EXIT   = "tote_exit"

MER_ORDER = [STEP_MER_CTX, STEP_MER_EMO, STEP_MER_THO, STEP_MER_BEH]

# ========= OpenAI =========
oai_client = None
openai_status = "disabled"
if OPENAI_API_KEY and OFFSCRIPT_ENABLED:
    try:
        oai_client = OpenAI(api_key=OPENAI_API_KEY)
        oai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": "test"}],
            max_tokens=5
        )
        openai_status = "active"
        log.info("OpenAI –≥–æ—Ç–æ–≤")
    except Exception as e:
        log.error(f"OpenAI init error: {e}")
        oai_client = None
        openai_status = f"error: {e}"

# ========= DB =========
# –í–ê–ñ–ù–û: –¥–ª—è SQLAlchemy URL –∏—Å–ø–æ–ª—å–∑—É–π dialect+driver (postgresql+psycopg://)
# –ü—Ä–∏–º–µ—Ä ENV: postgresql+psycopg://user:pass@host/db?sslmode=require&channel_binding=require
engine = create_engine(
    DATABASE_URL,
    poolclass=QueuePool,
    pool_size=5, max_overflow=10, pool_timeout=30, pool_recycle=1800,
)

def db_exec(sql: str, params: Optional[Dict[str, Any]] = None):
    with engine.begin() as conn:
        return conn.execute(text(sql), params or {})

def init_db():
    db_exec("""
    CREATE TABLE IF NOT EXISTS user_state(
        user_id BIGINT PRIMARY KEY,
        intent TEXT,
        step TEXT,
        data  TEXT,
        updated_at TIMESTAMPTZ DEFAULT now()
    );
    """)
    db_exec("CREATE INDEX IF NOT EXISTS idx_user_state_updated_at ON user_state(updated_at)")
    db_exec("CREATE INDEX IF NOT EXISTS idx_user_state_intent_step ON user_state(intent, step)")
    log.info("–ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# ========= State =========
def load_state(uid: int) -> Dict[str, Any]:
    row = db_exec("SELECT intent, step, data FROM user_state WHERE user_id=:uid", {"uid": uid}).mappings().first()
    if row:
        data = {}
        if row["data"]:
            try:
                data = json.loads(row["data"])
            except Exception as e:
                log.error("parse user data error: %s", e)
        return {"user_id": uid, "intent": row["intent"] or INTENT_GREET, "step": row["step"] or STEP_ASK_STYLE, "data": data}
    return {"user_id": uid, "intent": INTENT_GREET, "step": STEP_ASK_STYLE, "data": {"history": []}}

def save_state(uid: int, intent=None, step=None, data=None) -> Dict[str, Any]:
    cur = load_state(uid)
    intent = intent or cur["intent"]
    step   = step   or cur["step"]
    new_data = cur["data"].copy()
    if data:
        new_data.update(data)
    db_exec("""
        INSERT INTO user_state (user_id,intent,step,data,updated_at)
        VALUES (:uid,:intent,:step,:data,now())
        ON CONFLICT (user_id) DO UPDATE
        SET intent=EXCLUDED.intent, step=EXCLUDED.step, data=EXCLUDED.data, updated_at=now()
    """, {"uid": uid, "intent": intent, "step": step, "data": json.dumps(new_data, ensure_ascii=False)})
    return {"user_id": uid, "intent": intent, "step": step, "data": new_data}

# ========= Bot / Flask =========
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML", threaded=False)
app = Flask(__name__)

MAIN_MENU = types.ReplyKeyboardMarkup(resize_keyboard=True)
MAIN_MENU.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
MAIN_MENU.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
MAIN_MENU.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")

STYLE_KB = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
STYLE_KB.row("—Ç—ã", "–≤—ã")

# ========= Patterns =========
RISK_PATTERNS = {
    "remove_stop": ["—É–±–∏—Ä–∞—é —Å—Ç–æ–ø", "—Å–Ω—è–ª —Å—Ç–æ–ø", "–±–µ–∑ —Å—Ç–æ–ø–∞"],
    "move_stop": ["–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø", "–æ—Ç–æ–¥–≤–∏–Ω—É–ª —Å—Ç–æ–ø", "–ø–µ—Ä–µ—Å—Ç–∞–≤–∏–ª —Å—Ç–æ–ø"],
    "early_close": ["—Ä–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥", "–≤—ã—à–µ–ª –≤ –Ω–æ–ª—å", "–º–∏–∑–µ—Ä–Ω—ã–π –ø–ª—é—Å", "–∑–∞–∫—Ä—ã–ª —Ä–∞–Ω–æ"],
    "averaging": ["—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ", "–¥–æ–ª–∏–≤–∞–ª—Å—è –ø—Ä–æ—Ç–∏–≤", "–¥–æ–∫—É–ø–∞–ª –ø—Ä–æ—Ç–∏–≤"],
    "fomo": ["–ø–æ–µ–∑–¥ —É–µ–¥–µ—Ç", "—É–ø—É—â—É", "—É–π–¥—ë—Ç –±–µ–∑ –º–µ–Ω—è", "—Å—Ç—Ä–∞—Ö —É–ø—É—Å—Ç–∏—Ç—å"],
    "rule_breaking": ["–Ω–∞—Ä—É—à–∏–ª –ø–ª–∞–Ω", "–æ—Ç–æ—à—ë–ª –æ—Ç –ø–ª–∞–Ω–∞", "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –ø–ª–∞–Ω"],
}
EMO_PATTERNS = {
    "self_doubt": ["—Å–æ–º–Ω–µ–≤–∞—é—Å—å", "–Ω–µ —É–≤–µ—Ä–µ–Ω", "—Å—Ç—Ä–µ—Å—Å", "–ø–∞–Ω–∏–∫–∞", "–≤–æ–ª–Ω–µ–Ω–∏–µ"],
    "fear_of_loss": ["—Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—å", "–±–æ—é—Å—å —Å—Ç–æ–ø–∞", "–Ω–µ —Ö–æ—á—É –±—ã—Ç—å –æ–±–º–∞–Ω—É—Ç—ã–º"],
    "chaos": ["—Ö–∞–æ—Å", "—Å—É–µ—Ç–∞", "–ø—É—Ç–∞—é—Å—å"],
}

def detect_trading_patterns(text: str) -> List[str]:
    tl = (text or "").lower()
    hits = []
    for name, keys in {**RISK_PATTERNS, **EMO_PATTERNS}.items():
        if any(k in tl for k in keys):
            hits.append(name)
    return hits

def should_force_structural(text: str) -> bool:
    pats = detect_trading_patterns(text)
    risk = set(pats) & set(RISK_PATTERNS.keys())
    return bool(risk) or ("fear_of_loss" in pats) or ("self_doubt" in pats)

# ========= Helpers (tone & clean) =========
BAN_TEMPLATES = ["–ø–æ–Ω–∏–º–∞—é", "—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å", "–≤–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å", "–¥–∞–≤–∞–π —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º", "–±—ã–ª–æ –±—ã –ø–æ–ª–µ–∑–Ω–æ",
                 "–ø–æ–ø—Ä–æ–±—É–π", "–∏—Å–ø–æ–ª—å–∑—É–π", "–ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è", "—É—Å—Ç–∞–Ω–æ–≤–∏", "—Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è", "—Å–ª–µ–¥—É–π", "–ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏"]

def strip_templates(text_in: str) -> str:
    t = text_in or ""
    for ph in BAN_TEMPLATES:
        t = re.sub(rf"(?i)\b{re.escape(ph)}[^.!?]*[.!?]", " ", t)
    t = re.sub(r'\s+', ' ', t).strip(" ,.!?")
    return t

def anti_echo(user_text: str, model_text: str) -> str:
    u = (user_text or "").strip().lower()
    m = (model_text or "").strip()
    if len(u) >= 15 and len(m) >= 15 and SequenceMatcher(None, u, m.lower()).ratio() > 0.7:
        return "–°–∫–∞–∂—É –∏–Ω–∞—á–µ: " + m
    return m

def mer_prompt_for(step: str) -> str:
    return {
        STEP_MER_CTX: "–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ä–æ—Ç–∫–æ. –ì–¥–µ/–∫–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ?",
        STEP_MER_EMO: "–ß—Ç–æ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª –≤ –º–æ–º–µ–Ω—Ç–µ (2‚Äì3 —Å–ª–æ–≤–∞)?",
        STEP_MER_THO: "–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –º–µ–ª—å–∫–∞–ª–∏ (2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã)?",
        STEP_MER_BEH: "–ß—Ç–æ —Å–¥–µ–ª–∞–ª —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏? (–¥–µ–π—Å—Ç–≤–∏—è)",
    }.get(step, "–ü—Ä–æ–¥–æ–ª–∂–∏–º.")

def summarize_issue(text_in: str) -> str:
    """–ö–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤/—è–∑—ã–∫–∞."""
    pats = set(detect_trading_patterns(text_in))
    parts = []
    if "fomo" in pats: parts.append("—Å—Ç—Ä–∞—Ö —É–ø—É—Å—Ç–∏—Ç—å –≤—Ö–æ–¥ (FOMO)")
    if "remove_stop" in pats or "move_stop" in pats: parts.append("—Ç—Ä–æ–≥–∞–µ—à—å/—Å–Ω–∏–º–∞–µ—à—å —Å—Ç–æ–ø")
    if "early_close" in pats: parts.append("—Ä–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥/¬´–≤ –Ω–æ–ª—å¬ª")
    if "averaging" in pats: parts.append("—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏")
    if "fear_of_loss" in pats: parts.append("—Å—Ç—Ä–∞—Ö —Å—Ç–æ–ø–∞/–ø–æ—Ç–µ—Ä—å")
    if "self_doubt" in pats: parts.append("—Å–æ–º–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞")
    core = " –∏ ".join(parts) if parts else "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏"
    return f"–ü–æ—Ö–æ–∂–µ, –∫–ª—é—á–µ–≤–∞—è —Ç—Ä—É–¥–Ω–æ—Å—Ç—å ‚Äî {core}. –¢–∞–∫ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º?"

def mer_snapshot(data: Dict[str, Any]) -> str:
    mer = data.get("mer", {})
    return (
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {mer.get(STEP_MER_CTX, '‚Äî')}\n"
        f"–≠–º–æ—Ü–∏–∏: {mer.get(STEP_MER_EMO, '‚Äî')}\n"
        f"–ú—ã—Å–ª–∏: {mer.get(STEP_MER_THO, '‚Äî')}\n"
        f"–î–µ–π—Å—Ç–≤–∏—è: {mer.get(STEP_MER_BEH, '‚Äî')}"
    )

# ========= Voice (optional) =========
def transcribe_voice(audio_file_path: str) -> Optional[str]:
    if not oai_client:
        return None
    try:
        with open(audio_file_path, "rb") as audio_file:
            tr = oai_client.audio.transcriptions.create(
                model="whisper-1", file=audio_file, language="ru"
            )
        return getattr(tr, "text", None)
    except Exception as e:
        log.error("Whisper error: %s", e)
        return None

# ========= GPT (one-step coach) =========
def gpt_decide(uid: int, text_in: str, st: Dict[str, Any]) -> Dict[str, Any]:
    """–ö–æ—É—á –∑–∞–¥–∞—ë—Ç –æ–¥–∏–Ω —Ç–æ—á–Ω—ã–π —à–∞–≥ –∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –Ω–∞–≤–æ–¥–∏—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã/—Ä–∞–∑–±–æ—Ä—É."""
    fallback = {
        "next_step": st["step"],
        "intent": st["intent"],
        "response_text": "–û–∫–µ–π, –¥–≤–∏–≥–∞–µ–º—Å—è –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —à–∞–≥–∞–º–∏ ‚Äî —è —Ä—è–¥–æ–º. –†–∞—Å—Å–∫–∞–∂–∏ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ: –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ç—ã –æ—Ç—Å—Ç—É–ø–∏–ª –æ—Ç –ø–ª–∞–Ω–∞ (–≤—Ö–æ–¥/—Å—Ç–æ–ø/–≤—ã—Ö–æ–¥)?",
        "store": {},
        "is_structural": False
    }
    if not oai_client or not OFFSCRIPT_ENABLED:
        return fallback

    style = st["data"].get("style", "—Ç—ã")
    patterns = detect_trading_patterns(text_in)
    system_prompt = f"""
–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π –∏ —Ç–æ—á–Ω—ã–π –∫–æ—É—á –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É –ê–ª–µ–∫—Å. –ë–µ–∑ —Å–ø–∏—Å–∫–æ–≤ —Å–æ–≤–µ—Ç–æ–≤ –∏ –æ–±—â–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî 1) –∫–æ—Ä–æ—Ç–∫–æ –æ—Ç—Ä–∞–∑–∏—Ç—å —Å—É—Ç—å, 2) –∑–∞–¥–∞—Ç—å –æ–¥–∏–Ω —Ç–æ—á–Ω—ã–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
–∏–ª–∏ –º—è–≥–∫–æ –ø–æ–¥–≤–µ—Å—Ç–∏ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã. –ü–∏—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ –Ω–∞ ¬´{style}¬ª.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ JSON:
- next_step
- intent
- response_text (1‚Äì2 –∞–±–∑–∞—Ü–∞, –±–µ–∑ –∫–ª–∏—à–µ)
- store (object)
- is_structural (true/false, –µ—Å–ª–∏ –ø–æ—Ä–∞ –∏–¥—Ç–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Ä–∞–∑–±–æ—Ä)
""".strip()

    msgs = [{"role": "system", "content": system_prompt}]
    for h in st["data"].get("history", [])[-HIST_LIMIT:]:
        if h.get("role") in ("user","assistant") and isinstance(h.get("content"), str):
            msgs.append(h)
    msgs.append({"role":"user","content": text_in})

    try:
        res = oai_client.chat.completions.create(
            model=OPENAI_MODEL, messages=msgs, temperature=0.3,
            response_format={"type":"json_object"},
        )
        raw = res.choices[0].message.content or "{}"
        dec = json.loads(raw) if isinstance(raw, str) else fallback
        for k in ["next_step","intent","response_text","store","is_structural"]:
            if k not in dec: return fallback

        resp = strip_templates(anti_echo(text_in, dec.get("response_text","").strip()))
        if len(resp) < 12:
            resp = "–û–∫–µ–π. –ù–∞ —ç—Ç–æ–º –∫–µ–π—Å–µ: –≥–¥–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç—ã –æ—Ç–æ—à—ë–ª –æ—Ç –ø–ª–∞–Ω–∞ (–≤—Ö–æ–¥/—Å—Ç–æ–ø/–≤—ã—Ö–æ–¥)?"
        dec["response_text"] = resp

        # –•–∞—Ä–¥-—Ç—Ä–∏–≥–≥–µ—Ä—ã ‚Äî –º—è–≥–∫–æ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É
        if should_force_structural(text_in):
            dec["is_structural"] = True

        return dec
    except Exception as e:
        log.error("GPT decision error: %s", e)
        return fallback

# ========= UI bits =========
def kb_continue_or_new():
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="resume_flow"),
        types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_flow"),
    )
    return kb

def kb_yes_no():
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–î–∞, –≤–µ—Ä–Ω–æ", callback_data="confirm_problem_yes"),
        types.InlineKeyboardButton("–ü–æ–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_problem_no"),
    )
    return kb

# ========= Calibration / Confirmation =========
def maybe_confirm_problem(uid: int, last_text: str, st: Dict[str, Any]):
    """–ï—Å–ª–∏ –≤–∏–¥–∏–º —è–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ."""
    data = st["data"]
    if st["intent"] == INTENT_ERR:
        return  # —É–∂–µ –≤ —Ä–∞–∑–±–æ—Ä–µ
    if data.get("problem_confirmed"):
        return
    if should_force_structural(last_text):
        draft = summarize_issue(last_text)
        data["draft_problem"] = draft
        data["awaiting_confirm"] = True
        save_state(uid, INTENT_FREE, STEP_CONFIRM_PROBLEM, data)
        bot.send_message(uid, f"–°–∫–∞–∂—É –∫–æ—Ä–æ—Ç–∫–æ, –∫–∞–∫ —è —Ç–µ–±—è –ø–æ–Ω—è–ª:\n\n{draft}\n\n–í–µ—Ä–Ω–æ?", reply_markup=kb_yes_no())

def continue_prompt_if_needed(uid: int, text_in: str, st: Dict[str, Any]):
    hello = text_in.lower().strip()
    if st["intent"] == INTENT_ERR and any(w in hello for w in ("–ø—Ä–∏–≤–µ—Ç","/start","/–Ω–∞—á–∞—Ç—å","/continue")):
        bot.send_message(uid, "–ü–æ—Ö–æ–∂–µ, –º—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑–±–æ—Ä. –ü—Ä–æ–¥–æ–ª–∂–∏–º –∏–ª–∏ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ?", reply_markup=kb_continue_or_new())

# ========= Handlers =========
@bot.message_handler(commands=["start","reset"])
def cmd_start(m: types.Message):
    st = save_state(m.from_user.id, INTENT_GREET, STEP_ASK_STYLE, {"history": []})
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —É–¥–æ–±–Ω–µ–µ ‚Äî <b>—Ç—ã</b> –∏–ª–∏ <b>–≤—ã</b>?\n\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —á–∏—Å—Ç—ã–π –ª–∏—Å—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: <b>–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä</b>.",
        reply_markup=STYLE_KB
    )

@bot.message_handler(commands=["version","v"])
def cmd_version(m: types.Message):
    info = f"üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {BOT_VERSION}\nüìù –•—ç—à –∫–æ–¥–∞: {get_code_version()}\nüïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now(timezone.utc).isoformat()}\nü§ñ OpenAI: {openai_status}"
    bot.reply_to(m, info)

@bot.message_handler(content_types=['voice','audio'])
def handle_voice(message: types.Message):
    uid = message.from_user.id
    try:
        file_id = message.voice.file_id if message.content_type == 'voice' else message.audio.file_id
        file_info = bot.get_file(file_id)
        data = bot.download_file(file_info.file_path)
        tmp = f"voice_{uid}_{int(time.time())}.ogg"
        with open(tmp,"wb") as f: f.write(data)
        txt = transcribe_voice(tmp)
        try: os.remove(tmp)
        except: pass
        if not txt:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –°–∫–∞–∂–∏ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º.")
            return
        handle_text_message(uid, txt, message)
    except Exception as e:
        log.error("Voice processing error: %s", e)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

@bot.message_handler(content_types=["text"])
def on_text(m: types.Message):
    handle_text_message(m.from_user.id, m.text.strip(), m)

def handle_text_message(uid: int, text_in: str, original_message=None):
    st = load_state(uid)
    log.info("User %s: intent=%s step=%s text='%s'", uid, st["intent"], st["step"], text_in[:200])

    # –°–ø–µ—Ü-—Ç—Ä–∏–≥–≥–µ—Ä: "–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä"
    if text_in.lower() == "–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä":
        save_state(uid, INTENT_ERR, STEP_ERR_DESCR, {"history": []})
        bot.send_message(uid, "–û–∫–µ–π, –Ω–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
        return

    # history (user)
    history = st["data"].get("history", [])
    if len(history) >= HIST_LIMIT: history = history[-(HIST_LIMIT-1):]
    history.append({"role":"user","content": text_in})
    st["data"]["history"] = history

    # –í—ã–±–æ—Ä —Å—Ç–∏–ª—è
    if st["intent"] == INTENT_GREET and st["step"] == STEP_ASK_STYLE:
        if text_in.lower() in ("—Ç—ã","–≤—ã"):
            st["data"]["style"] = text_in.lower()
            save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
            bot.send_message(uid, f"–ü—Ä–∏–Ω—è—Ç–æ ({text_in}). –ß—Ç–æ —Å–µ–π—á–∞—Å –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ —Ö–æ—á–µ—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å?\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä¬ª.", reply_markup=MAIN_MENU)
        else:
            save_state(uid, data=st["data"])
            bot.send_message(uid, "–í—ã–±–µ—Ä–∏ ¬´—Ç—ã¬ª –∏–ª–∏ ¬´–≤—ã¬ª.", reply_markup=STYLE_KB)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª ¬´–ø—Ä–∏–≤–µ—Ç¬ª –≤–æ –≤—Ä–µ–º—è –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å/—Å–±—Ä–æ—Å–∏—Ç—å
    continue_prompt_if_needed(uid, text_in, st)

    # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Ä–∞–∑–±–æ—Ä
    if st["intent"] == INTENT_ERR:
        handle_structural(uid, text_in, st)
        return

    # –°–≤–æ–±–æ–¥–Ω—ã–π –∫–æ—É—á–∏–Ω–≥ (1 —à–∞–≥) + –≤–æ–∑–º–æ–∂–Ω–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞
    decision = gpt_decide(uid, text_in, st)
    resp = decision.get("response_text") or "–û–∫–µ–π. –ì–¥–µ –∏–º–µ–Ω–Ω–æ —Ç—ã –æ—Ç—Å—Ç—É–ø–∏–ª –æ—Ç –ø–ª–∞–Ω–∞ (–≤—Ö–æ–¥/—Å—Ç–æ–ø/–≤—ã—Ö–æ–¥)?"

    # history (assistant)
    history = st["data"].get("history", [])
    if len(history) >= HIST_LIMIT: history = history[-(HIST_LIMIT-1):]
    history.append({"role":"assistant","content": resp})

    merged = st["data"].copy()
    store = decision.get("store", {})
    if isinstance(store, dict): merged.update(store)
    merged["history"] = history

    new_intent = decision.get("intent") or st["intent"]
    new_step   = decision.get("next_step") or st["step"]
    st_after = save_state(uid, new_intent, new_step, merged)

    if original_message:
        bot.reply_to(original_message, resp, reply_markup=MAIN_MENU)
    else:
        bot.send_message(uid, resp, reply_markup=MAIN_MENU)

    # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Ä–∞–∑–±–æ—Ä
    if decision.get("is_structural", False) or should_force_structural(text_in):
        maybe_confirm_problem(uid, text_in, st_after)

# ========= Structural Flow =========
def handle_structural(uid: int, text_in: str, st: Dict[str, Any]):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å–ª–µ "–ü–æ–ø—Ä–∞–≤–∏—Ç—å")
    if st["step"] == STEP_CONFIRM_PROBLEM and st["data"].get("awaiting_confirm"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª —Å–≤–æ—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É ‚Äî —Å—á–∏—Ç–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –¥–≤–∏–≥–∞–µ–º—Å—è
        st["data"]["draft_problem"] = text_in
        st["data"]["problem_confirmed"] = True
        st["data"]["awaiting_confirm"] = False
        save_state(uid, INTENT_ERR, STEP_ERR_DESCR, st["data"])
        bot.send_message(uid, "–ü—Ä–∏–Ω—è–ª —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É. –í–æ–∑—å–º—ë–º —Å–≤–µ–∂–∏–π –ø—Ä–∏–º–µ—Ä. –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
        return

    # –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    if st["step"] == STEP_ERR_DESCR:
        new_data = st["data"].copy()
        new_data["error_description"] = text_in
        # –ú—è–≥–∫–∏–π –º–æ—Å—Ç–∏–∫ –∫ —à–∞–≥–∞–º
        save_state(uid, INTENT_ERR, STEP_MER_CTX, new_data)
        bot.send_message(uid, "–û–∫–µ–π, –ø–æ–π–¥—ë–º –ø–æ —à–∞–≥–∞–º, –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç.")
        bot.send_message(uid, mer_prompt_for(STEP_MER_CTX))
        return

    # MER: –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Üí —ç–º–æ—Ü–∏–∏ ‚Üí –º—ã—Å–ª–∏ ‚Üí –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    if st["step"] in MER_ORDER:
        mer = st["data"].get("mer", {})
        mer[st["step"]] = text_in
        new_data = st["data"].copy()
        new_data["mer"] = mer

        idx = MER_ORDER.index(st["step"])
        if idx + 1 < len(MER_ORDER):
            nxt = MER_ORDER[idx + 1]
            save_state(uid, INTENT_ERR, nxt, new_data)
            bot.send_message(uid, mer_prompt_for(nxt))
        else:
            # –§–∏–∫—Å–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω—É –ø–µ—Ä–µ–¥ —Ü–µ–ª—è–º–∏
            snap = mer_snapshot(new_data)
            save_state(uid, INTENT_ERR, STEP_GOAL, new_data)
            bot.send_message(uid, f"–ö–∞—Ä—Ç–∏–Ω—É —Å–æ–±—Ä–∞–ª–∏:\n\n{snap}\n\n–¢–µ–ø–µ—Ä—å ‚Äî –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å. –ß—Ç–æ –¥–µ–ª–∞–µ—à—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?")
        return

    # –¶–µ–ª—å
    if st["step"] == STEP_GOAL:
        new_data = st["data"].copy()
        new_data["goal"] = text_in
        save_state(uid, INTENT_ERR, STEP_TOTE_OPS, new_data)
        bot.send_message(uid, "–î–≤–∞-—Ç—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–æ–∫ (–∫–æ—Ä–æ—Ç–∫–æ, —Å–ø–∏—Å–∫–æ–º).")
        return

    # TOTE - ops
    if st["step"] == STEP_TOTE_OPS:
        tote = st["data"].get("tote", {})
        tote["ops"] = text_in
        new_data = st["data"].copy()
        new_data["tote"] = tote
        save_state(uid, INTENT_ERR, STEP_TOTE_TEST, new_data)
        bot.send_message(uid, "–ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –û–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π.")
        return

    # TOTE - test
    if st["step"] == STEP_TOTE_TEST:
        tote = st["data"].get("tote", {})
        tote["test"] = text_in
        new_data = st["data"].copy()
        new_data["tote"] = tote
        save_state(uid, INTENT_ERR, STEP_TOTE_EXIT, new_data)
        bot.send_message(uid, "–ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∂–µ—Ç ¬´–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª ‚Äî —á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å?")
        return

    # TOTE - exit (—Ñ–∏–Ω–∞–ª)
    if st["step"] == STEP_TOTE_EXIT:
        tote = st["data"].get("tote", {})
        tote["exit"] = text_in
        new_data = st["data"].copy()
        new_data["tote"] = tote

        mer = new_data.get('mer', {})
        summary = [
            "<b>–ò—Ç–æ–≥ —Ä–∞–∑–±–æ—Ä–∞</b>",
            f"–ü—Ä–æ–±–ª–µ–º–∞: {new_data.get('draft_problem','‚Äî')}",
            f"–û—à–∏–±–∫–∞: {new_data.get('error_description','‚Äî')}",
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {mer.get(STEP_MER_CTX,'‚Äî')}",
            f"–≠–º–æ—Ü–∏–∏: {mer.get(STEP_MER_EMO,'‚Äî')}",
            f"–ú—ã—Å–ª–∏: {mer.get(STEP_MER_THO,'‚Äî')}",
            f"–î–µ–π—Å—Ç–≤–∏—è: {mer.get(STEP_MER_BEH,'‚Äî')}",
            f"–¶–µ–ª—å: {new_data.get('goal','‚Äî')}",
            f"–®–∞–≥–∏: {new_data.get('tote',{}).get('ops','‚Äî')}",
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {new_data.get('tote',{}).get('test','‚Äî')}",
            f"–ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ: {new_data.get('tote',{}).get('exit','‚Äî')}",
        ]
        save_state(uid, INTENT_FREE, STEP_FREE_INTRO, new_data)
        bot.send_message(uid, "\n".join(summary), reply_markup=MAIN_MENU)
        bot.send_message(uid, "–ì–æ—Ç–æ–≤ –≤—ã–Ω–µ—Å—Ç–∏ —ç—Ç–æ –≤ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ?")
        return

# ========= Menu handlers =========
MENU_BTNS = {
    "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞":"error",
    "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é":"strategy",
    "üìÑ –ü–∞—Å–ø–æ—Ä—Ç":"passport",
    "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏":"weekpanel",
    "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ":"panic",
    "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å":"start_help",
}
@bot.message_handler(func=lambda m: m.text in MENU_BTNS.keys())
def handle_menu(m: types.Message):
    uid = m.from_user.id
    st = load_state(uid)
    label = m.text; code = MENU_BTNS[label]

    hist = st["data"].get("history", [])
    if len(hist) >= HIST_LIMIT: hist = hist[-(HIST_LIMIT-1):]
    hist.append({"role":"user","content": label})
    st["data"]["history"] = hist

    if code == "error":
        # –°–±—Ä–æ—Å –≤ —Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        if not st["data"].get("problem_confirmed"):
            draft = "–†–∞–∑–±–∏—Ä–∞–µ–º –Ω–µ–¥–∞–≤–Ω—é—é –æ—à–∏–±–∫—É –≤ —Å–¥–µ–ª–∫–µ ‚Äî –æ–∫?"
            st["data"]["draft_problem"] = draft
            st["data"]["awaiting_confirm"] = True
            save_state(uid, INTENT_FREE, STEP_CONFIRM_PROBLEM, st["data"])
            bot.send_message(uid, f"{draft}\n\n–í–µ—Ä–Ω–æ?", reply_markup=kb_yes_no())
        else:
            save_state(uid, INTENT_ERR, STEP_ERR_DESCR, st["data"])
            bot.send_message(uid, "–û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–µ–π—Å –æ—à–∏–±–∫–∏: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
    elif code == "start_help":
        bot.send_message(uid, "–ü–ª–∞–Ω: 1) –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏, 2) —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏, 3) —Å–∫–µ–ª–µ—Ç –¢–°. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?", reply_markup=MAIN_MENU)
        save_state(uid, data=st["data"])
    else:
        bot.send_message(uid, "–û–∫. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É—Å–∫–æ—Ä–∏—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏ ¬´üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞¬ª.", reply_markup=MAIN_MENU)
        save_state(uid, data=st["data"])

# ========= Callbacks =========
@bot.callback_query_handler(func=lambda call: True)
def on_callback(call: types.CallbackQuery):
    uid = call.from_user.id
    data = call.data or ""
    bot.answer_callback_query(call.id, "–û–∫")
    st = load_state(uid)

    if data == "confirm_problem_yes":
        st["data"]["problem_confirmed"] = True
        st["data"]["awaiting_confirm"] = False
        save_state(uid, INTENT_ERR, STEP_ERR_DESCR, st["data"])
        bot.send_message(uid, "–û—Ç–ª–∏—á–Ω–æ, –±–µ—Ä—ë–º —ç—Ç–æ—Ç —Ñ–æ–∫—É—Å. –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
    elif data == "confirm_problem_no":
        st["data"]["awaiting_confirm"] = True
        save_state(uid, INTENT_FREE, STEP_CONFIRM_PROBLEM, st["data"])
        bot.send_message(uid, "–ü–æ–ø—Ä–∞–≤—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ‚Äî –∫–∞–∫ —Ç—ã –±—ã –µ—ë –Ω–∞–∑–≤–∞–ª?")
    elif data == "resume_flow":
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        save_state(uid, st["intent"], st["step"], st["data"])
        next_prompt = {
            STEP_ERR_DESCR: "–û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?",
            STEP_MER_CTX: mer_prompt_for(STEP_MER_CTX),
            STEP_MER_EMO: mer_prompt_for(STEP_MER_EMO),
            STEP_MER_THO: mer_prompt_for(STEP_MER_THO),
            STEP_MER_BEH: mer_prompt_for(STEP_MER_BEH),
            STEP_GOAL: "–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å: —á—Ç–æ –¥–µ–ª–∞–µ—à—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?",
            STEP_TOTE_OPS: "–î–≤–∞-—Ç—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ –¥–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–æ–∫ (–∫–æ—Ä–æ—Ç–∫–æ, —Å–ø–∏—Å–∫–æ–º).",
            STEP_TOTE_TEST: "–ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –û–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π.",
            STEP_TOTE_EXIT: "–ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∂–µ—Ç ¬´–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª ‚Äî —á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å?"
        }.get(st["step"], "–ü—Ä–æ–¥–æ–ª–∂–∏–º.")
        bot.send_message(uid, next_prompt)
    elif data == "restart_flow":
        save_state(uid, INTENT_ERR, STEP_ERR_DESCR, {"history": []})
        bot.send_message(uid, "–û–∫–µ–π, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")

# ========= HTTP =========
def _now_iso(): return datetime.now(timezone.utc).isoformat()

@app.get("/")
def root():
    return jsonify({"ok": True, "time": _now_iso()})

@app.get("/version")
def version_api():
    return jsonify({"version": BOT_VERSION, "code_hash": get_code_version(), "status": "running", "timestamp": _now_iso()})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_SECRET:
        abort(401)
    if request.content_length and request.content_length > MAX_BODY:
        abort(413, description="Body too large")
    body = request.get_data()
    if not body:
        abort(400, description="Empty body")
    try:
        update = telebot.types.Update.de_json(body.decode("utf-8"))
        if update is None:
            log.error("Failed to parse update")
            abort(400, description="Invalid update")
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        log.error("Webhook processing error: %s", e)
        abort(500)

# ========= Init =========
try:
    init_db()
except Exception as e:
    log.error("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–∞—Å—å: %s", e)

if SET_WEBHOOK_FLAG:
    try:
        bot.remove_webhook(); time.sleep(1)
        bot.set_webhook(
            url=f"{PUBLIC_URL}/{WEBHOOK_PATH}",
            secret_token=TG_SECRET,
            allowed_updates=["message","callback_query"]
        )
        log.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ %s/%s", PUBLIC_URL, WEBHOOK_PATH)
    except Exception as e:
        log.error("Webhook setup error: %s", e)

if __name__ == "__main__":
    port = int(os.getenv("PORT","10000"))
    app.run(host="0.0.0.0", port=port)
