import os, json, time
from datetime import datetime
from flask import Flask, request, jsonify, abort
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy import create_engine, text
from openai import OpenAI

# === ENV ===
TOKEN            = os.getenv("TELEGRAM_TOKEN")
DATABASE_URL     = os.getenv("DATABASE_URL")
PUBLIC_URL       = os.getenv("PUBLIC_URL")                    # https://innertrade-bot.onrender.com
WEBHOOK_PATH     = os.getenv("WEBHOOK_PATH", "webhook")       # –Ω–∞–ø—Ä–∏–º–µ—Ä: wbhk_9t3x
TG_SECRET        = os.getenv("TG_WEBHOOK_SECRET")             # –¥–ª–∏–Ω–Ω–∞—è —Å–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL     = os.getenv("OPENAI_MODEL", "gpt-4o-mini")
OFFSCRIPT        = os.getenv("OFFSCRIPT_ENABLED", "true").lower() == "true"
APP_VERSION      = os.getenv("APP_VERSION", "2025-08-29")

if not TOKEN or not DATABASE_URL or not PUBLIC_URL or not TG_SECRET:
    raise RuntimeError("Missing required env: TELEGRAM_TOKEN, DATABASE_URL, PUBLIC_URL, TG_WEBHOOK_SECRET")

# === CORE ===
app   = Flask(__name__)
bot   = telebot.TeleBot(TOKEN, parse_mode="HTML", threaded=False)
eng   = create_engine(DATABASE_URL, pool_pre_ping=True)
oai   = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

MENU_BUTTONS = [
    ["üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"],
    ["üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏"],
    ["üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å"],
]

def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for row in MENU_BUTTONS:
        kb.add(*[KeyboardButton(x) for x in row])
    return kb

def db_exec(sql, params=None, fetch=False, one=False):
    with eng.begin() as conn:
        cur = conn.execute(text(sql), params or {})
        if fetch:
            rows = [dict(r._mapping) for r in cur.fetchall()]
            return rows[0] if (one and rows) else rows
        return None

# --- state helpers ---
def ensure_user(uid: int):
    db_exec("INSERT INTO users(user_id) VALUES(:u) ON CONFLICT(user_id) DO NOTHING", {"u": uid})

def get_state(uid: int):
    row = db_exec("SELECT intent, step, data FROM user_state WHERE user_id=:u", {"u": uid}, fetch=True, one=True)
    if not row:
        return {"intent": "idle", "step": "greet", "data": {}}
    return {"intent": row["intent"] or "idle", "step": row["step"] or "greet", "data": row["data"] or {}}

def set_state(uid: int, intent=None, step=None, data=None):
    cur = get_state(uid)
    if intent is None: intent = cur["intent"]
    if step   is None: step   = cur["step"]
    if data   is None: data   = cur["data"]
    db_exec("""
        INSERT INTO user_state(user_id,intent,step,data,updated_at)
        VALUES(:u,:i,:s,CAST(:d AS jsonb), now())
        ON CONFLICT(user_id) DO UPDATE SET intent=:i, step=:s, data=CAST(:d AS jsonb), updated_at=now()
    """, {"u": uid, "i": intent, "s": step, "d": json.dumps(data)})

# --- GPT helpers ---
SYS_FREE = (
"–¢—ã –∫–æ—É—á –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –û–±—â–∞–π—Å—è –∫—Ä–∞—Ç–∫–æ, –ø–æ-–¥–æ–±—Ä–æ–º—É, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ. "
"–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ü–∏—Ç–∏—Ä—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å–ª–æ–≤–Ω–æ ‚Äî –¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ñ—Ä–∞–∑ 1‚Äì2 —Å—Ç—Ä–æ–∫–∞–º–∏. "
"–ó–∞–¥–∞–π 1 —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ —É–∂–µ —Å–ª—ã—à–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞ "
"(–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–≤—Ö–æ–∂—É –¥–æ —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª), –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ—Ä–æ—Ç–∫–æ–º—É —Ä–∞–∑–±–æ—Ä—É. "
"–ù–µ –Ω–∞–∑—ã–≤–∞–π —Ç–µ—Ö–Ω–∏–∫–∏ (¬´–ú–µ—Ä—Å–µ–¥–µ—Å¬ª, TOTE) –≤—Å–ª—É—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π –Ω—É–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã. "
"–ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç ¬´—á—Ç–æ —Ç–∞–∫–æ–µ –ü–∞—Å–ø–æ—Ä—Ç/–ü–∞–Ω–µ–ª—å¬ª, –¥–∞–π –ø—Ä–æ—Å—Ç–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤ 2‚Äì3 —Å—Ç—Ä–æ–∫–∏."
)

def gpt_reply(messages):
    if not oai:  # –µ—Å–ª–∏ GPT –æ—Ç–∫–ª—é—á–µ–Ω, –æ—Ç–≤–µ—á–∞–µ–º –≤—Ä—É—á–Ω—É—é-–º–∏–Ω–∏–º—É–º–æ–º
        return "–ü–æ–Ω—è–ª. –†–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë —á—É—Ç—å-—á—É—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ü–µ–ø–ª—è–µ—Ç?"
    r = oai.chat.completions.create(
        model=OPENAI_MODEL,
        messages=messages,
        temperature=0.3,
        max_tokens=300,
    )
    return r.choices[0].message.content.strip()

# --- tiny heuristics ---
BEHAVIOR_MARKERS = ["–≤—Ö–æ–∂—É", "–≤—Ö–æ–¥", "–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø", "–ø–µ—Ä–µ–Ω–æ—à—É —Å—Ç–æ–ø", "–∑–∞–∫—Ä—ã–≤–∞—é", "—É—Å—Ä–µ–¥–Ω—è", "—Å—Ç–∞–≤–ª—é –±–µ–∑—É–±—ã—Ç–æ–∫", "—Ñ–∏–∫—Å–∏—Ä—É—é"]
def looks_like_behavior(text: str) -> bool:
    t = text.lower()
    return any(m in t for m in BEHAVIOR_MARKERS)

def summarize_problem(text: str) -> str:
    # –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π ¬´–ø–µ—Ä–µ—Ñ—Ä–∞–∑ –±–µ–∑ —Ü–∏—Ç–∞—Ç—ã¬ª
    if oai:
        msg = [
            {"role":"system","content":"–ö—Ä–∞—Ç–∫–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—É 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º, –±–µ–∑ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ —Å—É—Ç–∏."},
            {"role":"user","content":text}
        ]
        try:
            r = oai.chat.completions.create(model=OPENAI_MODEL, messages=msg, temperature=0.1, max_tokens=60)
            return r.choices[0].message.content.strip()
        except Exception:
            pass
    # fallback
    return "–ù–∞—Ä—É—à–∞—é –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏ (–¥–µ—Ä–≥–∞—é —Å—Ç–æ–ø/–≤—ã—Ö–æ–¥ —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏)."

# --- flows ---
def ask_intro(uid):
    set_state(uid, intent="greet", step="ask_style", data={"address":"—Ç—ã"})
    kb = main_menu()
    return "üëã –ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏, —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ. –ò–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.", kb

def confirm_error(uid, problem_text):
    paraphrase = summarize_problem(problem_text)
    set_state(uid, intent="error_flow", step="confirm_error", data={"error_text": paraphrase})
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –î–∞", callback_data="err_ok"),
           InlineKeyboardButton("‚úçÔ∏è –ü—Ä–∞–≤–∏—Ç—å", callback_data="err_edit"))
    bot_msg = f"–ó–∞—Ñ–∏–∫—Å–∏—Ä—É—é —Ç–∞–∫: <b>{paraphrase}</b>\n–ü–æ–¥—Ö–æ–¥–∏—Ç?"
    return bot_msg, kb

def proceed_error_questions(uid):
    set_state(uid, intent="error_flow", step="ask_context")
    return "–û–∫, –∫–æ—Ä–æ—Ç–∫–æ –ø–æ —à–∞–≥–∞–º.\n1) –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)", None

def answer_passport_question():
    return ("<b>–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞</b> ‚Äî —ç—Ç–æ —Ç–≤–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ñ–∏–ª—å: —Ü–µ–ª–∏, —Ä—ã–Ω–∫–∏/–¢–§, —Å—Ç–∏–ª—å, —Ä–∏—Å–∫-–ª–∏–º–∏—Ç—ã, "
            "—Ç–æ–ø-–æ—à–∏–±–∫–∏, –∞—Ä—Ö–µ—Ç–∏–ø/—Ä–æ–ª–∏ –∏ —Ä–∞–±–æ—á–∏–µ —Ä–∏—Ç—É–∞–ª—ã. –ï–≥–æ —Å–æ–±–∏—Ä–∞–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ –º–µ—Ä–µ —Ä–∞–±–æ—Ç—ã.")

def answer_week_panel():
    return ("<b>–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏</b> ‚Äî —Ç–≤–æ–π –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å: 1 —É–∑–µ–ª –≤–Ω–∏–º–∞–Ω–∏—è, 1‚Äì2 —Ü–µ–ª–∏, –ª–∏–º–∏—Ç—ã, –∫–æ—Ä–æ—Ç–∫–∏–µ —á–µ–∫-–∏–Ω—ã "
            "—É—Ç—Ä–æ–º/–≤–µ—á–µ—Ä–æ–º –∏ –º–∏–Ω–∏-—Ä–µ—Ç—Ä–æ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏.")

# --- routing helpers ---
def route_free(uid, text):
    # Q&A –ø–æ —Å–ª–æ–≤–∞—Ä—é, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞—Ç—å –ø–æ—Ç–æ–∫
    low = text.lower().strip()
    if "—á—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—Å–ø–æ—Ä—Ç" in low or low == "–ø–∞—Å–ø–æ—Ä—Ç?":
        return answer_passport_question()
    if "—á—Ç–æ —Ç–∞–∫–æ–µ –ø–∞–Ω–µ–ª" in low or "–ø–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏" in low:
        return answer_week_panel()

    # OFFSCRIPT: –∂–∏–≤–æ–π –æ—Ç–≤–µ—Ç + –º—è–≥–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —à–∞–≥–∞
    msgs = [{"role":"system","content":SYS_FREE},
            {"role":"user","content":text}]
    reply = gpt_reply(msgs)

    # –µ—Å–ª–∏ —É–∂–µ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî —Å—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É
    if looks_like_behavior(text):
        m, kb = confirm_error(uid, text)
        bot.send_message(uid, reply)
        bot.send_message(uid, m, reply_markup=kb)
        return None
    return reply

# === COMMANDS ===
@bot.message_handler(commands=["ping"])
def ping(m):
    bot.reply_to(m, "pong")

@bot.message_handler(commands=["status"])
def status(m):
    s = get_state(m.from_user.id)
    bot.reply_to(m, json.dumps({
        "ok": True,
        "time": datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ"),
        "intent": s["intent"],
        "step": s["step"],
        "db": "ok"
    }, ensure_ascii=False, indent=2))

@bot.message_handler(commands=["reset"])
def reset(m):
    uid = m.from_user.id
    ensure_user(uid)
    set_state(uid, intent="idle", step="greet", data={})
    txt, kb = ask_intro(uid)
    bot.send_message(uid, txt, reply_markup=kb)

# === BUTTONS (main menu) ===
@bot.message_handler(func=lambda msg: msg.text in [row for rows in MENU_BUTTONS for row in rows])
def menu_click(m):
    uid = m.from_user.id
    ensure_user(uid)
    txt = m.text

    if txt == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞":
        # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ data ‚Äî –Ω–µ –ø—Ä–æ—Å–∏–º –∑–∞–Ω–æ–≤–æ
        st = get_state(uid)
        err = (st["data"] or {}).get("error_text")
        if err:
            bot.send_message(uid, f"–í–æ–∑—å–º—ë–º —Ç–µ–∫—É—â—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É: <b>{err}</b>")
            msg, _ = proceed_error_questions(uid)
            bot.send_message(uid, msg)
        else:
            set_state(uid, intent="error_flow", step="confirm_or_collect", data={})
            bot.send_message(uid, "–ö–æ—Ä–æ—Ç–∫–æ: –æ–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ç—Ä—É–¥–Ω–æ—Å—Ç—å 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ (–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞).")

    elif txt == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é":
        set_state(uid, intent="strategy_flow", step="start")
        bot.send_message(uid, "–°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç: —Ä—ã–Ω–æ–∫/–¢–§ ‚Üí –≤—Ö–æ–¥ ‚Üí —Å—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ ‚Üí —Ä–∏—Å–∫. –ì–æ—Ç–æ–≤?")
    elif txt == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç":
        set_state(uid, intent="passport_flow", step="start")
        bot.send_message(uid, answer_passport_question())
    elif txt == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏":
        set_state(uid, intent="week_panel", step="start")
        bot.send_message(uid, answer_week_panel())
    elif txt == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ":
        set_state(uid, intent="emergency", step="stop")
        bot.send_message(uid,
            "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
            "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—É")
    elif txt == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å":
        set_state(uid, intent="idle", step="suggest_route")
        bot.send_message(uid, "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫: 1) –ü–∞—Å–ø–æ—Ä—Ç, 2) –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏, 3) –°–∫–µ–ª–µ—Ç –¢–°.\n–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?")
    else:
        bot.send_message(uid, "–ü—Ä–∏–Ω—è–ª.")

# === CALLBACKS (inline) ===
@bot.callback_query_handler(func=lambda c: c.data in ["err_ok","err_edit"])
def cb_err_confirm(c):
    uid = c.from_user.id
    st = get_state(uid)
    if c.data == "err_ok":
        msg, _ = proceed_error_questions(uid)
        bot.edit_message_text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏. –ü–æ–≥–Ω–∞–ª–∏ –ø–æ —à–∞–≥–∞–º.", chat_id=uid, message_id=c.message.message_id)
        bot.send_message(uid, msg)
    else:
        set_state(uid, intent="error_flow", step="confirm_or_collect")
        bot.edit_message_text("–û–∫–µ–π, –ø–æ–ø—Ä–∞–≤—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.", chat_id=uid, message_id=c.message.message_id)

# === TEXT HANDLER ===
@bot.message_handler(content_types=["text"])
def on_text(m):
    uid = m.from_user.id
    txt = (m.text or "").strip()
    ensure_user(uid)
    st = get_state(uid)
    intent, step, data = st["intent"], st["step"], st["data"]

    # –±—ã—Å—Ç—Ä—ã–µ FAQ —Ñ—Ä–∞–∑—ã
    low = txt.lower()
    if low in ["—á—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—Å–ø–æ—Ä—Ç","–ø–∞—Å–ø–æ—Ä—Ç —á—Ç–æ —ç—Ç–æ","—á—Ç–æ –∑–∞ –ø–∞—Å–ø–æ—Ä—Ç"]:
        bot.reply_to(m, answer_passport_question()); return
    if "–ø–∞–Ω–µ–ª" in low and "–Ω–µ–¥–µ–ª" in low and "—á—Ç–æ" in low:
        bot.reply_to(m, answer_week_panel()); return

    # --- ERROR FLOW ---
    if intent == "error_flow":
        if step in ["confirm_or_collect", "confirm_error"]:
            # –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º —Å—Ä–∞–∑—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
            if looks_like_behavior(txt):
                msg, kb = confirm_error(uid, txt)
                bot.send_message(uid, msg, reply_markup=kb)
            else:
                # –º—è–≥–∫–æ –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞–µ–º –∫ –ø–æ–≤–µ–¥–µ–Ω–∏—é
                bot.send_message(uid, "–ü–æ–ø—Ä–æ–±—É–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –¥–µ–π—Å—Ç–≤–∏–µ (–≥–ª–∞–≥–æ–ª): —á—Ç–æ —Ç–æ—á–Ω–µ–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?")
            return

        if step == "ask_context":
            data["context"] = txt
            set_state(uid, step="ask_emotions", data=data)
            bot.send_message(uid, "2) –ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")
            return
        if step == "ask_emotions":
            data["emotions"] = txt
            set_state(uid, step="ask_thoughts", data=data)
            bot.send_message(uid, "3) –ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç? (1‚Äì2 —Ñ—Ä–∞–∑—ã)")
            return
        if step == "ask_thoughts":
            data["thoughts"] = txt
            set_state(uid, step="ask_behavior", data=data)
            bot.send_message(uid, "4) –ß—Ç–æ —Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? (–≥–ª–∞–≥–æ–ª–∞–º–∏, 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
            return
        if step == "ask_behavior":
            data["behavior"] = txt
            # —Ä–µ–∑—é–º–µ
            err = data.get("error_text") or summarize_problem(
                f"{data.get('context','')}. {data.get('emotions','')}. {data.get('thoughts','')}. {txt}"
            )
            data["error_text"] = err
            set_state(uid, step="goal", data=data)
            bot.send_message(uid, f"–í–∏–∂—É –∫–∞—Ä—Ç–∏–Ω—É.\n<b>–§–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞:</b> {err}\n–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º ‚Äî —á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?")
            return
        if step == "goal":
            data["goal"] = txt
            set_state(uid, step="ops", data=data)
            bot.send_message(uid, "–ö–∞–∫–∏–µ 2‚Äì3 —à–∞–≥–∞ –ø–æ–º–æ–≥—É—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è —ç—Ç–æ–π —Ü–µ–ª–∏ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–∫–∞—Ö?")
            return
        if step == "ops":
            data["ops"] = txt
            set_state(uid, step="done", data=data)
            bot.send_message(uid, "–ü—Ä–∏–Ω—è—Ç–æ. –°–æ—Ö—Ä–∞–Ω–∏–ª. –ì–æ—Ç–æ–≤–æ ‚úÖ\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –¥–æ–±–∞–≤–∏–º —ç—Ç–æ –≤ –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –ø–æ–∑–∂–µ.")
            return

    # --- STRATEGY FLOW (–∫—Ä–∞—Ç–∫–∏–π –∫–∞—Ä–∫–∞—Å) ---
    if intent == "strategy_flow":
        if step == "start":
            set_state(uid, step="markets")
            bot.send_message(uid, "–®–∞–≥ 1. –†—ã–Ω–æ–∫/–¢–§: —á—Ç–æ —Ç–æ—Ä–≥—É–µ—à—å –∏ –Ω–∞ –∫–∞–∫–∏—Ö –¢–§?")
            return
        # (–¥–∞–ª—å—à–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –Ω–∞—Ä–∞—â–∏–≤–∞–π —à–∞–≥–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
    
    # --- FREE DIALOG / OFFSCRIPT ---
    # –µ—Å–ª–∏ –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —à–∞–≥–µ ‚Äî –∂–∏–≤–æ–π –æ—Ç–≤–µ—Ç –∏ –º—è–≥–∫–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞
    if OFFSCRIPT:
        reply = route_free(uid, txt)
        if reply:
            bot.send_message(uid, reply, reply_markup=main_menu())
    else:
        bot.send_message(uid, "–ü—Ä–∏–Ω—è–ª. –ß—Ç–æ–±—ã –±—ã–ª–æ –±—ã—Å—Ç—Ä–µ–µ, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /menu.", reply_markup=main_menu())

# === FLASK (webhook) ===
MAX_BODY = 1_000_000

@app.get("/health")
def health():
    return jsonify({"status":"ok","time": datetime.utcnow().isoformat()})

@app.get("/status")
def http_status():
    return jsonify({"ok":True,"version":APP_VERSION,"time": datetime.utcnow().isoformat()})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_SECRET:
        abort(401)
    if request.content_length and request.content_length > MAX_BODY:
        abort(413)
    update = request.get_data().decode("utf-8")
    bot.process_new_updates([telebot.types.Update.de_json(update)])
    return "OK"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
