import os
import logging
from datetime import date, timedelta
from typing import Dict, Any

import telebot
from telebot import types

from openai import OpenAI
from flask import Flask
from sqlalchemy import (
    create_engine, Integer, String, Date, Text, JSON,
    UniqueConstraint, select
)
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, Session

# ========= ENV =========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY     = os.getenv("OPENAI_API_KEY")
DATABASE_URL   = os.getenv("DATABASE_URL")

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets")
if not OPENAI_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets")
if not DATABASE_URL:
    raise RuntimeError("–ù–µ—Ç DATABASE_URL –≤ Secrets")

# ========= LOGS =========
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ========= BOT / GPT =========
bot    = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")
client = OpenAI(api_key=OPENAI_KEY)

# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–Ω–∏–º–µ–º webhook
try:
    bot.remove_webhook()
    logging.info("Webhook removed (ok)")
except Exception as e:
    logging.warning(f"Webhook remove warn: {e}")

# ========= KEEPALIVE (Render / UptimeRobot) =========
app = Flask(__name__)

@app.route("/")
def home():
    return "Innertrade bot is alive"

@app.route("/health")
def health():
    return "pong"

# ========= DB (SQLAlchemy 2.0) =========
class Base(DeclarativeBase):
    pass

engine = create_engine(DATABASE_URL, pool_pre_ping=True)

class UserProfile(Base):
    __tablename__ = "user_profile"
    id: Mapped[int]        = mapped_column(Integer, primary_key=True)
    tg_id: Mapped[int]     = mapped_column(Integer, unique=True, index=True)
    name: Mapped[str]      = mapped_column(String(128), default="")
    created: Mapped[str]   = mapped_column(String(32), default="")

class Passport(Base):
    """
    –ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞: —Ö—Ä–∞–Ω–∏–º –≤—Å—ë –≤ JSON –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã.
    """
    __tablename__ = "passport"
    id: Mapped[int]    = mapped_column(Integer, primary_key=True)
    tg_id: Mapped[int] = mapped_column(Integer, index=True)
    data: Mapped[dict] = mapped_column(JSON, default=dict)
    __table_args__ = (UniqueConstraint("tg_id", name="uq_passport_tg_id"),)

class WeeklyPanel(Base):
    """
    –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏: –æ–¥–∏–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ä–µ–∑ –Ω–∞ –Ω–µ–¥–µ–ª—é (week_start - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫).
    """
    __tablename__ = "weekly_panel"
    id: Mapped[int]          = mapped_column(Integer, primary_key=True)
    tg_id: Mapped[int]       = mapped_column(Integer, index=True)
    week_start: Mapped[date] = mapped_column(Date, index=True)
    focus: Mapped[str]       = mapped_column(Text, default="")
    plan: Mapped[str]        = mapped_column(Text, default="")
    limits: Mapped[str]      = mapped_column(Text, default="")
    retro: Mapped[str]       = mapped_column(Text, default="")
    __table_args__ = (UniqueConstraint("tg_id", "week_start", name="uq_week_tg"),)

Base.metadata.create_all(engine)

# ========= MEMORY (–≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞) =========
history: Dict[int, list] = {}  # –¥–∏–∞–ª–æ–≥ —Å GPT
state: Dict[int, Dict[str, Any]] = {}  # –ø—Ä–æ—Å—Ç–∞—è FSM –¥–ª—è ¬´–ø–∞—Å–ø–æ—Ä—Ç¬ª, ¬´–ø–∞–Ω–µ–ª—å¬ª, ¬´–æ—à–∏–±–∫–∞¬ª

def gpt_reply(uid: int, text: str) -> str:
    msgs = history.setdefault(uid, [])
    msgs.append({"role": "user", "content": text})
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.5,
        messages=msgs
    )
    reply = (resp.choices[0].message.content or "").strip()
    msgs.append({"role": "assistant", "content": reply})
    return reply

def main_menu() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(
        types.KeyboardButton("üß© –û—à–∏–±–∫–∞"),
        types.KeyboardButton("üß† –°—Ç—Ä–∞—Ç–µ–≥–∏—è"),
        types.KeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º"),
    )
    kb.row(
        types.KeyboardButton("üìá –ü–∞—Å–ø–æ—Ä—Ç"),
        types.KeyboardButton("üìÜ –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏"),
        types.KeyboardButton("üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"),
    )
    kb.row(
        types.KeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å"),
        types.KeyboardButton("/ping"),
    )
    return kb

def week_monday(d: date) -> date:
    return d - timedelta(days=d.weekday())  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏

# ========= HANDLERS =========
@bot.message_handler(commands=["start"])
def cmd_start(m):
    uid = m.from_user.id
    history[uid] = []
    state.pop(uid, None)
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ <b>Innertrade</b>.\n"
        "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["reset"])
def cmd_reset(m):
    uid = m.from_user.id
    history[uid] = []
    state.pop(uid, None)
    bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.", reply_markup=main_menu())

# ===== –ö–ù–û–ü–ö–ò (–∏–Ω—Ç–µ–Ω—Ç—ã) =====
@bot.message_handler(func=lambda x: (x.text or "").strip() in {
    "üß© –û—à–∏–±–∫–∞","üß† –°—Ç—Ä–∞—Ç–µ–≥–∏—è","üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º",
    "üìá –ü–∞—Å–ø–æ—Ä—Ç","üìÜ –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏","üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã","‚ôªÔ∏è –°–±—Ä–æ—Å"
})
def on_menu(m):
    uid = m.from_user.id
    t = (m.text or "").strip()

    # –°–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ–π FSM
    if t == "‚ôªÔ∏è –°–±—Ä–æ—Å":
        history[uid] = []
        state.pop(uid, None)
        bot.send_message(m.chat.id, "–û–∫, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu())
        return

    if t == "üìá –ü–∞—Å–ø–æ—Ä—Ç":
        # —Å—Ç–∞—Ä—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞ (6 –≤–æ–ø—Ä–æ—Å–æ–≤)
        state[uid] = {"mode": "passport", "step": 1, "data": {}}
        bot.send_message(m.chat.id, "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞.\n1/6) –ù–∞ –∫–∞–∫–æ–º —Ä—ã–Ω–∫–µ/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å? (–∞–∫—Ü–∏–∏ –°–®–ê, EURUSD, BTC, —Ñ—å—é—á–µ—Ä—Å—ã‚Ä¶)")
        return

    if t == "üìÜ –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏":
        # –∑–∞–≤–µ–¥—ë–º/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        state[uid] = {"mode": "weekly", "step": 1, "buf": {}}
        bot.send_message(m.chat.id,
            "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏:\n1/4) –ì–ª–∞–≤–Ω—ã–π —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ (–æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º).")
        return

    if t == "üß© –û—à–∏–±–∫–∞":
        state[uid] = {"mode": "error", "step": 1, "buf": {}}
        bot.send_message(m.chat.id, "–†–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏ (mini MERCEDES+TOTE).\n1) –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.")
        return

    if t == "üß† –°—Ç—Ä–∞—Ç–µ–≥–∏—è":
        # –ª—ë–≥–∫–∏–π –≤—Ö–æ–¥ –≤ –ú2: —Å–ø—Ä–æ—Å–∏–º, —á–µ–≥–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—Ç
        state[uid] = {"mode": "ts", "step": 1, "buf": {}}
        bot.send_message(m.chat.id,
            "–û–∫, —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–µ–π—á–∞—Å?\n"
            "1) –°–æ–±—Ä–∞—Ç—å —Å –Ω—É–ª—è\n2) –ü–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å/–ø–æ–¥–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é\n3) –ù–µ –∑–Ω–∞—é —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
        return

    if t == "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º":
        # —Å–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç
        state.pop(uid, None)
        bot.send_message(m.chat.id, "–û —á—ë–º –ø–æ–≥–æ–≤–æ—Ä–∏–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞? –ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.")
        return

    if t == "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
        bot.send_message(m.chat.id,
            "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
            "‚Ä¢ –¢–µ–æ—Ä–∏—è MERCEDES, TOTE\n"
            "‚Ä¢ –ê—Ä—Ö–µ—Ç–∏–ø—ã/—Ä–æ–ª–∏\n"
            "‚Ä¢ –ë–∞–∑–∞ –ø–æ –¢–°, —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\n"
            "–°–∫–∞–∂–∏, —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º: –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´MERCEDES¬ª –∏–ª–∏ ¬´—Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç¬ª.")
        return

# ===== FSM: –ü–ê–°–ü–û–†–¢ =====
@bot.message_handler(func=lambda m: state.get(m.from_user.id, {}).get("mode") == "passport")
def passport_flow(m):
    uid = m.from_user.id
    st = state[uid]
    step = st["step"]
    data = st["data"]

    if step == 1:
        data["market"] = m.text.strip()
        st["step"] = 2
        bot.send_message(m.chat.id, "2/6) –¢–≤–æ–π —Å—Ç–∏–ª—å: —Å–∫–∞–ª—å–ø/–∏–Ω—Ç—Ä–∞–¥–µ–π/—Å–≤–∏–Ω–≥/–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–æ?")
        return

    if step == 2:
        data["style"] = m.text.strip()
        st["step"] = 3
        bot.send_message(m.chat.id, "3/6) –í—Ä–µ–º—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Å–µ—Å—Å–∏–∏/—á–∞—Å—ã)?")
        return

    if step == 3:
        data["time"] = m.text.strip()
        st["step"] = 4
        bot.send_message(m.chat.id, "4/6) –†–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å: —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (% –¥–µ–ø–æ–∑–∏—Ç–∞)?")
        return

    if step == 4:
        data["risk"] = m.text.strip()
        st["step"] = 5
        bot.send_message(m.chat.id, "5/6) –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ (3 —à—Ç. —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)?")
        return

    if step == 5:
        data["errors"] = m.text.strip()
        st["step"] = 6
        bot.send_message(m.chat.id, "6/6) –†–∏—Ç—É–∞–ª—ã/–ø—Ä–∏–≤—ã—á–∫–∏ (–¥–æ/–≤–æ –≤—Ä–µ–º—è/–ø–æ—Å–ª–µ —Å–µ—Å—Å–∏–∏)?")
        return

    if step == 6:
        data["rituals"] = m.text.strip()
        # –°–æ—Ö—Ä–∞–Ω–∏–º –≤ –ë–î (upsert)
        with Session(engine) as s:
            row = s.scalar(select(Passport).where(Passport.tg_id == uid))
            if not row:
                row = Passport(tg_id=uid, data=data)
                s.add(row)
            else:
                row.data = data
            s.commit()
        state.pop(uid, None)
        bot.send_message(m.chat.id, "–ì–æ—Ç–æ–≤–æ ‚úÖ –ü–∞—Å–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=main_menu())
        return

# ===== FSM: –ü–ê–ù–ï–õ–¨ –ù–ï–î–ï–õ–ò =====
@bot.message_handler(func=lambda m: state.get(m.from_user.id, {}).get("mode") == "weekly")
def weekly_flow(m):
    uid = m.from_user.id
    st = state[uid]
    step = st["step"]
    buf = st["buf"]

    if step == 1:
        buf["focus"] = m.text.strip()
        st["step"] = 2
        bot.send_message(m.chat.id, "2/4) –ü–ª–∞–Ω –Ω–µ–¥–µ–ª–∏ (3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤, –º–æ–∂–Ω–æ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ ¬´;¬ª).")
        return

    if step == 2:
        buf["plan"] = m.text.strip()
        st["step"] = 3
        bot.send_message(m.chat.id, "3/4) –õ–∏–º–∏—Ç—ã/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–≤–Ω–µ —Ä—ã–Ω–∫–∞, —Ä–∏—Å–∫, –≤—Ä–µ–º—è).")
        return

    if step == 3:
        buf["limits"] = m.text.strip()
        st["step"] = 4
        bot.send_message(m.chat.id, "4/4) –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).")
        return

    if step == 4:
        buf["retro"] = m.text.strip()
        wk = week_monday(date.today())
        with Session(engine) as s:
            row = s.scalar(select(WeeklyPanel).where(
                (WeeklyPanel.tg_id == uid) & (WeeklyPanel.week_start == wk)
            ))
            if not row:
                row = WeeklyPanel(
                    tg_id=uid, week_start=wk,
                    focus=buf.get("focus",""), plan=buf.get("plan",""),
                    limits=buf.get("limits",""), retro=buf.get("retro","")
                )
                s.add(row)
            else:
                row.focus  = buf.get("focus","")
                row.plan   = buf.get("plan","")
                row.limits = buf.get("limits","")
                row.retro  = buf.get("retro","")
            s.commit()
        state.pop(uid, None)
        bot.send_message(
            m.chat.id,
            "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n"
            f"‚Ä¢ –§–æ–∫—É—Å: {buf['focus']}\n"
            f"‚Ä¢ –ü–ª–∞–Ω: {buf['plan']}\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç—ã: {buf['limits']}\n"
            f"‚Ä¢ –†–µ—Ç—Ä–æ: {buf['retro']}",
            reply_markup=main_menu()
        )
        return

# ===== FSM: –û–®–ò–ë–ö–ê (–º–∏–Ω–∏ MERCEDES+TOTE) =====
@bot.message_handler(func=lambda m: state.get(m.from_user.id, {}).get("mode") == "error")
def error_flow(m):
    uid = m.from_user.id
    st = state[uid]
    step = st["step"]
    buf  = st["buf"]

    if step == 1:
        buf["desc"] = m.text.strip()
        st["step"] = 2
        bot.send_message(m.chat.id, "2) –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–æ–≤–∞–ª–æ (–∫–æ–Ω—Ç–µ–∫—Å—Ç/—Ç—Ä–∏–≥–≥–µ—Ä)?")
        return

    if step == 2:
        buf["trigger"] = m.text.strip()
        st["step"] = 3
        bot.send_message(m.chat.id, "3) –ú—ã—Å–ª—å/—ç–º–æ—Ü–∏—è/—Ä–µ–∞–∫—Ü–∏—è –≤ –º–æ–º–µ–Ω—Ç–µ (–∫–æ—Ä–æ—Ç–∫–æ).")
        return

    if step == 3:
        buf["mercedes"] = m.text.strip()
        st["step"] = 4
        bot.send_message(m.chat.id, "4) –ñ–µ–ª–∞–µ–º—ã–π –Ω–æ–≤—ã–π —à–∞–≥ (—á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –∏–Ω–∞—á–µ)?")
        return

    if step == 4:
        buf["next"] = m.text.strip()
        # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∫–∞–∫ —á–∞—Å—Ç—å –ø–∞—Å–ø–æ—Ä—Ç–∞ (errors_log) ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        try:
            with Session(engine) as s:
                row = s.scalar(select(Passport).where(Passport.tg_id == uid))
                if not row:
                    row = Passport(tg_id=uid, data={})
                    s.add(row)
                    s.flush()
                data = row.data or {}
                log = data.get("errors_log", [])
                log.append(buf)
                data["errors_log"] = log
                row.data = data
                s.commit()
        except Exception as e:
            logging.warning(f"Save error log warn: {e}")

        state.pop(uid, None)
        bot.send_message(
            m.chat.id,
            "–ì–æ—Ç–æ–≤–æ ‚úÖ –ö–æ—Ä–æ—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n"
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî —Å–∫–∞–∂–∏ ¬´–µ—â—ë –æ—à–∏–±–∫–∞¬ª –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –º–µ–Ω—é.",
            reply_markup=main_menu()
        )
        return

# ===== FSM: –°–¢–†–ê–¢–ï–ì–ò–Ø (–≤—Ö–æ–¥ –≤ –ú–æ–¥—É–ª—å 2) =====
@bot.message_handler(func=lambda m: state.get(m.from_user.id, {}).get("mode") == "ts")
def ts_flow(m):
    uid = m.from_user.id
    st  = state[uid]
    step = st["step"]
    buf  = st["buf"]

    if step == 1:
        choice = (m.text or "").strip()
        buf["choice"] = choice
        st["step"] = 2
        bot.send_message(
            m.chat.id,
            "–û–∫. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –Ω–∞–∑–æ–≤–∏:\n"
            "‚Ä¢ —Ä—ã–Ω–æ–∫/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n‚Ä¢ —Ç–∞–π–º—Ñ—Ä–µ–π–º\n‚Ä¢ –±–∞–∑–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–±–æ–π/–æ—Ç–∫–∞—Ç/–¥–∏–∞–ø–∞–∑–æ–Ω)\n\n"
            "–ú–æ–∂–Ω–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π."
        )
        return

    if step == 2:
        buf["seed"] = m.text.strip()
        state.pop(uid, None)
        # –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ –ø–æ–∫–∞ –æ—Ç–¥–∞–¥–∏–º –≤ GPT ‚Äî –ø–æ–∑–∂–µ –ø–æ–¥–º–µ–Ω–∏–º –æ—Ç–≤–µ—Ç –Ω–∞ —à–∞–±–ª–æ–Ω –ú2.
        answer = gpt_reply(uid,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {buf}. "
            "–°–æ–±–µ—Ä–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –¢–°: –≤—Ö–æ–¥/—Å—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥/—Ä–∏—Å–∫ (–ø—É–ª–µ–≤–µ—Ä—Å). "
            "–í—ã–≤–µ–¥–∏ —Å–ø–∏—Å–∫–æ–º –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ."
        )
        bot.send_message(m.chat.id, answer, reply_markup=main_menu())
        return

# ===== –§–û–õ–ë–≠–ö: —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç =====
@bot.message_handler(func=lambda _: True)
def any_text(m):
    uid = m.from_user.id
    # –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫—É —É–∂–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—è—Ç FSM-—Ö—ç–Ω–¥–ª–µ—Ä—ã –≤—ã—à–µ
    # —Å—é–¥–∞ –ø–æ–ø–∞–¥—ë—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π FSM
    try:
        reply = gpt_reply(uid, m.text or "")
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    # –æ—Ç–≤–µ—á–∞–µ–º –±–µ–∑ reply_to (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´—Å—Å—ã–ª–∫–∏¬ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    bot.send_message(m.chat.id, reply)

if __name__ == "__main__":
    logging.info("Starting keepalive web server‚Ä¶")
    # –ù–∞ Render –ø–æ—Ä—Ç –∑–∞–¥–∞—ë—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π PORT
    port = int(os.getenv("PORT", "10000"))
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    from threading import Thread
    Thread(target=lambda: app.run(host="0.0.0.0", port=port, debug=False), daemon=True).start()

    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
