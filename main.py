# main.py ‚Äî Innertrade Kai Mentor Bot
# –í–µ—Ä—Å–∏—è: 2025-10-18 (coach-struct v9.0)
# –ö–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏:
# - "–ñ–∏–≤–æ–π" –∫–æ—É—á-–¥–≤–∏–≥–∞—Ç–µ–ª—å: GPT –≤–µ–¥—ë—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Å–æ–∑–Ω–∞–Ω–∏—è, –∞ –Ω–µ —Å—á—ë—Ç—á–∏–∫ —à–∞–≥–æ–≤.
# - –§–∞–∑—ã: calibrate ‚Üí reflect ‚Üí structure ‚Üí integrate. GPT —Å–∞–º –ø–æ–º–µ—á–∞–µ—Ç —Ñ–∞–∑—É/—Ñ–æ–∫—É—Å –≤ JSON.
# - –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã/–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
# - –ú—è–≥–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏, ¬´—Ç—ã/–≤—ã¬ª, –∞–Ω—Ç–∏-—ç—Ö–æ, –∞–Ω—Ç–∏-—à–∞–±–ª–æ–Ω—ã.
# - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: SQLAlchemy 2.x, psycopg 3, OpenAI 1.x, Flask 3.x, pyTelegramBotAPI 4.15.x
# - –ë–µ–∑ make_interval –≤ SQL. –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –ø—Ä–µ–∂–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å. –æ—à–∏–±–∫–∏ (–≤ —Ç.—á. –∫–∞–≤—ã—á–∫–∏).

import os
import json
import time
import logging
import threading
import hashlib
import re
from datetime import datetime, timezone, timedelta
from typing import Any, Dict, Optional, List
from difflib import SequenceMatcher

import requests
from flask import Flask, request, abort, jsonify
from sqlalchemy import create_engine, text
from sqlalchemy.pool import QueuePool
import telebot
from telebot import types
from openai import OpenAI

# ========= Version =========
def _code_hash():
    try:
        with open(__file__, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()[:8]
    except Exception:
        return "unknown"

BOT_VERSION = f"2025-10-18-{_code_hash()}"

# ========= ENV =========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
PUBLIC_URL     = os.getenv("PUBLIC_URL", "").strip()
WEBHOOK_PATH   = os.getenv("WEBHOOK_PATH", "webhook").strip()
TG_SECRET      = os.getenv("TG_WEBHOOK_SECRET", "").strip()

DATABASE_URL   = os.getenv("DATABASE_URL", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
OPENAI_MODEL   = os.getenv("OPENAI_MODEL", "gpt-4o-mini").strip()

OFFSCRIPT_ENABLED = os.getenv("OFFSCRIPT_ENABLED", "true").lower() == "true"
SET_WEBHOOK_FLAG  = os.getenv("SET_WEBHOOK", "false").lower() == "true"
LOG_LEVEL         = os.getenv("LOG_LEVEL", "INFO").upper()
MAX_BODY          = int(os.getenv("MAX_BODY", "1000000"))

# Idle/Reminder –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
IDLE_MINUTES_REMIND   = int(os.getenv("IDLE_MINUTES_REMIND", "60"))
IDLE_MINUTES_RESET    = int(os.getenv("IDLE_MINUTES_RESET", "240"))
REMINDERS_ENABLED     = os.getenv("REMINDERS_ENABLED", "true").lower() == "true"

HIST_LIMIT = 16  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Ä–µ–ø–ª–∏–∫

# ========= Guards =========
missing_env = []
for k in ["TELEGRAM_TOKEN", "PUBLIC_URL", "WEBHOOK_PATH", "DATABASE_URL", "TG_SECRET"]:
    if not globals()[k]:
        missing_env.append(k)
if missing_env:
    raise RuntimeError(f"ENV variables missing: {', '.join(missing_env)}")

# ========= Logging =========
logging.basicConfig(level=LOG_LEVEL, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
log = logging.getLogger("kai-mentor")
log.info(f"Starting bot version: {BOT_VERSION}")

# ========= Intents/Steps =========
INTENT_GREET = "greet"
INTENT_FREE  = "free"     # –∫–æ—É—á-—Å–ª–æ–π, —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥
INTENT_ERR   = "error"    # —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Ä–∞–∑–±–æ—Ä (MERCEDES/TOTE)
INTENT_DONE  = "done"

STEP_ASK_STYLE  = "ask_style"
STEP_FREE_INTRO = "free_intro"
STEP_ERR_DESCR  = "err_describe"
STEP_MER_CTX    = "mer_context"
STEP_MER_EMO    = "mer_emotions"
STEP_MER_THO    = "mer_thoughts"
STEP_MER_BEH    = "mer_behavior"
STEP_GOAL       = "goal_positive"
STEP_TOTE_OPS   = "tote_ops"
STEP_TOTE_TEST  = "tote_test"
STEP_TOTE_EXIT  = "tote_exit"

MER_ORDER = [STEP_MER_CTX, STEP_MER_EMO, STEP_MER_THO, STEP_MER_BEH]

# ========= OpenAI =========
oai_client = None
openai_status = "disabled"
if OPENAI_API_KEY and OFFSCRIPT_ENABLED:
    try:
        oai_client = OpenAI(api_key=OPENAI_API_KEY)
        # –ª—ë–≥–∫–∏–π –ø–∏–Ω–≥
        oai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": "ping"}],
            max_tokens=4,
        )
        openai_status = "active"
        log.info("OpenAI ready")
    except Exception as e:
        log.error(f"OpenAI init error: {e}")
        oai_client = None
        openai_status = f"error: {e}"

# ========= DB =========
engine = create_engine(
    DATABASE_URL,
    poolclass=QueuePool,
    pool_size=5,
    max_overflow=10,
    pool_timeout=30,
    pool_recycle=1800,
)

def db_exec(sql: str, params: Optional[Dict[str, Any]] = None):
    with engine.begin() as conn:
        return conn.execute(text(sql), params or {})

def init_db():
    db_exec("""
    CREATE TABLE IF NOT EXISTS user_state(
        user_id BIGINT PRIMARY KEY,
        intent TEXT,
        step TEXT,
        data TEXT,
        updated_at TIMESTAMPTZ DEFAULT now()
    );
    """)
    db_exec("CREATE INDEX IF NOT EXISTS idx_user_state_updated_at ON user_state(updated_at)")
    db_exec("CREATE INDEX IF NOT EXISTS idx_user_state_intent_step ON user_state(intent, step)")
    log.info("DB initialized")

# ========= State =========
def load_state(uid: int) -> Dict[str, Any]:
    row = db_exec("SELECT intent, step, data FROM user_state WHERE user_id=:uid", {"uid": uid}).mappings().first()
    if row:
        data = {}
        if row["data"]:
            try:
                data = json.loads(row["data"])
            except Exception as e:
                log.error("Failed to parse user data: %s", e)
                data = {}
        data.setdefault("history", [])
        data.setdefault("phase", "calibrate")  # —Ç–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ GPT-–ø—Ä–æ—Ü–µ—Å—Å–∞
        data.setdefault("focus", None)         # —Ñ–æ–∫—É—Å –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–∑—ã
        return {
            "user_id": uid,
            "intent": row["intent"] or INTENT_GREET,
            "step": row["step"] or STEP_ASK_STYLE,
            "data": data
        }
    return {"user_id": uid, "intent": INTENT_GREET, "step": STEP_ASK_STYLE, "data": {"history": [], "phase": "calibrate"}}

def save_state(uid: int, intent=None, step=None, data=None) -> Dict[str, Any]:
    cur = load_state(uid)
    intent = intent or cur["intent"]
    step   = step   or cur["step"]
    new_data = cur["data"].copy()
    if data:
        new_data.update(data)
    new_data["last_state_write_at"] = datetime.now(timezone.utc).isoformat()
    db_exec("""
        INSERT INTO user_state (user_id, intent, step, data, updated_at)
        VALUES (:uid, :intent, :step, :data, now())
        ON CONFLICT (user_id) DO UPDATE
        SET intent=EXCLUDED.intent, step=EXCLUDED.step, data=EXCLUDED.data, updated_at=now()
    """, {"uid": uid, "intent": intent, "step": step, "data": json.dumps(new_data, ensure_ascii=False)})
    return {"user_id": uid, "intent": intent, "step": step, "data": new_data}

# ========= Bot / Flask =========
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML", threaded=False)
app = Flask(__name__)

MAIN_MENU = types.ReplyKeyboardMarkup(resize_keyboard=True)
MAIN_MENU.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
MAIN_MENU.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
MAIN_MENU.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")

STYLE_KB = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
STYLE_KB.row("—Ç—ã", "–≤—ã")

# ========= Patterns / Helpers =========
RISK_PATTERNS = {
    "remove_stop": ["—É–±–∏—Ä–∞—é —Å—Ç–æ–ø", "—Å–Ω—è–ª —Å—Ç–æ–ø", "–±–µ–∑ —Å—Ç–æ–ø–∞"],
    "move_stop": ["–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø", "–æ—Ç–æ–¥–≤–∏–Ω—É–ª —Å—Ç–æ–ø", "–ø–µ—Ä–µ—Å—Ç–∞–≤–∏–ª —Å—Ç–æ–ø"],
    "early_close": ["–∑–∞–∫—Ä—ã–ª —Ä–∞–Ω–æ", "–≤—ã—à–µ–ª –≤ –Ω–æ–ª—å", "–º–∏–∑–µ—Ä–Ω—ã–π –ø–ª—é—Å", "—Ä–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥"],
    "averaging": ["—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ", "–¥–æ–ª–∏–≤–∞–ª—Å—è –ø—Ä–æ—Ç–∏–≤", "–¥–æ–∫—É–ø–∞–ª –ø—Ä–æ—Ç–∏–≤"],
    "fomo": ["–ø–æ–µ–∑–¥ —É–µ–¥–µ—Ç", "—É–ø—É—Å—Ç–∏–ª", "—É–π–¥—ë—Ç –±–µ–∑ –º–µ–Ω—è", "—Å—Ç—Ä–∞—Ö —É–ø—É—Å—Ç–∏—Ç—å"],
    "rule_breaking": ["–Ω–∞—Ä—É—à–∏–ª –ø–ª–∞–Ω", "–æ—Ç–æ—à—ë–ª –æ—Ç –ø–ª–∞–Ω–∞", "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –ø–ª–∞–Ω"],
}
EMO_PATTERNS = {
    "self_doubt": ["—Å–æ–º–Ω–µ–≤–∞—é—Å—å", "–Ω–µ —É–≤–µ—Ä–µ–Ω", "—Å—Ç—Ä–µ—Å—Å", "–ø–∞–Ω–∏–∫–∞", "–≤–æ–ª–Ω–µ–Ω–∏–µ"],
    "fear_of_loss": ["—Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—å", "–±–æ—é—Å—å —Å—Ç–æ–ø–∞", "–Ω–µ —Ö–æ—á—É –±—ã—Ç—å –æ–±–º–∞–Ω—É—Ç—ã–º"],
    "chaos": ["—Ö–∞–æ—Å", "—Å—É–µ—Ç–∞", "–ø—É—Ç–∞—é—Å—å"],
}

def detect_trading_patterns(text: str) -> List[str]:
    tl = (text or "").lower()
    hits = []
    for name, keys in {**RISK_PATTERNS, **EMO_PATTERNS}.items():
        if any(k in tl for k in keys):
            hits.append(name)
    return hits

BAN_TEMPLATES = [
    "–ø–æ–Ω–∏–º–∞—é", "—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å", "–≤–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å", "–¥–∞–≤–∞–π —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º", "–±—ã–ª–æ –±—ã –ø–æ–ª–µ–∑–Ω–æ",
    "–ø–æ–ø—Ä–æ–±—É–π", "–∏—Å–ø–æ–ª—å–∑—É–π", "–ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è", "—É—Å—Ç–∞–Ω–æ–≤–∏", "—Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è", "—Å–ª–µ–¥—É–π", "–ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏"
]

def strip_templates(text_in: str) -> str:
    t = text_in or ""
    for ph in BAN_TEMPLATES:
        t = re.sub(rf"(?i)\b{re.escape(ph)}[^.!?]*[.!?]", " ", t)
    t = re.sub(r'\s+', ' ', t).strip(" ,.!?")[:1200]
    return t

def anti_echo(user_text: str, model_text: str) -> str:
    u = (user_text or "").strip().lower()
    m = (model_text or "").strip()
    if len(u) >= 15 and len(m) >= 15 and SequenceMatcher(None, u, m.lower()).ratio() > 0.7:
        return "–°–∫–∞–∂—É –∏–Ω–∞—á–µ: " + m
    return m

def mer_prompt_for(step: str) -> str:
    return {
        STEP_MER_CTX: "–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É. –ì–¥–µ –∏ –∫–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ? –ö–æ—Ä–æ—Ç–∫–æ.",
        STEP_MER_EMO: "–ß—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª –≤ –º–æ–º–µ–Ω—Ç–µ (2‚Äì3 —Å–ª–æ–≤–∞)?",
        STEP_MER_THO: "–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –º–µ–ª—å–∫–∞–ª–∏ (2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑—ã)?",
        STEP_MER_BEH: "–ß—Ç–æ —Å–¥–µ–ª–∞–ª —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏? –î–µ–π—Å—Ç–≤–∏—è.",
    }.get(step, "–ü—Ä–æ–¥–æ–ª–∂–∏–º.")

def extract_problem_summary(history: List[Dict]) -> str:
    user_msgs = [m["content"] for m in history if m.get("role") == "user"]
    pats: List[str] = []
    for m in user_msgs:
        pats.extend(detect_trading_patterns(m))
    up = sorted(set(pats))
    parts = []
    if "fomo" in up: parts.append("FOMO (—Å—Ç—Ä–∞—Ö —É–ø—É—Å—Ç–∏—Ç—å)")
    if "remove_stop" in up or "move_stop" in up: parts.append("—Ç—Ä–æ–≥–∞–µ—à—å/—Å–Ω–∏–º–∞–µ—à—å —Å—Ç–æ–ø")
    if "early_close" in up: parts.append("—Ä–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥/¬´–≤ –Ω–æ–ª—å¬ª")
    if "averaging" in up: parts.append("—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏")
    if "fear_of_loss" in up: parts.append("—Å—Ç—Ä–∞—Ö —Å—Ç–æ–ø–∞/–ø–æ—Ç–µ—Ä—å")
    if "self_doubt" in up: parts.append("—Å–æ–º–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞")
    return "–¢—Ä–∏–≥–≥–µ—Ä—ã: " + (", ".join(parts) if parts else "–Ω—É–∂–µ–Ω –ø—Ä–∏–º–µ—Ä")

# ========= GPT —Ñ–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä (–∂–∏–≤–æ–π —Å–ª–æ–π) =========
def gpt_facilitator(uid: int, text_in: str, st: Dict[str, Any]) -> Dict[str, Any]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON:
    {
      "reply": "<–∫–æ—Ä–æ—Ç–∫–∏–π —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –±–µ–∑ —Å–æ–≤–µ—Ç–æ–≤>",
      "phase": "calibrate|reflect|structure|integrate",
      "focus": "context|emotion|thought|behavior|belief|plan|null",
      "store": {...},                     # —á—Ç–æ –ø–æ–ª–æ–∂–∏—Ç—å –≤ state.data
      "propose_summary": "<—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø—É—Å—Ç–æ>",
      "ask_confirm": true/false,          # —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ
      "suggest_struct": true/false        # –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞–∑–±–æ—Ä –ø–æ —à–∞–≥–∞–º
    }
    """
    fallback = {
        "reply": "–û–∫–µ–π. –°–æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π –º–µ–Ω—è: –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ç—ã –æ—Ç—Å—Ç—É–ø–∏–ª –æ—Ç –ø–ª–∞–Ω–∞ ‚Äî –Ω–∞ –≤—Ö–æ–¥–µ, —Å—Ç–æ–ø–µ –∏–ª–∏ –≤—ã—Ö–æ–¥–µ?",
        "phase": "calibrate",
        "focus": "context",
        "store": {},
        "propose_summary": "",
        "ask_confirm": False,
        "suggest_struct": False
    }
    if not oai_client or not OFFSCRIPT_ENABLED:
        return fallback

    style = st["data"].get("style", "—Ç—ã")
    history = st["data"].get("history", [])
    current_phase = st["data"].get("phase", "calibrate")

    system = f"""
–¢—ã ‚Äî Innertrade Kai Mentor (–ê–ª–µ–∫—Å), –∫–æ—É—á-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É.
–ó–∞–¥–∞—á–∞ ‚Äî –≤–µ—Å—Ç–∏ –ñ–ò–í–û–ô –ø—Ä–æ—Ü–µ—Å—Å –æ—Å–æ–∑–Ω–∞–Ω–∏—è, –∞ –Ω–µ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã. –ì–æ–≤–æ—Ä–∏ –Ω–∞ "{style}".

–ü—Ä–∏–Ω—Ü–∏–ø—ã:
- –î–µ—Ä–∂–∏ –≤ –≥–æ–ª–æ–≤–µ —á–µ—Ç—ã—Ä–µ —Ñ–∞–∑—ã: calibrate ‚Üí reflect ‚Üí structure ‚Üí integrate.
- –í –∫–∞–∂–¥–æ–π —Ñ–∞–∑–µ –µ—Å—Ç—å —Ñ–æ–∫—É—Å: context|emotion|thought|behavior|belief|plan|null.
- –¢—ã —Å—Ç—Ä–æ–∏—à—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –º–æ–¥–µ–ª—å —á–µ–ª–æ–≤–µ–∫–∞ (—ç–º–æ—Ü–∏–∏, –º—ã—Å–ª–∏, –¥–µ–π—Å—Ç–≤–∏—è, —É–±–µ–∂–¥–µ–Ω–∏—è).
- –ù–µ –Ω–∞–∑—ã–≤–∞–π —Ç–µ—Ö–Ω–∏–∫–∏. –ù–æ –∑–Ω–∞–π –º–µ—Ö–∞–Ω–∏–∫—É:
  MERCEDES: –∫–æ–Ω—Ç–µ–∫—Å—Ç‚Üí—ç–º–æ—Ü–∏–∏‚Üí–º—ã—Å–ª–∏‚Üí–ø–æ–≤–µ–¥–µ–Ω–∏–µ‚Üí—Ä–µ–∑—É–ª—å—Ç–∞—Ç‚Üí–Ω–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ;
  TOTE: —Ü–µ–ª—å‚Üí—à–∞–≥–∏‚Üí–ø—Ä–æ–≤–µ—Ä–∫–∞‚Üí–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞.
- –ö–æ—Ä–æ—Ç–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Ç–æ–Ω. –ù–∏–∫–∞–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
- –ö–æ–≥–¥–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∑—é–º–µ (propose_summary) –∏ —Å–ø—Ä–æ—Å–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
- –í structure –ø–µ—Ä–µ—Ö–æ–¥–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª/–≥–æ—Ç–æ–≤ –∏ –µ—Å—Ç—å —è—Å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ ‚Äî —Å—Ç—Ä–æ–≥–æ JSON:
{{
 "reply": "...",
 "phase": "calibrate|reflect|structure|integrate",
 "focus": "context|emotion|thought|behavior|belief|plan|null",
 "store": {{}},
 "propose_summary": "",
 "ask_confirm": false,
 "suggest_struct": false
}}
""".strip()

    msgs = [{"role": "system", "content": system}]
    # –ø–æ–¥–º–µ—à–∏–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ
    msgs.append({"role": "system", "content": f"–¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: {current_phase}."})
    for h in history[-HIST_LIMIT:]:
        if h.get("role") in ("user", "assistant") and isinstance(h.get("content"), str):
            msgs.append(h)
    msgs.append({"role": "user", "content": text_in})

    try:
        res = oai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=msgs,
            temperature=0.3,
            response_format={"type": "json_object"},
        )
        raw = res.choices[0].message.content or "{}"
        dec = json.loads(raw)

        for k in ["reply", "phase", "focus", "store", "propose_summary", "ask_confirm", "suggest_struct"]:
            if k not in dec:
                return fallback

        # –°–∞–Ω–∏—Ç–∞—Ü–∏—è
        reply = strip_templates(anti_echo(text_in, dec.get("reply", "")))
        if len(reply) < 8:
            reply = "–î–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ: –≥–¥–µ –∏–º–µ–Ω–Ω–æ —à–∞–≥–Ω—É–ª –≤ —Å—Ç–æ—Ä–æ–Ω—É –æ—Ç –ø–ª–∞–Ω–∞?"

        # –§–∞–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–ø—É—Å—Ç–∏–º–æ–π
        if dec["phase"] not in ("calibrate", "reflect", "structure", "integrate"):
            dec["phase"] = "calibrate"
        if dec["focus"] not in ("context", "emotion", "thought", "behavior", "belief", "plan", "null"):
            dec["focus"] = "null"

        dec["reply"] = reply
        return dec
    except Exception as e:
        log.error("gpt_facilitator error: %s", e)
        return fallback

# ========= –ú–µ–Ω—é / –ü–æ–¥—Å–∫–∞–∑–∫–∏ =========
def offer_structural(uid: int, st: Dict[str, Any]):
    if st["data"].get("struct_offer_shown"):
        return
    st["data"]["struct_offer_shown"] = True
    save_state(uid, data=st["data"])
    summary = extract_problem_summary(st["data"].get("history", []))
    kb = types.InlineKeyboardMarkup().row(
        types.InlineKeyboardButton("–†–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ —à–∞–≥–∞–º", callback_data="start_error_flow"),
        types.InlineKeyboardButton("–ü–æ–∫–∞ –Ω–µ—Ç", callback_data="skip_error_flow")
    )
    bot.send_message(uid, f"{summary}\n\n–ì–æ—Ç–æ–≤ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —ç—Ç–æ –ø–æ —à–∞–≥–∞–º?", reply_markup=kb)

# ========= Handlers =========
@bot.message_handler(commands=["start", "reset"])
def cmd_start(m: types.Message):
    uid = m.from_user.id
    st = load_state(uid)

    # –ê–Ω—Ç–∏-–¥—É–±–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if st["intent"] == INTENT_GREET and st["step"] == STEP_ASK_STYLE:
        pass
    else:
        st = save_state(uid, INTENT_GREET, STEP_ASK_STYLE, {"history": [], "phase": "calibrate", "struct_offer_shown": False})

    bot.send_message(uid,
        "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —É–¥–æ–±–Ω–µ–µ ‚Äî <b>—Ç—ã</b> –∏–ª–∏ <b>–≤—ã</b>?\n\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ ‚Äî –Ω–∞–ø–∏—à–∏: <b>–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä</b>.",
        reply_markup=STYLE_KB
    )

@bot.message_handler(commands=["version", "v"])
def cmd_version(m: types.Message):
    info = (
        f"üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {BOT_VERSION}\n"
        f"üìù –•—ç—à –∫–æ–¥–∞: {_code_hash()}\n"
        f"üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now(timezone.utc).isoformat()}\n"
        f"ü§ñ OpenAI: {openai_status}"
    )
    bot.reply_to(m, info)

@bot.message_handler(commands=["menu"])
def cmd_menu(m: types.Message):
    bot.send_message(m.chat.id, "–ú–µ–Ω—é:", reply_markup=MAIN_MENU)

@bot.message_handler(content_types=["text"])
def on_text(m: types.Message):
    handle_text_message(m.from_user.id, m.text.strip(), m)

def _now_utc_iso():
    return datetime.now(timezone.utc).isoformat()

def _append_history(data: Dict[str, Any], role: str, content: str) -> Dict[str, Any]:
    hist = data.get("history", [])
    if len(hist) >= HIST_LIMIT:
        hist = hist[-(HIST_LIMIT - 1):]
    hist.append({"role": role, "content": content})
    data["history"] = hist
    return data

def handle_text_message(uid: int, text_in: str, original_message=None):
    st = load_state(uid)
    log.info("User %s: intent=%s step=%s text='%s'", uid, st["intent"], st["step"], text_in[:200])

    # reset
    if text_in.lower().strip() in ("–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä", "–Ω–æ–≤—ã–π", "—Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞", "start over"):
        st = save_state(uid, INTENT_FREE, STEP_FREE_INTRO, {"history": [], "phase": "calibrate", "struct_offer_shown": False})
        bot.send_message(uid, "–û–∫–µ–π, –Ω–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ —Ö–æ—á–µ—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å?", reply_markup=MAIN_MENU)
        return

    # history (user)
    st["data"] = _append_history(st["data"], "user", text_in)
    st["data"]["last_user_msg_at"] = _now_utc_iso()
    st["data"]["awaiting_reply"] = True

    # Greeting: –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è
    if st["intent"] == INTENT_GREET and st["step"] == STEP_ASK_STYLE:
        if text_in.lower() in ("—Ç—ã", "–≤—ã"):
            st["data"]["style"] = text_in.lower()
            st = save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
            bot.send_message(uid, f"–ü—Ä–∏–Ω—è—Ç–æ ({text_in}). –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? –ß—Ç–æ —Å–µ–π—á–∞—Å –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ —Ö–æ—á–µ—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=MAIN_MENU)
        else:
            save_state(uid, data=st["data"])
            bot.send_message(uid, "–í—ã–±–µ—Ä–∏ ¬´—Ç—ã¬ª –∏–ª–∏ ¬´–≤—ã¬ª.", reply_markup=STYLE_KB)
        return

    # –ï—Å–ª–∏ —É–∂–µ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –ø–æ—Ç–æ–∫
    if st["intent"] == INTENT_ERR:
        proceed_struct(uid, text_in, st)
        return

    # ===== –ñ–∏–≤–æ–π —Ñ–∞—Å–∏–ª–∏—Ç–∞—Ç–æ—Ä (–¥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã) =====
    decision = gpt_facilitator(uid, text_in, st)

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ/—Ñ–∞–∑—É/—Ñ–æ–∫—É—Å
    st_data = st["data"]
    if decision.get("store"):
        try:
            st_data.update(decision["store"])
        except Exception:
            pass

    if decision.get("propose_summary"):
        st_data["problem_draft"] = decision["propose_summary"]

    st_data["phase"] = decision.get("phase", st_data.get("phase", "calibrate"))
    st_data["focus"] = decision.get("focus", st_data.get("focus"))

    reply = decision.get("reply") or "–û–∫–µ–π. –ö–æ—Ä–æ—Ç–∫–æ: –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ç—ã –æ—Ç—Å—Ç—É–ø–∏–ª –æ—Ç –ø–ª–∞–Ω–∞?"

    # –ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è –ª–æ–≥–∏–∫–∞:
    ask_confirm = bool(decision.get("ask_confirm", False))
    suggest_struct = bool(decision.get("suggest_struct", False))

    # –£—Å–∫–æ—Ä–∏—Ç–µ–ª—å –ø—Ä–∏ —è–≤–Ω—ã—Ö —Ä–∏—Å–∫-–ø–∞—Ç—Ç–µ—Ä–Ω–∞—Ö (–Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)
    if not st_data.get("problem_confirmed"):
        if suggest_struct:
            ask_confirm = True
        else:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–∏—Å–∫-–ø–∞—Ç—Ç–µ—Ä–Ω—ã ‚Äî –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º —Ä–µ–∑—é–º–µ
            pats = detect_trading_patterns(text_in)
            if pats:
                if not st_data.get("problem_draft"):
                    st_data["problem_draft"] = extract_problem_summary(st_data.get("history", []))
                ask_confirm = True

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º assistant-—Ä–µ–ø–ª–∏–∫—É
    st_data = _append_history(st_data, "assistant", reply)
    st = save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if original_message:
        bot.reply_to(original_message, reply, reply_markup=MAIN_MENU)
    else:
        bot.send_message(uid, reply, reply_markup=MAIN_MENU)

    # –ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –ø—Ä–æ–±–ª–µ–º—ã
    if ask_confirm and st_data.get("problem_draft"):
        kb = types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton("–î–∞, —ç—Ç–æ –æ–Ω–æ", callback_data="confirm_problem"),
            types.InlineKeyboardButton("–ù–µ—Ç, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å", callback_data="refine_problem"),
        )
        bot.send_message(uid, f"–°—É–º–º–∏—Ä—É—é —Ç–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n<b>{st_data['problem_draft']}</b>\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç?", reply_markup=kb)
        return

    # –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚Äî –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏–º —Ä–∞–∑–±–æ—Ä (–Ω–µ —Å—Ä–∞–∑—É)
    if st_data.get("problem_confirmed") and not st_data.get("struct_offer_shown"):
        offer_structural(uid, st)

# ========= Structural Flow =========
def mer_prompt_for(step: str) -> str:
    return {
        STEP_MER_CTX: "–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É. –ì–¥–µ –∏ –∫–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ? –ö–æ—Ä–æ—Ç–∫–æ.",
        STEP_MER_EMO: "–ß—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª –≤ –º–æ–º–µ–Ω—Ç–µ (2‚Äì3 —Å–ª–æ–≤–∞)?",
        STEP_MER_THO: "–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –º–µ–ª—å–∫–∞–ª–∏ (2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑—ã)?",
        STEP_MER_BEH: "–ß—Ç–æ —Å–¥–µ–ª–∞–ª —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏? –î–µ–π—Å—Ç–≤–∏—è.",
    }.get(step, "–ü—Ä–æ–¥–æ–ª–∂–∏–º.")

def proceed_struct(uid: int, text_in: str, st: Dict[str, Any]):
    step = st["step"]
    data = st["data"].copy()

    # a) –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if step == STEP_ERR_DESCR:
        data["error_description"] = text_in
        save_state(uid, INTENT_ERR, STEP_MER_CTX, data)
        bot.send_message(uid, mer_prompt_for(STEP_MER_CTX), reply_markup=MAIN_MENU)
        return

    # b) MERCEDES
    if step in MER_ORDER:
        mer = data.get("mer", {})
        mer[step] = text_in
        data["mer"] = mer

        idx = MER_ORDER.index(step)
        if idx + 1 < len(MER_ORDER):
            nxt = MER_ORDER[idx + 1]
            save_state(uid, INTENT_ERR, nxt, data)
            bot.send_message(uid, mer_prompt_for(nxt), reply_markup=MAIN_MENU)
        else:
            save_state(uid, INTENT_ERR, STEP_GOAL, data)
            bot.send_message(uid, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å: —á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?", reply_markup=MAIN_MENU)
        return

    # c) Goal
    if step == STEP_GOAL:
        data["goal"] = text_in
        save_state(uid, INTENT_ERR, STEP_TOTE_OPS, data)
        bot.send_message(uid, "–î–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–æ–∫ –Ω–∞–∑–æ–≤–∏ 2‚Äì3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ (–∫–æ—Ä–æ—Ç–∫–æ, —Å–ø–∏—Å–∫–æ–º).", reply_markup=MAIN_MENU)
        return

    # d) TOTE - ops
    if step == STEP_TOTE_OPS:
        tote = data.get("tote", {})
        tote["ops"] = text_in
        data["tote"] = tote
        save_state(uid, INTENT_ERR, STEP_TOTE_TEST, data)
        bot.send_message(uid, "–ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –û–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π.", reply_markup=MAIN_MENU)
        return

    # e) TOTE - test
    if step == STEP_TOTE_TEST:
        tote = data.get("tote", {})
        tote["test"] = text_in
        data["tote"] = tote
        save_state(uid, INTENT_ERR, STEP_TOTE_EXIT, data)
        bot.send_message(uid, "–ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∂–µ—Ç ¬´–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª ‚Äî —á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å?", reply_markup=MAIN_MENU)
        return

    # f) TOTE - exit
    if step == STEP_TOTE_EXIT:
        tote = data.get("tote", {})
        tote["exit"] = text_in
        data["tote"] = tote

        mer = data.get('mer', {})
        summary = [
            "<b>–ò—Ç–æ–≥ —Ä–∞–∑–±–æ—Ä–∞</b>",
            f"–ü—Ä–æ–±–ª–µ–º–∞: {data.get('error_description', data.get('problem', '‚Äî'))}",
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {mer.get(STEP_MER_CTX, '‚Äî')}",
            f"–≠–º–æ—Ü–∏–∏: {mer.get(STEP_MER_EMO, '‚Äî')}",
            f"–ú—ã—Å–ª–∏: {mer.get(STEP_MER_THO, '‚Äî')}",
            f"–ü–æ–≤–µ–¥–µ–Ω–∏–µ: {mer.get(STEP_MER_BEH, '‚Äî')}",
            f"–¶–µ–ª—å: {data.get('goal', '‚Äî')}",
            f"–®–∞–≥–∏ (3 —Å–¥–µ–ª–∫–∏): {data.get('tote', {}).get('ops', '‚Äî')}",
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {data.get('tote', {}).get('test', '‚Äî')}",
            f"–ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ: {data.get('tote', {}).get('exit', '‚Äî')}",
        ]
        save_state(uid, INTENT_DONE, STEP_FREE_INTRO, data)
        bot.send_message(uid, "\n".join(summary), reply_markup=MAIN_MENU)
        bot.send_message(uid, "–ì–æ—Ç–æ–≤ –≤—ã–Ω–µ—Å—Ç–∏ —ç—Ç–æ –≤ ¬´—Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏¬ª –∏–ª–∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ?", reply_markup=MAIN_MENU)
        return

    # fallback ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –≤ –∫–æ—É—á-—Å–ª–æ–π
    save_state(uid, INTENT_FREE, STEP_FREE_INTRO, data)
    bot.send_message(uid, "–û–∫–µ–π, –≤–µ—Ä–Ω—ë–º—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ –∏ —É—Ç–æ—á–Ω–∏–º –µ—â—ë —á—É—Ç—å-—á—É—Ç—å.", reply_markup=MAIN_MENU)

# ========= Menu handlers =========
MENU_BTNS = {
    "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞": "error",
    "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é": "strategy",
    "üìÑ –ü–∞—Å–ø–æ—Ä—Ç": "passport",
    "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏": "weekpanel",
    "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ": "panic",
    "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å": "start_help",
}

@bot.message_handler(func=lambda m: m.text in MENU_BTNS.keys())
def handle_menu(m: types.Message):
    uid = m.from_user.id
    st = load_state(uid)
    label = m.text
    code = MENU_BTNS[label]

    st["data"] = _append_history(st["data"], "user", label)

    if code == "error":
        if st["data"].get("problem_confirmed"):
            save_state(uid, INTENT_ERR, STEP_ERR_DESCR, st["data"])
            bot.send_message(uid, "–û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–µ–π—Å –æ—à–∏–±–∫–∏: –≥–¥–µ/–∫–æ–≥–¥–∞, –≤—Ö–æ–¥/—Å—Ç–æ–ø/–ø–ª–∞–Ω, –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª, —á–µ–º –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.")
        else:
            save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
            bot.send_message(uid, "–ö–æ—Ä–æ—Ç–∫–æ ‚Äî —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å –º–µ—à–∞–µ—Ç? –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤ –æ–¥–Ω–æ–º-–¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.", reply_markup=MAIN_MENU)
    elif code == "start_help":
        bot.send_message(uid, "–ü–ª–∞–Ω: 1) –∂–∏–≤–æ–π —Ä–∞–∑–±–æ—Ä –ø—Ä–æ–±–ª–µ–º—ã, 2) —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏, 3) —Å–∫–µ–ª–µ—Ç –¢–°. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?", reply_markup=MAIN_MENU)
        save_state(uid, data=st["data"])
    else:
        bot.send_message(uid, "–û–∫. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É—Å–∫–æ—Ä–∏—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏ ¬´üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞¬ª.", reply_markup=MAIN_MENU)
        save_state(uid, data=st["data"])

# ========= Callbacks =========
@bot.callback_query_handler(func=lambda call: True)
def on_callback(call: types.CallbackQuery):
    uid = call.from_user.id
    data = call.data or ""
    bot.answer_callback_query(call.id, "–û–∫")

    st = load_state(uid)

    if data == "confirm_problem":
        st["data"]["problem"] = st["data"].get("problem_draft", "‚Äî")
        st["data"]["problem_confirmed"] = True
        st["data"]["struct_offer_shown"] = False
        st["data"]["phase"] = "reflect"  # –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –ø–µ—Ä–µ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
        bot.send_message(uid, "–ü—Ä–∏–Ω—è—Ç–æ. –ì–æ—Ç–æ–≤ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —ç—Ç–æ –ø–æ —à–∞–≥–∞–º?", reply_markup=types.InlineKeyboardMarkup().row(
            types.InlineKeyboardButton("–†–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ —à–∞–≥–∞–º", callback_data="start_error_flow"),
            types.InlineKeyboardButton("–ü–æ–∫–∞ –Ω–µ—Ç", callback_data="skip_error_flow"),
        ))
        return

    if data == "refine_problem":
        st["data"]["problem_confirmed"] = False
        st["data"]["phase"] = "calibrate"
        save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
        bot.send_message(uid, "–•–æ—Ä–æ—à–æ. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ç–æ–≥–¥–∞ –ø–æ–∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ä–∞–∑–±–∏—Ä–∞—Ç—å.", reply_markup=MAIN_MENU)
        return

    if data == "start_error_flow":
        st["data"]["problem_confirmed"] = True
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –ø–æ—Ç–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏—è –∫–µ–π—Å–∞
        st = save_state(uid, INTENT_ERR, STEP_ERR_DESCR, st["data"])
        bot.send_message(uid, "–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–±–æ—Ä. –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: –≤—Ö–æ–¥/–ø–ª–∞–Ω, –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª, —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        return

    if data == "skip_error_flow":
        bot.send_message(uid, "–û–∫–µ–π, –≤–µ—Ä–Ω—ë–º—Å—è –∫ —ç—Ç–æ–º—É –ø–æ–∑–∂–µ.", reply_markup=MAIN_MENU)
        return

    if data == "continue_session":
        st["data"]["awaiting_reply"] = False
        st["data"]["last_nag_at"] = _now_utc_iso()
        save_state(uid, data=st["data"])
        bot.send_message(uid, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º. –ù–∞ —á—ë–º –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?", reply_markup=MAIN_MENU)
        return

    if data == "restart_session":
        st = save_state(uid, INTENT_FREE, STEP_FREE_INTRO, {"history": [], "phase": "calibrate", "struct_offer_shown": False})
        bot.send_message(uid, "–û–∫–µ–π, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –ß—Ç–æ —Å–µ–π—á–∞—Å —Ö–æ—á–µ—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=MAIN_MENU)
        return

# ========= HTTP =========
def _now_iso():
    return datetime.now(timezone.utc).isoformat()

@app.get("/")
def root():
    return jsonify({"ok": True, "time": _now_iso()})

@app.get("/version")
def version_api():
    return jsonify({"version": BOT_VERSION, "code_hash": _code_hash(), "status": "running", "timestamp": _now_iso(), "openai": openai_status})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_SECRET:
        abort(401)
    if request.content_length and request.content_length > MAX_BODY:
        abort(413, description="Body too large")
    body = request.get_data()
    if not body:
        abort(400, description="Empty body")
    try:
        update = telebot.types.Update.de_json(body.decode("utf-8"))
        if update is None:
            log.error("Failed to parse update")
            abort(400, description="Invalid update")
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        log.error("Webhook processing error: %s", e)
        abort(500)

# ========= Maintenance / Reminders =========
def cleanup_old_states(days: int = 30):
    try:
        days = int(days)
        db_exec(f"DELETE FROM user_state WHERE updated_at < NOW() - INTERVAL '{days} days'")
        log.info("Old user states cleanup done (> %s days).", days)
    except Exception as e:
        log.error("Cleanup error: %s", e)

def reminder_tick():
    if not REMINDERS_ENABLED:
        return
    try:
        mins = int(IDLE_MINUTES_REMIND)
        reset_mins = int(IDLE_MINUTES_RESET)
        rows = db_exec("SELECT user_id, intent, step, data, updated_at FROM user_state").mappings().all()
        now = datetime.now(timezone.utc)
        for r in rows:
            try:
                data = json.loads(r["data"] or "{}")
            except Exception:
                data = {}
            if not data.get("awaiting_reply"):
                continue
            last_user_ts = data.get("last_user_msg_at")
            if not last_user_ts:
                continue
            try:
                last_dt = datetime.fromisoformat(last_user_ts)
            except Exception:
                continue
            delta = now - last_dt
            last_nag_at = data.get("last_nag_at")
            nag_ok = True
            if last_nag_at:
                try:
                    if (now - datetime.fromisoformat(last_nag_at)) < timedelta(minutes=mins//2 or 1):
                        nag_ok = False
                except Exception:
                    pass
            if delta >= timedelta(minutes=reset_mins) and nag_ok:
                kb = types.InlineKeyboardMarkup().row(
                    types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º", callback_data="continue_session"),
                    types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_session"),
                )
                bot.send_message(r["user_id"], "–î–µ–ª–∞ –∑–∞—Ç–∞—â–∏–ª–∏? –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ?", reply_markup=kb)
                data["last_nag_at"] = _now_utc_iso()
                save_state(r["user_id"], data=data)
            elif delta >= timedelta(minutes=mins) and nag_ok:
                kb = types.InlineKeyboardMarkup().row(
                    types.InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º", callback_data="continue_session"),
                )
                bot.send_message(r["user_id"], "–ö–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º?", reply_markup=kb)
                data["last_nag_at"] = _now_utc_iso()
                save_state(r["user_id"], data=data)
    except Exception as e:
        log.error("Reminder error: %s", e)

def background_housekeeping():
    last_cleanup = time.time()
    while True:
        time.sleep(60)
        reminder_tick()
        if time.time() - last_cleanup > 24*60*60:
            cleanup_old_states(30)
            last_cleanup = time.time()

# ========= Init on import (for gunicorn) =========
try:
    init_db()
    log.info("DB initialized (import)")
except Exception as e:
    log.error("DB init (import) failed: %s", e)

if SET_WEBHOOK_FLAG:
    try:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(
            url=f"{PUBLIC_URL}/{WEBHOOK_PATH}",
            secret_token=TG_SECRET,
            allowed_updates=["message", "callback_query"]
        )
        log.info("Webhook set to %s/%s", PUBLIC_URL, WEBHOOK_PATH)
    except Exception as e:
        log.error("Webhook setup error: %s", e)

try:
    th = threading.Thread(target=background_housekeeping, daemon=True)
    th.start()
except Exception as e:
    log.error("Can't start housekeeping thread: %s", e)

# ========= Dev run =========
if __name__ == "__main__":
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)

