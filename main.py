# main.py
import os, json, logging
from datetime import datetime, timezone

from flask import Flask, request, jsonify, abort
from telebot import TeleBot, types
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("innertrade")

# ---------- ENV ----------
TELEGRAM_TOKEN     = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY")
DATABASE_URL       = os.getenv("DATABASE_URL")
PUBLIC_URL         = os.getenv("PUBLIC_URL")
WEBHOOK_PATH       = os.getenv("WEBHOOK_PATH")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: wbhk_9t3x
TG_WEBHOOK_SECRET  = os.getenv("TG_WEBHOOK_SECRET")  # –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å secret_token –≤ setWebhook

if not TELEGRAM_TOKEN:    raise RuntimeError("TELEGRAM_TOKEN missing")
if not OPENAI_API_KEY:    raise RuntimeError("OPENAI_API_KEY missing")
if not PUBLIC_URL:        raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")
if not WEBHOOK_PATH:      raise RuntimeError("WEBHOOK_PATH missing (e.g., wbhk_XXXX)")
if not TG_WEBHOOK_SECRET: raise RuntimeError("TG_WEBHOOK_SECRET missing (use same as setWebhook&secret_token=)")

# ---------- OPENAI ----------
# –õ—ë–≥–∫–∞—è –æ–±—ë—Ä—Ç–∫–∞: –≤—ã–∑—ã–≤–∞–µ–º Chat Completions —Ç–æ–ª—å–∫–æ –ø—Ä–∏ ¬´—Å–≤–æ–±–æ–¥–Ω–æ–π –±–µ—Å–µ–¥–µ¬ª.
from openai import OpenAI
oai = OpenAI(api_key=OPENAI_API_KEY)
GPT_MODEL = "gpt-4o-mini"

def coach_reply(user_name: str | None, prompt: str) -> str:
    """–ù–µ–Ω–∞–≤—è–∑—á–∏–≤—ã–π –æ—Ç–≤–µ—Ç-–∫–æ—É—á: 1 –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å + —ç–º–ø–∞—Ç–∏—è. –ë–µ–∑ —É—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    sys = (
        "–¢—ã –∫–æ—É—á-—Ç—Ä–µ–π–¥–∏–Ω–≥ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç Innertrade. –û–±—â–∞–π—Å—è —Ç–µ–ø–ª–æ, –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É. "
        "–ü–æ–∑–≤–æ–ª—å —á–µ–ª–æ–≤–µ–∫—É –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è 1‚Äì2 —Ä–µ–ø–ª–∏–∫–∏, –∑–∞—Ç–µ–º –º—è–≥–∫–æ –ø–æ–¥–≤–µ–¥–∏ –∫ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ "
        "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞ (–±–µ–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤ MERCEDES/TOTE). "
        "–ù–µ –¥–∞–≤–∞–π –¥–ª–∏–Ω–Ω—ã—Ö –ª–µ–∫—Ü–∏–π –∏ –Ω–µ —Ç—Ä–µ–±—É–π –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ ¬´–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫—É—Ä—Å—É¬ª. "
        "–í –∫–æ–Ω—Ü–µ –∑–∞–¥–∞–π –æ–¥–∏–Ω —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å."
    )
    name = user_name or "–¥—Ä—É–≥"
    msgs = [
        {"role": "system", "content": sys},
        {"role": "user", "content": f"{name}: {prompt}"}
    ]
    try:
        r = oai.chat.completions.create(model=GPT_MODEL, messages=msgs, temperature=0.4, max_tokens=180)
        return r.choices[0].message.content.strip()
    except Exception as e:
        log.warning(f"OpenAI fallback error: {e}")
        return "–ü–æ–Ω–∏–º–∞—é. –†–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ —Ç–µ–±—è –≤—ã–±–∏–≤–∞–µ—Ç –≤ –º–æ–º–µ–Ω—Ç–µ?"

# ---------- DB ----------
engine = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True)
        # —Å–æ–∑–¥–∞–¥–∏–º —Ç–∞–±–ª–∏—Ü—É user_state, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –µ—ë –Ω–µ—Ç
        with engine.begin() as conn:
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS user_state (
                user_id BIGINT PRIMARY KEY,
                intent  TEXT,
                step    TEXT,
                data    JSONB,
                updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
        log.info("DB connected")
    except OperationalError as e:
        log.warning(f"DB not reachable: {e}")
        engine = None
else:
    log.info("DATABASE_URL not set ‚Äî running without DB")

def get_state(uid: int) -> dict:
    st = {"intent": "idle", "step": None, "data": {}}
    if not engine: return st
    row = None
    with engine.begin() as conn:
        row = conn.execute(text("SELECT intent, step, data FROM user_state WHERE user_id=:u"),
                           {"u": uid}).mappings().first()
    if row:
        st["intent"] = row["intent"]
        st["step"]   = row["step"]
        st["data"]   = row["data"] or {}
    return st

def save_state(uid: int, intent: str | None = None, step: str | None = None, data_patch: dict | None = None):
    if not engine: return
    cur = get_state(uid)
    if intent is not None: cur["intent"] = intent
    if step   is not None: cur["step"]   = step
    if data_patch:
        cur["data"] = (cur["data"] or {}) | data_patch
    with engine.begin() as conn:
        conn.execute(text("""
        INSERT INTO user_state(user_id, intent, step, data, updated_at)
        VALUES (:u, :i, :s, COALESCE(:d, '{}'::jsonb), now())
        ON CONFLICT (user_id) DO UPDATE
        SET intent = EXCLUDED.intent,
            step   = EXCLUDED.step,
            data   = EXCLUDED.data,
            updated_at = now()
        """), {"u": uid, "i": cur["intent"], "s": cur["step"], "d": json.dumps(cur["data"])})

# ---------- TELEGRAM ----------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

BOT_PUBLIC_NAME = "Innertrade"

def ask_name(chat_id: int):
    bot.send_message(chat_id, "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–º–æ–∂–Ω–æ –Ω–∏–∫)", reply_markup=types.ReplyKeyboardRemove())

def ask_addressing(chat_id: int):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row("—Ç—ã", "–≤—ã")
    bot.send_message(chat_id, "–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî –Ω–∞ *—Ç—ã* –∏–ª–∏ –Ω–∞ *–≤—ã*?", reply_markup=kb)

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    st = get_state(m.from_user.id)
    bot.send_message(
        m.chat.id,
        "```\n" + json.dumps({
            "ok": True,
            "time": datetime.now(timezone.utc).isoformat(timespec="seconds"),
            "intent": st["intent"],
            "step": st["step"],
            "db": "ok" if engine else "none"
        }, ensure_ascii=False, indent=2) + "\n```",
        parse_mode="Markdown"
    )

@bot.message_handler(commands=["start", "reset", "menu"])
def cmd_start(m):
    uid = m.from_user.id
    # –°–±—Ä–æ—Å–∏–º ¬´–º—è–≥–∫–æ¬ª: –∏–º—è –∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–∏–º, –µ—Å–ª–∏ –±—ã–ª–∏.
    st = get_state(uid)
    name = (st["data"] or {}).get("name")
    address = (st["data"] or {}).get("address")
    save_state(uid, intent="greet", step="ask_name" if not name else ("ask_address" if not address else None))
    greet = f"üëã –ü—Ä–∏–≤–µ—Ç{', ' + name if name else ''}! "
    if not name:
        bot.send_message(m.chat.id, greet + "–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è.", reply_markup=types.ReplyKeyboardRemove())
        ask_name(m.chat.id)
    elif not address:
        bot.send_message(m.chat.id, greet + "–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è?", reply_markup=types.ReplyKeyboardRemove())
        ask_addressing(m.chat.id)
    else:
        bot.send_message(m.chat.id, greet + "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±–æ–ª–∏—Ç —Å–µ–π—á–∞—Å.",
                         reply_markup=main_menu())

# ---------- –ò–Ω—Ç–µ–Ω—Ç—ã-–∫–Ω–æ–ø–∫–∏ ----------
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def btn_error(m):
    uid = m.from_user.id
    save_state(uid, intent="error", step="ask_error")
    bot.send_message(
        m.chat.id,
        "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö (–∫–∞–∫ —Ç—ã *–¥–µ–π—Å—Ç–≤—É–µ—à—å* –≤ –º–æ–º–µ–Ω—Ç–µ).",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def btn_strategy(m):
    uid = m.from_user.id
    save_state(uid, intent="strategy", step="intro")
    bot.send_message(
        m.chat.id,
        "–°–æ–±–µ—Ä—ë–º –∫–∞—Ä–∫–∞—Å –¢–°:\n1) –ø–æ–¥—Ö–æ–¥/—Ä—ã–Ω–∫–∏/–¢–§\n2) –≤—Ö–æ–¥\n3) —Å—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥\n4) —Ä–∏—Å–∫/–ª–∏–º–∏—Ç—ã.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def btn_passport(m):
    uid = m.from_user.id
    save_state(uid, intent="passport", step="q_markets")
    bot.send_message(m.chat.id, "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. 1/6) –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å?",
                     reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def btn_weekpanel(m):
    uid = m.from_user.id
    save_state(uid, intent="week_panel", step="focus")
    bot.send_message(m.chat.id, "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏: –≤—ã–±–µ—Ä–∏ —Ñ–æ–∫—É—Å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π (–∫–æ—Ä–æ—Ç–∫–æ).",
                     reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def btn_panic(m):
    uid = m.from_user.id
    save_state(uid, intent="panic", step=None)
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É/–∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def btn_start_help(m):
    uid = m.from_user.id
    save_state(uid, intent="start_help", step=None)
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω)\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°.\n–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?",
        reply_markup=main_menu()
    )

# ---------- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ + —Å—Ü–µ–Ω–∞—Ä–∏–∏ ----------
def looks_like_greeting(text: str) -> bool:
    t = text.lower().strip()
    return any(w in t for w in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤", "–¥–æ–±—Ä—ã–π", "hi", "hello"])

def asked_bot_name(text: str) -> bool:
    t = text.lower()
    return ("–∫–∞–∫" in t and "–∑–æ–≤—É—Ç" in t) or ("—Ç–≤–æ–µ –∏–º—è" in t) or ("—Ç–≤–æ—ë –∏–º—è" in t)

def maybe_problem_sentence(text: str) -> bool:
    # –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä ¬´–æ—à–∏–±–∫–∏¬ª: –≥–ª–∞–≥–æ–ª—ã –¥–µ–π—Å—Ç–≤–∏—è + —Ç–æ—Ä–≥–æ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    t = text.lower()
    verbs = ["–≤—Ö–æ–∂—É","–∑–∞—Ö–æ–∂—É","–≤—ã—Ö–æ–¥","–¥–≤–∏–≥–∞—é","–ø–µ—Ä–µ–Ω–æ—à—É","—Ñ–∏–∫—Å–∏—Ä","—É—Å—Ä–µ–¥–Ω—è","–¥–æ–±–∞–≤–ª—è","–∑–∞–∫—Ä—ã–≤–∞","–æ—Ç–∫—Ä—ã–≤–∞"]
    market = ["—Å–¥–µ–ª–∫","—Å—Ç–æ–ø","—Ç–µ–π–∫","—Å–µ—Ç–∞–ø","–ø–æ–∑–∏—Ü–∏","–ø—Ä–æ—Å–∞–¥","—Ä—ã–Ω–æ–∫","—Ç–æ—Ä–≥–æ–≤"]
    return any(v in t for v in verbs) and any(m in t for m in market)

@bot.message_handler(content_types=["text"])
def on_text(m):
    uid = m.from_user.id
    st = get_state(uid)
    text = (m.text or "").strip()

    # 0) ¬´–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?¬ª
    if asked_bot_name(text):
        bot.send_message(m.chat.id, f"–Ø ‚Äî {BOT_PUBLIC_NAME}. –†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!")
        return

    # 1) –î–∏–∞–ª–æ–≥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞: –∏–º—è ‚Üí ¬´—Ç—ã/–≤—ã¬ª
    if st["intent"] == "greet" and (st["step"] in (None, "ask_name", "ask_address")):
        data = st["data"] or {}
        if st["step"] in (None, "ask_name"):
            # –°–æ—Ö—Ä–∞–Ω–∏–º –∏–º—è (–æ—á–∏—Å—Ç–∏–º —ç–º–æ–¥–∑–∏/–ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É)
            name = text.strip().strip('¬´¬ª"\'üôÇü•≤üòÄüòÖü§ù').split()[0][:24]
            if len(name) < 1: name = None
            if name:
                save_state(uid, step="ask_address", data_patch={"name": name})
                ask_addressing(m.chat.id)
            else:
                bot.send_message(m.chat.id, "–ù–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª –∏–º—è. –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∫–æ—Ä–æ—Ç–∫–æ ‚Äî –∫–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
            return
        if st["step"] == "ask_address":
            t = text.lower()
            if t in ("—Ç—ã","–≤—ã"):
                save_state(uid, intent="idle", step=None, data_patch={"address": t})
                greet = f"–ü—Ä–∏–Ω—è—Ç–æ, { (st['data'] or {}).get('name') or '' }."
                bot.send_message(m.chat.id, f"{greet} –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é.", reply_markup=main_menu())
            else:
                ask_addressing(m.chat.id)
            return

    # 2) –ö–Ω–æ–ø–∫–∞ ¬´–æ—à–∏–±–∫–∞¬ª (–ø–µ—Ä–≤—ã–π —à–∞–≥): –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –æ—à–∏–±–∫—É?
    if st["intent"] == "error":
        if st["step"] == "ask_error":
            # –º—è–≥–∫–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è: –µ—Å–ª–∏ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ ‚Äî –æ–¥–∏–Ω —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å; –µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî —Ä–µ–∑—é–º–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if not maybe_problem_sentence(text):
                save_state(uid, step="nudge_error")
                bot.send_message(
                    m.chat.id,
                    "–ü–æ–Ω—è–ª. –ß—Ç–æ–±—ã —Ç–æ—á–Ω–µ–µ –ø–æ–º–æ—á—å, —É—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: *—á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –¥–µ–ª–∞–µ—à—å* (–≥–ª–∞–≥–æ–ª–∞–º–∏) –∏ *–≤ –∫–∞–∫–æ–π –º–æ–º–µ–Ω—Ç*?\n–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª.",
                    reply_markup=main_menu()
                )
            else:
                # –ö–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                save_state(uid, step="confirm_error", data_patch={"error_text": text})
                bot.send_message(
                    m.chat.id,
                    f"–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª —Ç–∞–∫:\n> {text}\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞? –ù–∞–ø–∏—à–∏ *–¥–∞* –∏–ª–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."
                )
            return
        if st["step"] == "nudge_error":
            # –≤—Ç–æ—Ä–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ: –ø—Ä–∏–º–µ–º –∫–∞–∫ –µ—Å—Ç—å
            save_state(uid, step="confirm_error", data_patch={"error_text": text})
            bot.send_message(
                m.chat.id,
                f"–û–∫, –∑–∞–ø–∏—Å–∞–ª:\n> {text}\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞? –ù–∞–ø–∏—à–∏ *–¥–∞* –∏–ª–∏ –ø–æ–ø—Ä–∞–≤—å."
            )
            return
        if st["step"] == "confirm_error":
            if text.lower() in ("–¥–∞","–æ–∫","–ø–æ–¥—Ö–æ–¥–∏—Ç","–≤–µ—Ä–Ω–æ","–∞–≥–∞"):
                # –ø–µ—Ä–µ—Ö–æ–¥ –∫ MERCEDES (–±–µ–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤)
                save_state(uid, step="mer_context")
                bot.send_message(m.chat.id, "–ù–∞—á–Ω—ë–º —Ä–∞–∑–±–æ—Ä. *–°–∏—Ç—É–∞—Ü–∏—è*: –≤ –∫–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ –æ–±—ã—á–Ω–æ —Å–ª—É—á–∞–µ—Ç—Å—è? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
                return
            else:
                # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ç–æ—á–Ω–∏–ª —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É ‚Äî –ø—Ä–∏–º–µ–º –∏ –ø–æ–π–¥—ë–º –¥–∞–ª—å—à–µ
                save_state(uid, step="mer_context", data_patch={"error_text": text})
                bot.send_message(m.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ. *–°–∏—Ç—É–∞—Ü–∏—è*: –∫–æ–≥–¥–∞ —ç—Ç–æ –æ–±—ã—á–Ω–æ —Å–ª—É—á–∞–µ—Ç—Å—è? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç?")
                return
        # –ö–æ—Ä–æ—Ç–∫–∞—è ¬´MERCEDES¬ª –±–µ–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤
        if st["step"] == "mer_context":
            save_state(uid, step="mer_emotions", data_patch={"mer_context": text})
            bot.send_message(m.chat.id, "–≠–º–æ—Ü–∏–∏: —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")
            return
        if st["step"] == "mer_emotions":
            save_state(uid, step="mer_thoughts", data_patch={"mer_emotions": text})
            bot.send_message(m.chat.id, "–ú—ã—Å–ª–∏: —á—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ? (1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã)")
            return
        if st["step"] == "mer_thoughts":
            save_state(uid, step="mer_behavior", data_patch={"mer_thoughts": text})
            bot.send_message(m.chat.id, "–î–µ–π—Å—Ç–≤–∏—è: —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? (–≥–ª–∞–≥–æ–ª–∞–º–∏, 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
            return
        if st["step"] == "mer_behavior":
            # —Ä–µ–∑—é–º–µ ‚Äî *–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è*, –∞ –Ω–µ –∫–æ–ø–∏–ø–∞—Å—Ç
            st2 = get_state(uid)
            d = st2["data"] or {}
            error_text = d.get("error_text","–æ—à–∏–±–∫–∞")
            resume = (
                f"–í–∏–∂—É –ø–∞—Ç—Ç–µ—Ä–Ω: –ø—Ä–∏ ¬´{d.get('mer_context','‚Ä¶')}¬ª "
                f"–≤–æ–∑–Ω–∏–∫–∞—é—Ç ¬´{d.get('mer_emotions','‚Ä¶')}¬ª, –º—ã—Å–ª–∏ ¬´{d.get('mer_thoughts','‚Ä¶')}¬ª, "
                f"–∏ —Ç—ã –¥–µ–ª–∞–µ—à—å ¬´{text}¬ª, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –æ—à–∏–±–∫–µ ¬´{error_text}¬ª."
            )
            save_state(uid, step="goal_new", data_patch={"mer_behavior": text, "pattern_resume": resume})
            bot.send_message(m.chat.id, f"{resume}\n\n–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å –∫–∞–∫ *–ø–æ–≤–µ–¥–µ–Ω–∏–µ*: –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –Ω–∞–±–ª—é–¥–∞–µ–º–æ)")
            return
        if st["step"] == "goal_new":
            # –ø–µ—Ä–µ—Ö–æ–¥ –∫ ¬´TOTE¬ª (–±–µ–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤)
            save_state(uid, step="tote_ops", data_patch={"positive_goal": text})
            bot.send_message(m.chat.id, "–û–∫. –ö–∞–∫–∏–µ *–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏* –ø–æ–º–æ–≥—É—Ç —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ? (—á–µ–∫-–ª–∏—Å—Ç 2‚Äì4 –ø—É–Ω–∫—Ç–∞)")
            return
        if st["step"] == "tote_ops":
            save_state(uid, step="tote_check", data_patch={"tote_ops": text})
            bot.send_message(m.chat.id, "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? (–∫—Ä–∏—Ç–µ—Ä–∏–π –Ω–∞ 1‚Äì3 —Å–¥–µ–ª–∫–∏)")
            return
        if st["step"] == "tote_check":
            save_state(uid, step=None, intent="idle", data_patch={"tote_check": text})
            bot.send_message(
                m.chat.id,
                "–ì–æ—Ç–æ–≤–æ! –ú—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏:\n‚Äî –ø—Ä–æ–±–ª–µ–º—É\n‚Äî –ø–∞—Ç—Ç–µ—Ä–Ω\n‚Äî –Ω–æ–≤—É—é —Ü–µ–ª—å\n‚Äî —à–∞–≥–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
                "–ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.",
                reply_markup=main_menu()
            )
            return

    # 3) –°–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥: GPT –ø–æ–º–æ–≥–∞–µ—Ç ¬´–º—è–≥–∫–æ¬ª –∏ —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–º–∫—É
    #    (–Ω–æ –µ—Å–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ¬´–æ—à–∏–±–æ—á–Ω—ã–π¬ª —Ç–µ–∫—Å—Ç ‚Äî –ø–µ—Ä–µ–≤–µ–¥—ë–º –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π ¬´–æ—à–∏–±–∫–∞¬ª).
    if maybe_problem_sentence(text) and st["intent"] not in ("error",):
        save_state(uid, intent="error", step="confirm_error", data_patch={"error_text": text})
        bot.send_message(
            m.chat.id,
            f"–ü–æ–Ω—è–ª —Ç–µ–±—è —Ç–∞–∫:\n> {text}\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞? –ù–∞–ø–∏—à–∏ *–¥–∞* –∏–ª–∏ –ø–æ–ø—Ä–∞–≤—å.",
            reply_markup=main_menu()
        )
        return

    # –∏–Ω–∞—á–µ ‚Äî –æ–¥–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è –∫–æ—É—á-—Ä–µ–ø–ª–∏–∫–∞ –æ—Ç GPT
    name = (st["data"] or {}).get("name")
    reply = coach_reply(name, text)
    bot.send_message(m.chat.id, reply, reply_markup=main_menu())

# ---------- FLASK / WEBHOOK ----------
app = Flask(__name__)

@app.get("/")
def root():
    return "OK", 200

@app.get("/health")
def health():
    return jsonify({"status":"ok","time": datetime.now(timezone.utc).isoformat()})

@app.post(f"/{WEBHOOK_PATH}")
def tg_webhook():
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if not request.is_json:
        abort(400)
    upd = request.get_json(force=True, silent=True)
    try:
        update = types.Update.de_json(upd)
        bot.process_new_updates([update])
    except Exception as e:
        log.exception(f"Webhook update error: {e}")
    return "OK", 200

if __name__ == "__main__":
    port = int(os.getenv("PORT","10000"))
    log.info("Starting Flask webhook server‚Ä¶")
    app.run(host="0.0.0.0", port=port)
