import os
import logging
from flask import Flask
import telebot
from telebot import types
from openai import OpenAI

# ========= Env =========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY     = os.getenv("OPENAI_API_KEY")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Environment")
if not OPENAI_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Environment")

# ========= OpenAI –∫–ª–∏–µ–Ω—Ç =========
client = OpenAI(api_key=OPENAI_KEY)

# ========= –õ–æ–≥–∏ =========
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ========= Telegram =========
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–Ω–∏–º–∞–µ–º webhook
try:
    bot.remove_webhook()
    logging.info("Webhook removed (ok)")
except Exception as e:
    logging.warning(f"Webhook remove warn: {e}")

# ========= –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ =========
# –ø—Ä–æ—Å—Ç–∞—è in-memory –∏—Å—Ç–æ—Ä–∏—è: {user_id: [ {role, content}, ... ]}
history = {}

def ask_gpt(uid: int, user_text: str) -> str:
    """
    –í—ã–∑–æ–≤ Chat Completions (–Ω–æ–≤—ã–π SDK).
    """
    msgs = history.setdefault(uid, [])
    msgs.append({"role": "user", "content": user_text})

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.5,
        messages=msgs
    )
    reply = (resp.choices[0].message.content or "").strip()
    msgs.append({"role": "assistant", "content": reply})
    return reply

def send_long(chat_id: int, text: str):
    """
    –†–µ–∂–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –ò –ë–ï–ó reply_to (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´–æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ¬ª).
    """
    MAX = 3500
    for i in range(0, len(text), MAX):
        bot.send_message(chat_id, text[i:i+MAX])

# ========= –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ =========
def main_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(
        types.KeyboardButton("–£ –º–µ–Ω—è –æ—à–∏–±–∫–∞"),
        types.KeyboardButton("–•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"),
        types.KeyboardButton("–ü–æ–≥–æ–≤–æ—Ä–∏–º")
    )
    kb.row(
        types.KeyboardButton("–ß–µ–∫-–ª–∏—Å—Ç"),
        types.KeyboardButton("–°–±—Ä–æ—Å")
    )
    return kb

# ========= –ö–æ–º–∞–Ω–¥—ã =========
@bot.message_handler(commands=['start'])
def cmd_start(m):
    uid = m.from_user.id
    history[uid] = []
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade.\n"
        "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=main_kb()
    )

@bot.message_handler(commands=['ping'])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=['reset'])
def cmd_reset(m):
    history[m.from_user.id] = []
    bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.", reply_markup=main_kb())

# ========= –ö–Ω–æ–ø–∫–∏-–∏–Ω—Ç–µ–Ω—Ç—ã =========
INTENT_MAP = {
    "–£ –º–µ–Ω—è –æ—à–∏–±–∫–∞":  "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º –º–æ—é —Ç–æ—Ä–≥–æ–≤—É—é –æ—à–∏–±–∫—É.",
    "–•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é": "–ü–æ–º–æ–≥–∏ —Å–æ–±—Ä–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É/—Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–¥ –º–µ–Ω—è.",
    "–ü–æ–≥–æ–≤–æ—Ä–∏–º":      "–ü—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞–µ–º –ø—Ä–æ —Ç—Ä–µ–π–¥–∏–Ω–≥ –∏ –º–æ–∏ –≤–æ–ø—Ä–æ—Å—ã.",
    "–ß–µ–∫-–ª–∏—Å—Ç":       "–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —á–µ–∫-–ª–∏—Å—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É."
}

@bot.message_handler(func=lambda x: x.text in INTENT_MAP.keys() or x.text == "–°–±—Ä–æ—Å")
def on_buttons(m):
    uid = m.from_user.id
    t = (m.text or "").strip()
    if t == "–°–±—Ä–æ—Å":
        history[uid] = []
        bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.", reply_markup=main_kb())
        return

    try:
        reply = ask_gpt(uid, INTENT_MAP[t])
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"

    send_long(m.chat.id, reply)

# ========= –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç =========
@bot.message_handler(func=lambda _: True)
def on_text(m):
    uid = m.from_user.id
    try:
        reply = ask_gpt(uid, m.text or "")
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

# ========= Keepalive (Render/UptimeRobot) =========
app = Flask(__name__)

@app.get("/")
def root():
    return "OK"

@app.get("/health")
def health():
    return "pong"

if __name__ == "__main__":
    logging.info("Starting keepalive web server‚Ä¶")
    logging.info("Starting polling‚Ä¶")
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ä—Ç–µ, —á—Ç–æ–±—ã UptimeRobot/Render –º–æ–≥–ª–∏ –ø–∏–Ω–≥–æ–≤–∞—Ç—å
    from threading import Thread
    def run_flask():
        app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
    Thread(target=run_flask, daemon=True).start()

    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
