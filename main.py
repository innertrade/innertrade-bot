import os, json, time
from datetime import datetime, timezone
from flask import Flask, request, jsonify
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from sqlalchemy import create_engine, text

# --- ENV ---
TG_TOKEN         = os.getenv("TELEGRAM_TOKEN")
DATABASE_URL     = os.getenv("DATABASE_URL")
WEBHOOK_PATH     = os.getenv("WEBHOOK_PATH", "webhook")
PUBLIC_URL       = os.getenv("PUBLIC_URL")  # https://<your-app>.onrender.com
BOT_NAME         = os.getenv("BOT_NAME", "Kai Mentor Bot")
APP_VERSION      = os.getenv("APP_VERSION", "greet-stable-2025-08-29")

if not TG_TOKEN:    raise RuntimeError("TELEGRAM_TOKEN missing")
if not DATABASE_URL:raise RuntimeError("DATABASE_URL missing")
if not PUBLIC_URL:  raise RuntimeError("PUBLIC_URL missing")

# --- App / DB / Bot ---
app = Flask(__name__)
engine = create_engine(DATABASE_URL, pool_pre_ping=True, future=True)
bot = telebot.TeleBot(TG_TOKEN, parse_mode="HTML", threaded=False)

# --- DB helpers ---
def load_state(user_id: int):
    sql = text("""
        INSERT INTO user_state (user_id, intent, step, data, updated_at)
        VALUES (:uid, 'greet', 'ask_form', '{}'::jsonb, now())
        ON CONFLICT (user_id) DO NOTHING;
        SELECT intent, step, COALESCE(data, '{}'::jsonb) AS data
        FROM user_state WHERE user_id=:uid;
    """)
    with engine.begin() as conn:
        res = conn.execute(sql, {"uid": user_id}).fetchone()
        if not res:
            return {"intent":"greet","step":"ask_form","data":{}}
        return {"intent":res.intent, "step":res.step, "data":dict(res.data)}

def save_state(user_id: int, intent=None, step=None, patch_data: dict | None=None):
    # merge JSONB patch (shallow)
    set_bits = []
    params = {"uid": user_id}
    if intent is not None:
        set_bits.append("intent=:intent")
        params["intent"] = intent
    if step is not None:
        set_bits.append("step=:step")
        params["step"] = step
    if patch_data:
        set_bits.append("data = COALESCE(data, '{}'::jsonb) || :data::jsonb")
        params["data"] = json.dumps(patch_data, ensure_ascii=False)
    if not set_bits:
        set_bits.append("updated_at=now()")
    sql = text(f"""
        INSERT INTO user_state (user_id, intent, step, data, updated_at)
        VALUES (:uid, COALESCE(:intent,'greet'), COALESCE(:step,'ask_form'),
                COALESCE(:data,'{{}}')::jsonb, now())
        ON CONFLICT (user_id) DO UPDATE
        SET {", ".join(set_bits)}, updated_at=now();
    """)
    with engine.begin() as conn:
        conn.execute(sql, params)

# --- UI helpers ---
def kb_yes_no(yes="–î–∞", no="–ù–µ—Ç"):
    m = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    m.add(KeyboardButton(yes), KeyboardButton(no))
    return m

def kb_tu_vy():
    m = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    m.add(KeyboardButton("—Ç—ã"), KeyboardButton("–≤—ã"))
    return m

def greet_text(first_name: str, address: str|None):
    base = f"üëã –ü—Ä–∏–≤–µ—Ç{',' if first_name else ''} {first_name}!" if first_name else "üëã –ü—Ä–∏–≤–µ—Ç!"
    if not address:
        return base + "\n–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî <b>—Ç—ã</b> –∏–ª–∏ <b>–≤—ã</b>? (–Ω–∞–ø–∏—à–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ)"
    else:
        # –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º—ã
        return base + "\n–ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ. –ò–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ."

def t(addr: str|None, tu: str, vy: str) -> str:
    # –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã
    return tu if addr == "ty" else vy

# --- Core behaviour ---
def ensure_address(user_id: int, chat_id: int, first_name: str|None):
    st = load_state(user_id)
    addr = st["data"].get("address")
    if addr in ("ty","vy"):
        return st
    # —Å–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É
    save_state(user_id, intent="greet", step="ask_form", patch_data={})
    bot.send_message(chat_id, greet_text(first_name or "", None), reply_markup=kb_tu_vy())
    return None  # –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–æ–ø—Ä–æ—Å –∏ –≤—ã—Ö–æ–¥–∏–º

def handle_address_choice(user_id: int, chat_id: int, msg_text: str, first_name: str|None):
    val = msg_text.strip().lower()
    if val not in ("—Ç—ã","–≤—ã"):
        bot.send_message(chat_id, "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–Ω–æ —Å–ª–æ–≤–æ: <b>—Ç—ã</b> –∏–ª–∏ <b>–≤—ã</b>.", reply_markup=kb_tu_vy())
        return
    addr = "ty" if val == "—Ç—ã" else "vy"
    save_state(user_id, intent="greet", step="free_talk", patch_data={"address": addr})
    bot.send_message(chat_id, greet_text(first_name or "", addr))
    # –º—è–≥–∫–∏–π —Å—Ç–∞—Ä—Ç
    bot.send_message(chat_id, t(addr,
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ ‚Äî —è —Å–ª—É—à–∞—é.",
        "–ï—Å–ª–∏ —É–¥–æ–±–Ω–æ, –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ ‚Äî —è —Å–ª—É—à–∞—é."
    ))

# --- Flask routes ---
@app.get("/")
def root():
    return "ok", 200

@app.get("/health")
def health():
    return jsonify({"status":"ok","time":datetime.now(timezone.utc).isoformat()})

@app.get("/status")
def status():
    # –±–µ–∑ user-context –ø—Ä–æ—Å—Ç–æ –æ—Ç–¥–∞—Ç—å –≤–µ—Ä—Å–∏—é
    return jsonify({"ok": True, "time": datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S%z"),
                    "version": APP_VERSION})

# --- Telegram webhook ---
@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if request.headers.get("Content-Type") != "application/json":
        return "bad", 400
    update = request.get_json(silent=True)
    if not update:
        return "bad", 400
    bot.process_new_updates([telebot.types.Update.de_json(update)])
    return "ok", 200

# --- Commands ---
@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.reply_to(m, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    st = load_state(m.from_user.id)
    bot.reply_to(m, json.dumps({
        "ok": True,
        "time": datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S%z"),
        "intent": st["intent"], "step": st["step"], "db": "ok"
    }, ensure_ascii=False, indent=2))

@bot.message_handler(commands=["reset", "start"])
def cmd_reset(m):
    # —Å–±—Ä–æ—Å –¥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ñ–æ—Ä–º—ã
    save_state(m.from_user.id, intent="greet", step="ask_form", patch_data={"address": None})
    bot.send_message(m.chat.id, greet_text(m.from_user.first_name or "", None), reply_markup=kb_tu_vy())

# --- Text handler ---
@bot.message_handler(func=lambda msg: True, content_types=["text"])
def on_text(m):
    user_id = m.from_user.id
    chat_id = m.chat.id
    txt = (m.text or "").strip()

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º/–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è
    st = ensure_address(user_id, chat_id, m.from_user.first_name)
    if st is None:
        return  # —É–∂–µ —Å–ø—Ä–æ—Å–∏–ª–∏ "—Ç—ã/–≤—ã"

    addr = st["data"].get("address")  # "ty" | "vy"
    intent = st["intent"]
    step = st["step"]

    # 2) –ï—Å–ª–∏ –º—ã –Ω–∞ —à–∞–≥–µ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º—ã ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    if step == "ask_form":
        return handle_address_choice(user_id, chat_id, txt, m.from_user.first_name)

    # 3) ¬´–°–æ—Ñ—Ç-—Å—Ç–∞—Ä—Ç¬ª: –ø–µ—Ä–≤—ã–µ —Ä–µ–ø–ª–∏–∫–∏ –±–µ–∑ –∂—ë—Å—Ç–∫–æ–π —Å—Ö–µ–º—ã
    if intent in ("greet","chat") and step in ("free_talk", None):
        # –ø—Ä–æ—Å—Ç—ã–µ –∫–ª—é—á–∏: –ø–æ–º–æ–≥–∞—Ç—å –≥–æ–≤–æ—Ä–∏—Ç—å, –∑–∞–¥–∞–≤–∞—Ç—å –º—è–≥–∫–∏–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        if len(txt) < 3:
            bot.send_message(chat_id, t(addr,
                "–†–∞—Å—Å–∫–∞–∂–∏ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî —á—Ç–æ –∏–º–µ–Ω–Ω–æ –º–µ—à–∞–µ—Ç —Å–µ–π—á–∞—Å –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ?",
                "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ —á—É—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî —á—Ç–æ –∏–º–µ–Ω–Ω–æ –º–µ—à–∞–µ—Ç —Å–µ–π—á–∞—Å –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ?"
            ))
            return
        # –ú—è–≥–∫–æ–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ ¬´—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å–ª–æ–≤–Ω–æ¬ª
        bot.send_message(chat_id, t(addr,
            "–°–ª—ã—à—É: –µ—Å—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π –≤ –º–æ–º–µ–Ω—Ç–µ —Å–¥–µ–ª–∫–∏. –•–æ—á–µ—à—å, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–∑–±–µ—Ä—ë–º —ç—Ç–æ –ø–æ —à–∞–≥–∞–º?",
            "–°–ª—ã—à—É: –µ—Å—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π –≤ –º–æ–º–µ–Ω—Ç–µ —Å–¥–µ–ª–∫–∏. –•–æ—Ç–∏—Ç–µ, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–∑–±–µ—Ä—ë–º —ç—Ç–æ –ø–æ —à–∞–≥–∞–º?"
        ), reply_markup=kb_yes_no(yes=t(addr, "–î–∞, —Ä–∞–∑–±–µ—Ä—ë–º", "–î–∞, —Ä–∞–∑–±–µ—Ä—ë–º"), no=t(addr,"–ü–æ–∫–∞ –ø–æ–≥–æ–≤–æ—Ä–∏–º","–ü–æ–∫–∞ –ø–æ–≥–æ–≤–æ—Ä–∏–º")))
        save_state(user_id, intent="chat", step="offer_deep_dive")
        return

    if intent == "chat" and step == "offer_deep_dive":
        if txt.lower() in ("–¥–∞","–¥–∞, —Ä–∞–∑–±–µ—Ä—ë–º","–¥–∞ —Ä–∞–∑–±–µ—Ä—ë–º","—Ä–∞–∑–±–µ—Ä—ë–º","–æ–∫","—Ö–æ—á—É"):
            # –ó–¥–µ—Å—å –¥–∞–ª—å—à–µ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –≤–∞—à —Å—Ü–µ–Ω–∞—Ä–∏–π MERCEDES/TOTE –∏–ª–∏ GPT-offscript ‚Äî –Ω–æ —Ñ–æ—Ä–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è —É–∂–µ —Å—Ç–∞–±–∏–ª—å–Ω–∞.
            bot.send_message(chat_id, t(addr,
                "–û–∫–µ–π. –ù–∞—á–Ω—ë–º —Å –∫—Ä–∞—Ç–∫–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏ –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö (–Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è). –ü–æ—Å–ª–µ ‚Äî –ø–æ–π–¥—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.",
                "–û–∫–µ–π. –ù–∞—á–Ω—ë–º —Å –∫—Ä–∞—Ç–∫–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏ –≤ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö (–Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è). –ü–æ—Å–ª–µ ‚Äî –ø–æ–π–¥—ë–º —à–∞–≥ –∑–∞ —à–∞–≥–æ–º."
            ))
            save_state(user_id, intent="error_flow", step="ask_error")
        else:
            bot.send_message(chat_id, t(addr,
                "–•–æ—Ä–æ—à–æ. –¢–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –µ—â—ë —Ç—Ä–µ–≤–æ–∂–∏—Ç ‚Äî —è —Ç—É—Ç.",
                "–•–æ—Ä–æ—à–æ. –¢–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –µ—â—ë —Ç—Ä–µ–≤–æ–∂–∏—Ç ‚Äî —è —Ç—É—Ç."
            ))
        return

    # –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –Ω–æ –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –∏–Ω–æ–µ
    if intent == "error_flow":
        if step == "ask_error":
            # –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–µ—Ä–≤–æ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –¥–∞–ª—å—à–µ
            save_state(user_id, intent="error_flow", step="mercedes_start",
                       patch_data={"last_error": txt})
            bot.send_message(chat_id, t(addr,
                "–ü—Ä–∏–Ω—è—Ç–æ. –ü–µ—Ä–µ–π–¥—ë–º –∫ —Ä–∞–∑–±–æ—Ä—É. –°–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)?",
                "–ü—Ä–∏–Ω—è—Ç–æ. –ü–µ—Ä–µ–π–¥—ë–º –∫ —Ä–∞–∑–±–æ—Ä—É. –°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)?"
            ))
            return
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–µ–∞–ª–∏–∑—É—é—Ç—Å—è –≤ –≤–∞—à–µ–º ¬´—Å—Ü–µ–Ω–∞—Ä–Ω–æ–º¬ª –º–æ–¥—É–ª–µ.
        bot.send_message(chat_id, t(addr,
            "–Ø –∑–∞–ø–æ–º–Ω–∏–ª –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É. –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–±–æ—Ä –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É.",
            "–Ø –∑–∞–ø–æ–º–Ω–∏–ª –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É. –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑–±–æ—Ä –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–≤–æ–±–æ–¥–Ω–æ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä—É."
        ))
        return

    # –§–æ–ª–±—ç–∫
    bot.send_message(chat_id, t(addr,
        "–ü–æ–Ω—è–ª. –ú–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–±–æ—Ä—É. –ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç—ë—à—å?",
        "–ü–æ–Ω—è–ª. –ú–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–±–æ—Ä—É. –ß—Ç–æ –ø—Ä–µ–¥–ø–æ—á—Ç—ë—Ç–µ?"
    ))

# --- Local run (Render –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–∞–∫ `python main.py`) ---
if __name__ == "__main__":
    # –õ–æ–∫–∞–ª—å–Ω–æ –±–µ–∑ –≤–µ–±—Ö—É–∫–∞ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å polling –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, –Ω–æ –¥–ª—è Render –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±—Ö—É–∫
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
