import os
import re
import json
import logging
from datetime import datetime
from typing import Optional, Dict, Any

from flask import Flask, request, abort, jsonify
from telebot import TeleBot, types
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError, OperationalError

# ---------------- LOGGING ----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("innertrade")

# ---------------- ENV ----------------
TELEGRAM_TOKEN    = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY    = os.getenv("OPENAI_API_KEY")
DATABASE_URL      = os.getenv("DATABASE_URL")
PUBLIC_URL        = os.getenv("PUBLIC_URL")   # e.g. https://innertrade-bot.onrender.com
WEBHOOK_PATH      = os.getenv("WEBHOOK_PATH") # e.g. wbhk_9t3x
TG_WEBHOOK_SECRET = os.getenv("TG_WEBHOOK_SECRET") # any random string, must match BotFather setWebhook secret_token

if not TELEGRAM_TOKEN:    raise RuntimeError("TELEGRAM_TOKEN missing")
if not OPENAI_API_KEY:    raise RuntimeError("OPENAI_API_KEY missing")
if not PUBLIC_URL:        raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")
if not WEBHOOK_PATH:      raise RuntimeError("WEBHOOK_PATH missing (random slug)")
if not TG_WEBHOOK_SECRET: raise RuntimeError("TG_WEBHOOK_SECRET missing")

# ---------------- OPENAI ----------------
# SDK v1.x
from openai import OpenAI
oai = OpenAI(api_key=OPENAI_API_KEY)

def gpt_coach_reply(prompt: str, locale: str = "ru") -> str:
    """
    –ö–æ—Ä–æ—Ç–∫–∏–π, —Ç—ë–ø–ª—ã–π, –∫–æ—É—á-–æ—Ç–≤–µ—Ç. –ë–µ–∑ ¬´–ª–µ–∫—Ü–∏–π¬ª, 1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –º—è–≥–∫–∏—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è.
    """
    try:
        sys = (
            "–¢—ã –∫–æ—É—á-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ. "
            "–¶–µ–ª—å ‚Äî –ø–æ–º–æ—á—å —É—Ç–æ—á–Ω–∏—Ç—å –º—ã—Å–ª—å –∏ –º—è–≥–∫–æ –≤–µ—Ä–Ω—É—Ç—å –∫ –≤–æ–ø—Ä–æ—Å—É. –ú–∞–∫—Å–∏–º—É–º 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
        )
        msg = [
            {"role": "system", "content": sys},
            {"role": "user", "content": prompt}
        ]
        res = oai.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.4,
            max_tokens=220,
            messages=msg,
        )
        return (res.choices[0].message.content or "").strip()
    except Exception as e:
        log.warning(f"OpenAI fallback: {e}")
        return "–ü–æ–Ω–∏–º–∞—é. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ —á—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, –∏ —è –ø–æ–º–æ–≥—É. –ï—Å–ª–∏ —É–¥–æ–±–Ω–æ ‚Äî –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —à–∞–≥–∞–º –∏–∑ –º–µ–Ω—é."

# ---------------- DB ----------------
engine = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True)
        with engine.connect() as conn:
            # —Å–æ–∑–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ (–µ—Å–ª–∏ –æ—Ç—Å—Ç–∞–ª–æ)
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS users (
              user_id    BIGINT PRIMARY KEY,
              mode       TEXT NOT NULL DEFAULT 'course',
              created_at TIMESTAMPTZ DEFAULT now(),
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS user_state (
              user_id    BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
              intent     TEXT,
              step       TEXT,
              data       JSONB,
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
        log.info("DB connected & ensured minimal schema")
    except OperationalError as e:
        log.warning(f"DB not ready: {e}")
        engine = None
else:
    log.info("DATABASE_URL not set ‚Äî running without DB persistence")

def db_exec(sql: str, params: Optional[Dict[str, Any]] = None):
    if not engine: return None
    with engine.begin() as conn:
        return conn.execute(text(sql), params or {})

def ensure_user(uid: int):
    if not engine: return
    db_exec("INSERT INTO users(user_id) VALUES (:uid) ON CONFLICT DO NOTHING", {"uid": uid})

def get_state(uid: int) -> Dict[str, Any]:
    if not engine: return {"intent":"idle","step":None,"data":{}}
    ensure_user(uid)
    row = db_exec("SELECT intent, step, COALESCE(data,'{}'::jsonb) as data FROM user_state WHERE user_id=:uid", {"uid":uid}).mappings().first()
    if not row:
        db_exec("INSERT INTO user_state(user_id,intent,step,data) VALUES(:uid,'idle',NULL,'{}'::jsonb) ON CONFLICT DO NOTHING", {"uid":uid})
        return {"intent":"idle","step":None,"data":{}}
    return {"intent":row["intent"], "step":row["step"], "data":row["data"]}

def set_state(uid: int, intent: Optional[str]=None, step: Optional[str]=None, data: Optional[Dict[str,Any]]=None):
    if not engine: return
    ensure_user(uid)
    cur = get_state(uid)
    if intent is None: intent = cur["intent"]
    if step   is None: step   = cur["step"]
    merged = cur["data"]
    if data: merged = {**merged, **data}
    db_exec("""
    INSERT INTO user_state(user_id,intent,step,data,updated_at)
    VALUES(:uid,:intent,:step,CAST(:data AS jsonb), now())
    ON CONFLICT (user_id) DO UPDATE
    SET intent=:intent, step=:step, data=CAST(:data AS jsonb), updated_at=now()
    """, {"uid": uid, "intent": intent, "step": step, "data": json.dumps(merged)})

# ---------------- TELEGRAM ----------------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

def send(chat_id: int, text: str, kb=None):
    try:
        bot.send_message(chat_id, text, reply_markup=kb or main_menu())
    except Exception as e:
        log.error(f"send err: {e}")

# ---------------- HELPERS: small NLP ----------------
_greet_re = re.compile(r"^(–ø—Ä–∏–≤–µ—Ç|–∑–¥—Ä–∞–≤|–¥–æ–±—Ä–æ–µ|–¥–æ–±—Ä–æ–≥–æ|hi|hello)\b", re.I)
_passport_q_re = re.compile(r"(—á—Ç–æ —Ç–∞–∫–æ–µ|—á—Ç–æ –∑–∞|–∑–∞—á–µ–º.*)–ø–∞—Å–ø–æ—Ä—Ç", re.I)
_vague_re = re.compile(r"\b(–∏–Ω–æ–≥–¥–∞|—á–∞—Å—Ç–æ|–±—ã–≤–∞–µ—Ç|–ø–æ[- ]—Ä–∞–∑–Ω–æ–º—É|–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—Å—è|–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω(—ã–µ|—ã—Ö)|–Ω–µ –∑–Ω–∞—é|—Å–ª–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å)\b", re.I)

def is_greeting(txt: str) -> bool:
    return bool(_greet_re.search(txt.strip()))

def is_passport_question(txt: str) -> bool:
    return bool(_passport_q_re.search(txt))

def is_vague(txt: str) -> bool:
    # –∫–æ—Ä–æ—Ç–∫–æ + –º–∞—Ä–∫–µ—Ä—ã ¬´–≤–æ–¥—ã¬ª
    return len(txt.strip()) < 8 or bool(_vague_re.search(txt))

# ---------------- SCENES: ERROR (MERCEDES) ----------------
MER_STEPS = [
    ("ask_error",     "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É **1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏** –Ω–∞ —É—Ä–æ–≤–Ω–µ *–ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞*.\n–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª."),
    ("ask_ctx",       "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç –æ—à–∏–±–∫–µ? *(1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)*"),
    ("ask_emotions",  "–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? –ö–∞–∫ –æ—â—É—â–∞–µ—Ç—Å—è –≤ —Ç–µ–ª–µ? *(–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)*"),
    ("ask_thoughts",  "–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? *(1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã)*"),
    ("ask_behavior",  "–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ —Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≥–æ–ª–∞–º–∏. *(1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)*"),
    ("ask_beliefs",   "–£–ë–ï–ñ–î–ï–ù–ò–Ø/–¶–ï–ù–ù–û–°–¢–ò. –ü–æ—á–µ–º—É –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç–∞–∫ ¬´–Ω–∞–¥–æ¬ª? *(1 –º—ã—Å–ª—å/—É—Å—Ç–∞–Ω–æ–≤–∫–∞)*"),
    ("sum_up",        "–°—É–ø–µ—Ä. –Ø —Å–æ–±–µ—Ä—É –ø–∞—Ç—Ç–µ—Ä–Ω –∏ –ø—Ä–µ–¥–ª–æ–∂—É —Ü–µ–ª—å –ø–æ TOTE."),
    ("tote_goal",     "TOTE ‚Äî –¶–ï–õ–¨ (Test). –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π **–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ** –≤ –±—É–¥—É—â–µ–º.\n–ü—Ä–∏–º–µ—Ä: ¬´–í—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 100% —É—Å–ª–æ–≤–∏–π –∏ –Ω–µ –¥–≤–∏–≥–∞—Ç—å —Å—Ç–æ–ø/—Ç–µ–π–∫ –¥–æ —Ä–∞–∑–≤—è–∑–∫–∏¬ª."),
    ("tote_ops",      "TOTE ‚Äî –û–ü–ï–†–ê–¶–ò–ò (Operate). 2‚Äì3 —à–∞–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —É–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–ª—å.\n–ü—Ä–∏–º–µ—Ä: —á–µ–∫-–ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º; —Ç–∞–π–º–µ—Ä/–¥—ã—Ö–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞."),
    ("tote_check",    "TOTE ‚Äî –ü–†–û–í–ï–†–ö–ê (Test). –ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ —Ü–µ–ª—å —É–¥–µ—Ä–∂–∞–Ω–∞? 1‚Äì2 –∫—Ä–∏—Ç–µ—Ä–∏—è."),
    ("tote_exit",     "TOTE ‚Äî –í–´–•–û–î (Exit). –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî —á—Ç–æ –∑–∞–∫—Ä–µ–ø–∏–º? –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —á—Ç–æ –∏–∑–º–µ–Ω–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª?")
]

def to_next_step(current: str) -> Optional[str]:
    ids = [s[0] for s in MER_STEPS]
    try:
        idx = ids.index(current)
        return ids[idx+1] if idx+1 < len(ids) else None
    except ValueError:
        return "ask_error"

def prompt_for(step: str) -> str:
    mp = {k:v for k,v in MER_STEPS}
    return mp.get(step, MER_STEPS[0][1])

def ensure_concrete_or_ask(chat_id: int, txt: str, retry_prompt: str, examples: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ¬´–≤–æ–¥—É¬ª. –ï—Å–ª–∏ —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç–æ ‚Äî –º—è–≥–∫–æ –ø—Ä–æ—Å–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É.
    return True ‚Äî –≤—Å—ë –æ–∫, –º–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ; False ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —à–∞–≥–µ.
    """
    if is_vague(txt):
        send(chat_id,
             f"–ß—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –°–µ–π—á–∞—Å –∑–≤—É—á–∏—Ç –æ–±—â–æ.\n"
             f"üîé –ü—Ä–∏–º–µ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏: {examples}\n\n{retry_prompt}")
        return False
    return True

# ---------------- COMMANDS ----------------
@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m):
    uid = m.from_user.id
    ensure_user(uid)
    set_state(uid, intent="idle", step=None, data={})
    send(m.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /status /ping", main_menu())

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    send(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    # –ø—Ä–æ—Å—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    db_ok = False
    try:
        if engine:
            db_exec("SELECT 1")
            db_ok = True
    except SQLAlchemyError:
        db_ok = False
    st = get_state(m.from_user.id)
    send(m.chat.id,
         f"‚úÖ –ë–æ—Ç –∂–∏–≤–æ–π\n"
         f"DB: {'ok' if db_ok else '‚Äî'}\n"
         f"Intent: {st.get('intent') or 'idle'} / Step: {st.get('step') or '-'}\n"
         f"Time: {datetime.utcnow().isoformat(timespec='seconds')}Z")

# ---------------- INTENT BUTTONS ----------------
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def btn_error(m):
    uid = m.from_user.id
    set_state(uid, intent="error", step="ask_error", data={"mer":{}})
    send(m.chat.id, prompt_for("ask_error"))

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def btn_strategy(m):
    uid = m.from_user.id
    set_state(uid, intent="strategy", step=None, data={})
    send(m.chat.id,
         "–°–æ–±–µ—Ä—ë–º –¢–° –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É:\n"
         "1) –ü–æ–¥—Ö–æ–¥/—Ä—ã–Ω–∫–∏/–¢–§\n2) –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞\n3) –°—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥\n4) –†–∏—Å–∫/–ª–∏–º–∏—Ç—ã\n"
         "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å **–ø–æ–¥—Ö–æ–¥–∞/—Ä—ã–Ω–∫–æ–≤/–¢–§**?", main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def btn_passport(m):
    uid = m.from_user.id
    set_state(uid, intent="passport", step=None)
    send(m.chat.id,
         "¬´–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞¬ª ‚Äî —ç—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ø—Å–∏—Ö–æ–ø—Ä–æ—Ñ–∏–ª—è:\n"
         "—Ü–µ–ª–∏, —Ä—ã–Ω–∫–∏/–¢–§, —Å—Ç–∏–ª—å, —Ä–∏—Å–∫–∏, —Ç–æ–ø-–æ—à–∏–±–∫–∏, –∞—Ä—Ö–µ—Ç–∏–ø/—Ä–æ–ª–∏, —Ç—Ä–∏–≥–≥–µ—Ä—ã, —Ä–∏—Ç—É–∞–ª—ã.\n"
         "–ì–æ—Ç–æ–≤ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É: —Ä—ã–Ω–∫–∏/–¢–§/—Å—Ç–∏–ª—å?", main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def btn_week(m):
    uid = m.from_user.id
    set_state(uid, intent="week_panel", step=None)
    send(m.chat.id,
         "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏:\n‚Ä¢ –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ (1 —É–∑–µ–ª)\n‚Ä¢ 1‚Äì2 —Ü–µ–ª–∏\n‚Ä¢ –õ–∏–º–∏—Ç—ã\n‚Ä¢ –£—Ç—Ä–æ/–≤–µ—á–µ—Ä –º–∏–Ω–∏-—á–µ–∫-–∏–Ω\n‚Ä¢ –†–µ—Ç—Ä–æ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏", main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def btn_panic(m):
    uid = m.from_user.id
    set_state(uid, intent="panic", step=None)
    send(m.chat.id,
         "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
         "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä\n5) –î–∞–ª—å—à–µ –ø–æ –ø–ª–∞–Ω—É: —Å–æ–∫—Ä–∞—Ç–∏—Ç—å/–∑–∞–∫—Ä—ã—Ç—å/–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ –ø—Ä–∞–≤–∏–ª—É", main_menu())

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def btn_start_help(m):
    uid = m.from_user.id
    set_state(uid, intent="start_help", step=None)
    send(m.chat.id,
         "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω)\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°\n"
         "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º ‚Äî **–ø–∞—Å–ø–æ—Ä—Ç** –∏–ª–∏ **—Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏**?", main_menu())

# ---------------- ERROR FLOW HANDLER ----------------
@bot.message_handler(func=lambda msg: get_state(msg.from_user.id).get("intent") == "error")
def handle_error_flow(m):
    uid = m.from_user.id
    st = get_state(uid)
    step = st.get("step") or "ask_error"
    data = st.get("data") or {}
    mer = data.get("mer", {})

    txt = (m.text or "").strip()

    # –î–æ–ø. –º—è–≥–∫–∞—è –≤–µ—Ç–∫–∞: –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç —É—Ç–æ—á–Ω–∏—Ç—å
    if re.search(r"\b(—É—Ç–æ—á–Ω(—é|–∏—Ç—å)|–ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å|–º–æ–∂–Ω–æ –¥–æ–ø(–≤|.)–Ω–∏—Ç—å)\b", txt, re.I):
        send(m.chat.id, "–î–∞, –∫–æ–Ω–µ—á–Ω–æ. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ ‚Äî *–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞*. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ—à—å?")
        return

    if step == "ask_error":
        # –¢—Ä–µ–±—É–µ–º –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É
        if is_vague(txt) or len(txt) < 8:
            send(m.chat.id,
                 "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ *–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞*.\n"
                 "–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª.")
            return
        mer["error"] = txt
        set_state(uid, intent="error", step="ask_ctx", data={"mer":mer})
        send(m.chat.id, prompt_for("ask_ctx"))
        return

    if step == "ask_ctx":
        ok = ensure_concrete_or_ask(
            m.chat.id, txt, "–û–ø–∏—à–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á—É—Ç—å —Ç–æ—á–Ω–µ–µ ‚Äî –∫–æ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç?",
            "¬´–ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏ –ª–æ—Å–µ–π¬ª, ¬´–∫–æ–≥–¥–∞ –≤–µ—Å—å –¥–µ–Ω—å –±–µ–∑ —Å–µ—Ç–∞–ø–∞¬ª, ¬´–Ω–∞ –Ω–æ–≤–æ—Å—Ç—è—Ö –ø–æ —Å—Ç–∞–≤–∫–µ¬ª, ¬´–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–∏¬ª"
        )
        if not ok: return
        mer["context"] = txt
        set_state(uid, intent="error", step="ask_emotions", data={"mer":mer})
        send(m.chat.id, prompt_for("ask_emotions"))
        return

    if step == "ask_emotions":
        if is_vague(txt):
            send(m.chat.id, "–ü–∞—Ä–∞ —Å–ª–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç—Ä–µ–≤–æ–≥–∞, —Å–ø–µ—à–∫–∞, –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–¥–∏).")
            return
        mer["emotions"] = txt
        set_state(uid, intent="error", step="ask_thoughts", data={"mer":mer})
        send(m.chat.id, prompt_for("ask_thoughts"))
        return

    if step == "ask_thoughts":
        if len(txt) < 4:
            send(m.chat.id, "–î–∞–π 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã –º—ã—Å–ª–µ–π –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏.")
            return
        mer["thoughts"] = txt
        set_state(uid, intent="error", step="ask_behavior", data={"mer":mer})
        send(m.chat.id, prompt_for("ask_behavior"))
        return

    if step == "ask_behavior":
        if is_vague(txt):
            send(m.chat.id, "–û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≥–æ–ª–∞–º–∏: —á—Ç–æ –¥–µ–ª–∞–µ—à—å –¥–æ/–≤–æ –≤—Ä–µ–º—è/–ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞?")
            return
        mer["behavior"] = txt
        set_state(uid, intent="error", step="ask_beliefs", data={"mer":mer})
        send(m.chat.id, prompt_for("ask_beliefs"))
        return

    if step == "ask_beliefs":
        if is_vague(txt):
            send(m.chat.id, "–û–¥–Ω–æ –ø—Ä–æ—Å—Ç–æ–µ —É–±–µ–∂–¥–µ–Ω–∏–µ/—É—Å—Ç–∞–Ω–æ–≤–∫–∞. –ü—Ä–∏–º–µ—Ä: ¬´–Ω–µ–ª—å–∑—è —É–ø—É—Å–∫–∞—Ç—å —à–∞–Ω—Å¬ª.")
            return
        mer["beliefs"] = txt
        set_state(uid, intent="error", step="sum_up", data={"mer":mer})
        # –ö–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
        summary = (
            f"–ü–æ–Ω—è–ª.\n\n*–û—à–∏–±–∫–∞*: {mer.get('error','‚Äî')}\n"
            f"*–ö–æ–Ω—Ç–µ–∫—Å—Ç*: {mer.get('context','‚Äî')}\n"
            f"*–≠–º–æ—Ü–∏–∏*: {mer.get('emotions','‚Äî')}\n"
            f"*–ú—ã—Å–ª–∏*: {mer.get('thoughts','‚Äî')}\n"
            f"*–ü–æ–≤–µ–¥–µ–Ω–∏–µ*: {mer.get('behavior','‚Äî')}\n"
            f"*–£–±–µ–∂–¥–µ–Ω–∏—è*: {mer.get('beliefs','‚Äî')}\n"
        )
        send(m.chat.id, summary)
        send(m.chat.id, prompt_for("tote_goal"))
        set_state(uid, intent="error", step="tote_goal", data={"mer":mer})
        return

    if step == "tote_goal":
        if is_vague(txt):
            send(m.chat.id, "–¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–±–ª—é–¥–∞–µ–º–æ–π. –ü—Ä–∏–º–µ—Ä: ¬´–∂–¥—É 100% —É—Å–ª–æ–≤–∏–π –≤—Ö–æ–¥–∞ –∏ –Ω–µ –¥–≤–∏–≥–∞—é —Å—Ç–æ–ø/—Ç–µ–π–∫ –¥–æ —Ä–∞–∑–≤—è–∑–∫–∏¬ª.")
            return
        mer["tote_goal"] = txt
        set_state(uid, intent="error", step="tote_ops", data={"mer":mer})
        send(m.chat.id, prompt_for("tote_ops"))
        return

    if step == "tote_ops":
        if len(txt) < 8:
            send(m.chat.id, "–î–∞–π 2‚Äì3 —à–∞–≥–∞ (—á–µ–∫-–ª–∏—Å—Ç, –¥—ã—Ö–∞–Ω–∏–µ/—Ç–∞–π–º–µ—Ä, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–µ –∏ —Ç.–ø.).")
            return
        mer["tote_ops"] = txt
        set_state(uid, intent="error", step="tote_check", data={"mer":mer})
        send(m.chat.id, prompt_for("tote_check"))
        return

    if step == "tote_check":
        if is_vague(txt):
            send(m.chat.id, "–ù—É–∂–Ω—ã 1‚Äì2 –∫—Ä–∏—Ç–µ—Ä–∏—è. –ü—Ä–∏–º–µ—Ä: ¬´3 —Å–¥–µ–ª–∫–∏ –ø–æ–¥—Ä—è–¥ –±–µ–∑ —Å–¥–≤–∏–≥–∞ —Å—Ç–æ–ø–∞¬ª –∏–ª–∏ ¬´–≤—Å–µ –ø—É–Ω–∫—Ç—ã —á–µ–∫-–ª–∏—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã¬ª.")
            return
        mer["tote_check"] = txt
        set_state(uid, intent="error", step="tote_exit", data={"mer":mer})
        send(m.chat.id, prompt_for("tote_exit"))
        return

    if step == "tote_exit":
        if len(txt) < 4:
            send(m.chat.id, "–ö–æ—Ä–æ—Ç–∫–æ: —á—Ç–æ –∑–∞–∫—Ä–µ–ø–∏–º –ø—Ä–∏ —É—Å–ø–µ—Ö–µ / —á—Ç–æ –∏–∑–º–µ–Ω–∏–º –ø—Ä–∏ –Ω–µ—É—Å–ø–µ—Ö–µ?")
            return
        mer["tote_exit"] = txt
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É errors (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ). –ü–æ–∫–∞ —Å–∫–ª–∞–¥–∏—Ä—É–µ–º –≤ state.
        set_state(uid, intent="idle", step=None, data={"mer":mer})
        send(m.chat.id,
             "–ì–æ—Ç–æ–≤–æ. –°–æ—Ö—Ä–∞–Ω–∏–ª —Ä–∞–∑–±–æ—Ä.\n–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å –≤ *–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏* –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ *–¢–°*?",
             main_menu())
        return

# ---------------- SMART FALLBACK ----------------
@bot.message_handler(content_types=["text"])
def fallback(m):
    uid = m.from_user.id
    txt = (m.text or "").strip()

    # 1) –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if is_greeting(txt):
        send(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å. –ú–æ–∂–µ–º –∫–æ—Ä–æ—Ç–∫–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ –ø–æ–π—Ç–∏ –ø–æ —à–∞–≥–∞–º. –ß—Ç–æ —Å–µ–π—á–∞—Å –≤–∞–∂–Ω–µ–µ?")
        return

    # 2) –í–æ–ø—Ä–æ—Å ¬´—á—Ç–æ —Ç–∞–∫–æ–µ –ø–∞—Å–ø–æ—Ä—Ç¬ª
    if is_passport_question(txt):
        send(m.chat.id,
             "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞ ‚Äî —ç—Ç–æ –≤–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫/–ø—Å–∏—Ö–æ–ø—Ä–æ—Ñ–∏–ª—è: —Ü–µ–ª–∏, —Ä—ã–Ω–∫–∏/–¢–§, —Å—Ç–∏–ª—å, —Ä–∏—Å–∫–∏, —Ç–æ–ø-–æ—à–∏–±–∫–∏, –∞—Ä—Ö–µ—Ç–∏–ø/—Ä–æ–ª–∏, —Ç—Ä–∏–≥–≥–µ—Ä—ã, —Ä–∏—Ç—É–∞–ª—ã.\n"
             "–ù—É–∂–µ–Ω, —á—Ç–æ–±—ã –≤—Å–µ —Ä–µ—à–µ–Ω–∏—è –±—ã–ª–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ –∏ –Ω–µ ¬´–ø–ª–∞–≤–∞–ª–∏¬ª. –ì–æ—Ç–æ–≤—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É?")
        return

    # 3) –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –∏–¥—ë—Ç —Å—Ü–µ–Ω–∞ ¬´–æ—à–∏–±–∫–∞¬ª, –Ω–æ –ø—Ä–∏—à—ë–ª —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –º—è–≥–∫–∏–π –∫–æ—É—á-–æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT
    st = get_state(uid)
    if (st.get("intent") == "error") and ("?" in txt or len(txt) > 80):
        coach = gpt_coach_reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑–±–æ—Ä–∞ –æ—à–∏–±–∫–∏. –°–æ–æ–±—â–µ–Ω–∏–µ: {txt}")
        send(m.chat.id, f"{coach}\n\n(–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –º–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å.)")
        return

    # 4) –ò–Ω–∞—á–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ—É—á-–æ—Ç–≤–µ—Ç + –º–µ–Ω—é
    coach = gpt_coach_reply(txt)
    send(m.chat.id, coach, main_menu())

# ---------------- FLASK / WEBHOOK ----------------
app = Flask(__name__)

@app.get("/")
def root():
    return "OK", 200

@app.get("/health")
def health():
    return jsonify({"status":"ok","time": datetime.utcnow().isoformat() + "Z"})

# Telegram webhook endpoint (secret header required)
@app.post(f"/{WEBHOOK_PATH}")
def tg_webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    try:
        update = request.get_json(force=True, silent=False)
        bot.process_new_updates([types.Update.de_json(update)])
    except Exception as e:
        log.exception(f"webhook err: {e}")
    return "OK", 200

# ---------------- MAIN ----------------
if __name__ == "__main__":
    port = int(os.getenv("PORT", "10000"))
    log.info(f"Starting Flask on :{port}, webhook path /{WEBHOOK_PATH}")
    app.run(host="0.0.0.0", port=port)
