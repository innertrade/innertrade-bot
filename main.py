import os, logging, json, threading
from datetime import datetime, timezone
from typing import Optional, Dict, Any

from flask import Flask, request, abort, jsonify
from telebot import TeleBot, types
from openai import OpenAI

from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ---------- ENV ----------
TELEGRAM_TOKEN   = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY")
DATABASE_URL     = os.getenv("DATABASE_URL")
PUBLIC_URL       = os.getenv("PUBLIC_URL")          # e.g. https://innertrade-bot.onrender.com
WEBHOOK_PATH     = os.getenv("WEBHOOK_PATH", "wbhk")  # e.g. wbhk_9t3x
TG_WEBHOOK_SECRET= os.getenv("TG_WEBHOOK_SECRET")     # arbitrary UUID-like

if not TELEGRAM_TOKEN:    raise RuntimeError("TELEGRAM_TOKEN is missing")
if not OPENAI_API_KEY:    raise RuntimeError("OPENAI_API_KEY is missing")
if not PUBLIC_URL:        raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")
if not TG_WEBHOOK_SECRET: raise RuntimeError("TG_WEBHOOK_SECRET missing")

# ---------- OPENAI ----------
client = OpenAI(api_key=OPENAI_API_KEY)

def ai_coach_reply(prompt: str) -> str:
    """
    –ö–æ—Ä–æ—Ç–∫–∏–π, —Ç—ë–ø–ª—ã–π –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º—è–≥–∫–æ –≤–µ—Ä–Ω—É—Ç—å –∫ –≤–æ–ø—Ä–æ—Å—É.
    –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫ ‚Äî –≤–µ—Ä–Ω—ë–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É.
    """
    try:
        completion = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role":"system","content":"–¢—ã —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∫–æ—É—á –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π –∫ –≤–æ–ø—Ä–æ—Å—É."},
                {"role":"user","content":prompt}
            ],
            temperature=0.5,
            max_tokens=120
        )
        return completion.choices[0].message.content.strip()
    except Exception as e:
        logging.warning(f"OpenAI error: {e}")
        return "–ü–æ–Ω–∏–º–∞—é. –î–∞–≤–∞–π –≤–µ—Ä–Ω—ë–º—Å—è –∫ –≤–æ–ø—Ä–æ—Å—É, —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ."

# ---------- DB ----------
engine = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True)
        with engine.begin() as conn:
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS users (
              user_id    BIGINT PRIMARY KEY,
              mode       TEXT NOT NULL DEFAULT 'course',
              created_at TIMESTAMPTZ DEFAULT now(),
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS user_state (
              user_id    BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
              intent     TEXT,
              step       TEXT,
              data       JSONB,
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS errors (
              id                BIGSERIAL PRIMARY KEY,
              user_id           BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
              error_text        TEXT NOT NULL,
              pattern_behavior  TEXT,
              pattern_emotion   TEXT,
              pattern_thought   TEXT,
              positive_goal     TEXT,
              tote_goal         TEXT,
              tote_ops          TEXT,
              tote_check        TEXT,
              tote_exit         TEXT,
              checklist_pre     TEXT,
              checklist_post    TEXT,
              created_at        TIMESTAMPTZ DEFAULT now()
            );
            """))
        logging.info("DB connected & migrated")
    except OperationalError as e:
        logging.warning(f"DB not available: {e}")
        engine = None
else:
    logging.info("DATABASE_URL not set ‚Äî running without DB persistence (ephemeral)")

def db_exec(sql: str, params: Optional[Dict[str,Any]] = None):
    if not engine: return None
    with engine.begin() as conn:
        return conn.execute(text(sql), params or {})

def ensure_user(user_id: int):
    db_exec("INSERT INTO users(user_id) VALUES (:u) ON CONFLICT (user_id) DO NOTHING", {"u": user_id})

def load_state(user_id: int) -> Dict[str,Any]:
    if not engine: return {"intent":"idle","step":None,"data":{}}
    row = db_exec("SELECT intent, step, COALESCE(data,'{}'::jsonb) AS data FROM user_state WHERE user_id=:u", {"u":user_id}).fetchone()
    if not row:
        save_state(user_id, "idle", None, {})
        return {"intent":"idle","step":None,"data":{}}
    return {"intent":row.intent, "step":row.step, "data":row.data}

def save_state(user_id: int, intent: Optional[str]=None, step: Optional[str]=None, data: Optional[dict]=None):
    if not engine: return
    # merge strategy
    current = load_state(user_id)
    new_intent = intent if intent is not None else current.get("intent")
    new_step   = step   if step   is not None else current.get("step")
    new_data   = current.get("data", {})
    if data:
        # shallow merge
        new_data.update(data)
    db_exec("""
    INSERT INTO user_state(user_id, intent, step, data, updated_at)
    VALUES (:u, :i, :s, CAST(:d AS jsonb), now())
    ON CONFLICT (user_id) DO UPDATE
    SET intent=EXCLUDED.intent, step=EXCLUDED.step, data=EXCLUDED.data, updated_at=now()
    """, {"u":user_id, "i":new_intent, "s":new_step, "d":json.dumps(new_data)})

def store_error_record(user_id: int, payload: Dict[str,Any]):
    if not engine: return
    db_exec("""
    INSERT INTO errors(user_id, error_text, pattern_behavior, pattern_emotion, pattern_thought,
                       positive_goal, tote_goal, tote_ops, tote_check, tote_exit, checklist_pre, checklist_post)
    VALUES (:uid, :err, :pb, :pe, :pt, :goal, :tgoal, :tops, :tchk, :texit, :chkpre, :chkpost)
    """, {
        "uid": user_id,
        "err": payload.get("error_text",""),
        "pb":  payload.get("pattern_behavior",""),
        "pe":  payload.get("pattern_emotion",""),
        "pt":  payload.get("pattern_thought",""),
        "goal":payload.get("positive_goal",""),
        "tgoal":payload.get("tote_goal",""),
        "tops": payload.get("tote_ops",""),
        "tchk": payload.get("tote_check",""),
        "texit":payload.get("tote_exit",""),
        "chkpre":payload.get("checklist_pre",""),
        "chkpost":payload.get("checklist_post",""),
    })

# ---------- TELEGRAM ----------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

# ---------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–ò–ê–õ–û–ì–ê ----------
CLARIFIERS = [
    "–ö–æ–≥–¥–∞ —ç—Ç–æ —Å–ª—É—á–∞–µ—Ç—Å—è —á–∞—â–µ –≤—Å–µ–≥–æ? (–¥–Ω–∏/—Å–∏—Ç—É–∞—Ü–∏–∏)",
    "–ß—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—à–∏–±–∫—É? (—Ç—Ä–∏–≥–≥–µ—Ä/–º—ã—Å–ª—å/—Å–æ–±—ã—Ç–∏–µ)",
    "–ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è? (–≥–ª–∞–≥–æ–ª–∞–º–∏)"
]

MERCEDES_STEPS = [
    ("context", "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"),
    ("emotions","–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? –ö–∞–∫ –æ—â—É—â–∞–µ—Ç—Å—è –≤ —Ç–µ–ª–µ? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)"),
    ("thoughts","–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ü–∏—Ç–∞—Ç—ã)"),
    ("behavior","–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ —Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? (–≥–ª–∞–≥–æ–ª–∞–º–∏, 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"),
    ("beliefs","–£–ë–ï–ñ–î–ï–ù–ò–Ø/–¶–ï–ù–ù–û–°–¢–ò. –ü–æ—á–µ–º—É ¬´–∫–∞–∂–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º¬ª —Ç–∞–∫ –ø–æ—Å—Ç—É–ø–∞—Ç—å?"),
    ("state","–°–û–°–¢–û–Ø–ù–ò–ï. –í –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—ã—á–Ω–æ –≤—Ö–æ–¥–∏—à—å? (—Ç—Ä–µ–≤–æ–≥–∞/—Å–ø–µ—à–∫–∞/–∫–æ–Ω—Ç—Ä–æ–ª—å –∏ —Ç.–ø.)")
]

TOTE_STEPS = [
    ("t_goal",  "TOTE ‚Äî –¶–ï–õ–¨ (Test). –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Ü–µ–ª—å –±—É–¥—É—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ (–ø–æ–∑–∏—Ç–∏–≤–Ω–æ, –Ω–∞–±–ª—é–¥–∞–µ–º–æ)."),
    ("t_ops",   "TOTE ‚Äî –î–ï–ô–°–¢–í–ò–Ø (Operate). –ö–∞–∫–∏–µ 2‚Äì3 —à–∞–≥–∞ –ø–æ–º–æ–≥—É—Ç —É–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–ª—å?"),
    ("t_check", "TOTE ‚Äî –ü–†–û–í–ï–†–ö–ê (Test). –ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ —Ü–µ–ª—å —É–¥–µ—Ä–∂–∞–Ω–∞? (–∫—Ä–∏—Ç–µ—Ä–∏–∏)"),
    ("t_exit",  "TOTE ‚Äî –í–´–•–û–î (Exit). –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî —á—Ç–æ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º? –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —á—Ç–æ –º–µ–Ω—è–µ–º?")
]

def ask_next_mercedes(user_id: int, chat_id: int):
    st = load_state(user_id)
    data = st.get("data", {})
    mdat = data.get("mercedes", {})
    for key, question in MERCEDES_STEPS:
        if key not in mdat:
            save_state(user_id, step=f"mer_{key}", data=data)
            bot.send_message(chat_id, question, reply_markup=main_menu())
            return
    # –≤—Å—ë —Å–æ–±—Ä–∞–Ω–æ ‚Üí —Ä–µ–∑—é–º–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ TOTE
    summary = (
        f"*–†–µ–∑—é–º–µ MERCEDES*\n"
        f"- –ö–æ–Ω—Ç–µ–∫—Å—Ç: {mdat.get('context','‚Äî')}\n"
        f"- –≠–º–æ—Ü–∏–∏: {mdat.get('emotions','‚Äî')}\n"
        f"- –ú—ã—Å–ª–∏: {mdat.get('thoughts','‚Äî')}\n"
        f"- –ü–æ–≤–µ–¥–µ–Ω–∏–µ: {mdat.get('behavior','‚Äî')}\n"
        f"- –£–±–µ–∂–¥–µ–Ω–∏—è/—Ü–µ–Ω–Ω–æ—Å—Ç–∏: {mdat.get('beliefs','‚Äî')}\n"
        f"- –°–æ—Å—Ç–æ—è–Ω–∏–µ: {mdat.get('state','‚Äî')}\n\n"
        "–ü–µ—Ä–µ–π–¥—ë–º –∫ *TOTE*?"
    )
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–î–∞", callback_data="go_tote"))
    bot.send_message(chat_id, summary, reply_markup=kb)

def ask_next_tote(user_id: int, chat_id: int):
    st = load_state(user_id)
    data = st.get("data", {})
    tdat = data.get("tote", {})
    for key, question in TOTE_STEPS:
        if key not in tdat:
            save_state(user_id, step=f"tote_{key}", data=data)
            bot.send_message(chat_id, question, reply_markup=main_menu())
            return
    # –≤—Å—ë TOTE —Å–æ–±—Ä–∞–Ω–æ ‚Üí —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏
    payload = {
        "error_text": data.get("error_confirmed",""),
        "pattern_behavior": data.get("pattern_behavior",""),
        "pattern_emotion":  data.get("pattern_emotion",""),
        "pattern_thought":  data.get("pattern_thought",""),
        "positive_goal":    tdat.get("t_goal",""),
        "tote_goal":        tdat.get("t_goal",""),
        "tote_ops":         tdat.get("t_ops",""),
        "tote_check":       tdat.get("t_check",""),
        "tote_exit":        tdat.get("t_exit",""),
        "checklist_pre":    "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–∞–ø ‚Üí –ø–∞—É–∑–∞ 10 –≤–¥–æ—Ö–æ–≤ ‚Üí –ø—Ä–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Ü–µ–ª—å",
        "checklist_post":   "–§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–ª–∞–Ω—É ‚Üí –∫–æ—Ä–æ—Ç–∫–∞—è –∑–∞–ø–∏—Å—å –∏—Ç–æ–≥–∞"
    }
    store_error_record(user_id, payload)
    bot.send_message(chat_id, "–ì–æ—Ç–æ–≤–æ! –ò—Ç–æ–≥ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏?", reply_markup=main_menu())
    save_state(user_id, intent="idle", step=None, data={})

# ---------- –ö–û–ú–ê–ù–î–´ ----------
@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="idle", step=None, data={})
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*.\n–ú–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ –∏–ª–∏ –ø–æ–π—Ç–∏ –ø–æ —à–∞–≥–∞–º.\n–ö–æ–º–∞–Ω–¥—ã: /status /ping",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    st = load_state(m.from_user.id)
    intent = st.get("intent")
    step = st.get("step")
    data = st.get("data", {})
    parts = [f"*–°—Ç–∞—Ç—É—Å*: –∂–∏–≤–æ–π ‚úÖ", f"*Intent*: {intent or '‚Äî'}", f"*Step*: {step or '‚Äî'}"]
    if data.get("error_raw"):
        parts.append(f"*–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ—à–∏–±–∫–∏*: {data.get('error_raw')}")
    if data.get("error_confirmed"):
        parts.append(f"*–û—à–∏–±–∫–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞)*: {data.get('error_confirmed')}")
    bot.send_message(m.chat.id, "\n".join(parts), reply_markup=main_menu())

# ---------- –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ ----------
@bot.message_handler(func=lambda msg: msg.text=="üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def intent_error(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="error", step="ask_problem", data={"clarifiers":[]})
    bot.send_message(
        m.chat.id,
        "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ *–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞*.\n"
        "–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text=="üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def intent_strategy(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="strategy", step="intro")
    bot.send_message(
        m.chat.id,
        "–û–∫, —Å–æ–±–µ—Ä—ë–º –¢–° –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É:\n1) –ü–æ–¥—Ö–æ–¥/–¢–§/—Ä—ã–Ω–æ–∫\n2) –í—Ö–æ–¥\n3) –°—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥\n4) –†–∏—Å–∫/–ª–∏–º–∏—Ç—ã\n(–í —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ –¥–µ–ª–∞–µ–º –£—Ä–æ–∫ 1. –°—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–¥–∫–ª—é—á–∏–º –¥–∞–ª—å—à–µ.)",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text=="üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def intent_passport(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="passport", step="intro")
    bot.send_message(m.chat.id, "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞: –ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.\n–ü–æ–∫–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –æ—à–∏–±–∫–æ–π.", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text=="üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def intent_panel(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="week_panel", step="intro")
    bot.send_message(m.chat.id, "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏: —Ñ–æ–∫—É—Å, 1‚Äì2 —Ü–µ–ª–∏, –ª–∏–º–∏—Ç—ã. –ü–æ–¥–∫–ª—é—á–∏–º –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏.", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text=="üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def intent_panic(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="panic", step="protocol")
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–æ–º\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text=="ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def intent_start_help(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="start_help", step="offer")
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –∏ —Ä–∞–∑–±–µ—Ä—ë–º —Ç–µ–∫—É—â—É—é –æ—à–∏–±–∫—É (MERCEDES+TOTE)\n2) –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –ü–µ—Ä–µ–π–¥—ë–º –∫ —Å–∫–µ–ª–µ—Ç—É –¢–°",
        reply_markup=main_menu()
    )

# ---------- INLINE: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –æ—à–∏–±–∫–∏ / –ø–µ—Ä–µ—Ö–æ–¥—ã ----------
@bot.callback_query_handler(func=lambda c: c.data in ["err_confirm_yes","err_confirm_no","go_tote"])
def cb_confirm(c):
    uid = c.from_user.id
    st  = load_state(uid)
    data= st.get("data", {})
    if c.data == "err_confirm_yes":
        # –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ ‚Üí —Å—Ç–∞—Ä—Ç MERCEDES
        bot.answer_callback_query(c.id, "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏. –ü–æ–π–¥—ë–º –ø–æ MERCEDES.")
        save_state(uid, intent="error", step="mer_context", data=data)
        ask_next_mercedes(uid, c.message.chat.id)
    elif c.data == "err_confirm_no":
        bot.answer_callback_query(c.id, "–û–∫, –ø–æ–ø—Ä–∞–≤–∏–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É. –ù–∞–ø–∏—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ—á–Ω–µ–µ.")
        save_state(uid, step="clarify_fix", data=data)
        bot.send_message(c.message.chat.id, "–ö–∞–∫ –±—ã —Ç—ã —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª —Ç–æ—á–Ω–µ–µ? (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)")
    elif c.data == "go_tote":
        bot.answer_callback_query(c.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ TOTE")
        save_state(uid, step="tote_t_goal", data=data)
        ask_next_tote(uid, c.message.chat.id)

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê –ü–û –®–ê–ì–ê–ú ----------
@bot.message_handler(content_types=["text"])
def handle_text(m):
    uid = m.from_user.id
    ensure_user(uid)
    st   = load_state(uid)
    intent = st.get("intent","idle")
    step   = st.get("step")
    data   = st.get("data", {})

    txt = (m.text or "").strip()

    # 1) –°—Ü–µ–Ω–∞—Ä–∏–π "–û—à–∏–±–∫–∞" ‚Äî —Å–±–æ—Ä —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–π
    if intent == "error" and step == "ask_problem":
        data["error_raw"] = txt
        data["clarifiers"] = []
        save_state(uid, step="clarify_1", data=data)
        bot.send_message(m.chat.id, f"–ü–æ–Ω—è–ª. {CLARIFIERS[0]}", reply_markup=main_menu())
        return

    if intent == "error" and (step or "").startswith("clarify_"):
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∞
        if txt.endswith("?") and len(txt) < 200:
            reply = ai_coach_reply(f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {txt}")
            bot.send_message(m.chat.id, reply, reply_markup=main_menu())

        clar = data.get("clarifiers", [])
        clar.append(txt)
        data["clarifiers"] = clar

        idx = 1 if step=="clarify_1" else (2 if step=="clarify_2" else 99)

        if idx == 1:
            save_state(uid, step="clarify_2", data=data)
            bot.send_message(m.chat.id, CLARIFIERS[1], reply_markup=main_menu())
            return
        if idx == 2:
            # –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–∏–Ω—Ç–µ–∑ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            # –ø–æ–ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å ¬´–ø–æ–≤–µ–¥–µ–Ω–∏–µ/—ç–º–æ—Ü–∏–∏/–º—ã—Å–ª–∏¬ª —Ö–æ—Ç—å –∫–∞–∫-—Ç–æ
            behavior_hint = ""
            emotion_hint  = ""
            thought_hint  = ""

            # –ø—Ä–æ—Å—Ç—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
            for line in clar:
                low = line.lower()
                if any(w in low for w in ["–¥–µ–ª–∞—é","–≤—Ö–æ–∂—É","–æ—Ç–∫—Ä—ã–≤–∞—é","–∑–∞–∫—Ä—ã–≤–∞—é","–¥–≤–∏–≥–∞—é","–ø–µ—Ä–µ—Ö–æ–∂—É","—É—Å—Ä–µ–¥–Ω—è—é"]):
                    behavior_hint = line
                if any(w in low for w in ["—Ç—Ä–µ–≤–æ–≥", "—Å—Ç—Ä–∞—Ö", "–ø–∞–Ω–∏–∫", "–Ω–∞–ø—Ä—è–∂", "—Å–ø–µ—à", "–¥–∞–≤–ª–µ–Ω"]):
                    emotion_hint = line
                if any(w in low for w in ["–¥—É–º–∞—é","–∫–∞–∂–µ—Ç—Å—è","–º—ã—Å–ª","–Ω–∞–≤–µ—Ä–Ω–æ–µ","–≤–¥—Ä—É–≥","—É—Å–ø–µ—é","—É–ø—É—â—É"]):
                    thought_hint = line

            summary = f"–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫: *{data.get('error_raw','') or '‚Äî'}*.\n\n" \
                      f"–¢–æ, —á—Ç–æ —Ç—ã –æ–ø–∏—Å–∞–ª(–∞):\n" \
                      f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç/—Ç—Ä–∏–≥–≥–µ—Ä—ã: {clar[0] if len(clar)>0 else '‚Äî'}\n" \
                      f"‚Ä¢ –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {clar[1] if len(clar)>1 else '‚Äî'}\n"
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("–î–∞, —Ç–∞–∫ –∏ –µ—Å—Ç—å", callback_data="err_confirm_yes"),
                   types.InlineKeyboardButton("–ù–µ—Ç, –ø–æ–ø—Ä–∞–≤–ª—é", callback_data="err_confirm_no"))
            data["pattern_behavior"] = behavior_hint
            data["pattern_emotion"]  = emotion_hint
            data["pattern_thought"]  = thought_hint
            data["error_confirmed"]  = data.get("error_raw","")
            save_state(uid, step="wait_err_confirm", data=data)
            bot.send_message(m.chat.id, summary, reply_markup=kb)
            return

        # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        save_state(uid, step="clarify_2", data=data)
        bot.send_message(m.chat.id, CLARIFIERS[1], reply_markup=main_menu())
        return

    if intent == "error" and step == "clarify_fix":
        data["error_raw"] = txt
        data["clarifiers"] = []
        save_state(uid, step="clarify_1", data=data)
        bot.send_message(m.chat.id, CLARIFIERS[0], reply_markup=main_menu())
        return

    # 2) MERCEDES
    if intent == "error" and (step or "").startswith("mer_"):
        mdat = data.get("mercedes", {})
        key = step.replace("mer_","")
        mdat[key] = txt
        data["mercedes"] = mdat
        save_state(uid, data=data)
        ask_next_mercedes(uid, m.chat.id)
        return

    # 3) TOTE
    if intent == "error" and (step or "").startswith("tote_"):
        tdat = data.get("tote", {})
        key = step.replace("tote_","")
        tdat[key] = txt
        data["tote"] = tdat
        save_state(uid, data=data)
        ask_next_tote(uid, m.chat.id)
        return

    # 4) –û–±—â–∏–π —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ (–º—è–≥–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ + –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Ü–µ–ª—è–º)
    if intent in ["idle","start_help","passport","week_panel","strategy","panic", None]:
        # –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –ò–ò, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        reply = ai_coach_reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç: {txt}. –û—Ç–≤–µ—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç: —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ—à–∏–±–∫—É –∏–ª–∏ –∑–∞–¥–∞—Ç—å —Ü–µ–ª—å –Ω–∞ –Ω–µ–¥–µ–ª—é.")
        bot.send_message(m.chat.id, reply, reply_markup=main_menu())
        if intent == "idle":
            bot.send_message(m.chat.id, "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –Ω–∞–∂–º–∏ ¬´üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞¬ª, —Ä–∞–∑–±–µ—Ä—ë–º –ø–æ —à–∞–≥–∞–º (MERCEDES ‚Üí TOTE).", reply_markup=main_menu())
        return

    # –§–æ–ª–±—ç–∫
    bot.send_message(m.chat.id, "–ü—Ä–∏–Ω—è–ª. –î–∞–≤–∞–π –ø—Ä–æ–¥–æ–ª–∂–∏–º. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî /menu", reply_markup=main_menu())

# ---------- FLASK / WEBHOOK ----------
app = Flask(__name__)

@app.get("/")
def root():
    return "OK / Innertrade v7"

@app.get("/health")
def health():
    return jsonify({"status":"ok","time":datetime.now(timezone.utc).isoformat()})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–ª–∞ (‚âà1–ú–ë)
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    update = request.get_data().decode("utf-8")
    try:
        bot.process_new_updates([types.Update.de_json(json.loads(update))])
    except Exception as e:
        logging.exception(f"update error: {e}")
    return "OK"

def set_webhook():
    url = f"{PUBLIC_URL}/{WEBHOOK_PATH}"
    ok = bot.set_webhook(url=url, secret_token=TG_WEBHOOK_SECRET, allowed_updates=["message","callback_query"])
    logging.info(f"Set webhook: {ok} url={url}")

def start_polling():
    # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    try:
        bot.remove_webhook()
    except Exception as e:
        logging.warning(f"remove webhook warn: {e}")
    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(timeout=30, long_polling_timeout=30, skip_pending=True)

if __name__ == "__main__":
    MODE = os.getenv("MODE", "webhook").lower()  # webhook | polling
    if MODE == "polling":
        t = threading.Thread(target=start_polling, daemon=True)
        t.start()
    else:
        # webhook-—Ä–µ–∂–∏–º
        set_webhook()
    port = int(os.getenv("PORT","10000"))
    logging.info(f"Serving Flask on 0.0.0.0:{port} (mode={MODE})")
    app.run(host="0.0.0.0", port=port)
