import os
import json
import logging
from datetime import datetime
from flask import Flask, request, abort, jsonify

from telebot import TeleBot, types
from telebot.types import Update

from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("innertrade")

# ---------- ENV ----------
TELEGRAM_TOKEN     = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY")  # –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ —ç—Ç–æ–º —Ä–µ–ª–∏–∑–µ
DATABASE_URL       = os.getenv("DATABASE_URL")

PUBLIC_URL         = os.getenv("PUBLIC_URL")      # https://<your-app>.onrender.com
WEBHOOK_PATH       = os.getenv("WEBHOOK_PATH")    # –Ω–∞–ø—Ä–∏–º–µ—Ä: tg
TG_WEBHOOK_SECRET  = os.getenv("TG_WEBHOOK_SECRET")

for k, v, hint in [
    ("TELEGRAM_TOKEN", TELEGRAM_TOKEN, "BotFather token"),
    ("DATABASE_URL",   DATABASE_URL,   "Neon Postgres URL"),
    ("PUBLIC_URL",     PUBLIC_URL,     "e.g., https://innertrade-bot.onrender.com"),
    ("WEBHOOK_PATH",   WEBHOOK_PATH,   "short path like 'tg'"),
    ("TG_WEBHOOK_SECRET", TG_WEBHOOK_SECRET, "any random secret"),
]:
    if not v:
        raise RuntimeError(f"{k} missing ({hint})")

# ---------- DB ----------
engine = None
try:
    engine = create_engine(DATABASE_URL, pool_pre_ping=True, future=True)
    with engine.connect() as conn:
        # –ù–µ–±–æ–ª—å—à–∏–µ ¬´—Å—Ç—Ä–∞—Ö—É—é—â–∏–µ¬ª –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É
        conn.execute(text("""
        CREATE TABLE IF NOT EXISTS users (
          user_id BIGINT PRIMARY KEY,
          mode TEXT NOT NULL DEFAULT 'course',
          created_at TIMESTAMPTZ DEFAULT now(),
          updated_at TIMESTAMPTZ DEFAULT now()
        );
        """))
        conn.execute(text("""
        CREATE TABLE IF NOT EXISTS user_state (
          user_id BIGINT PRIMARY KEY,
          intent  TEXT,
          step    TEXT,
          data    JSONB,
          updated_at TIMESTAMPTZ DEFAULT now()
        );
        """))
        conn.execute(text("""
        CREATE TABLE IF NOT EXISTS errors (
          id BIGSERIAL PRIMARY KEY,
          user_id BIGINT NOT NULL,
          error_text TEXT NOT NULL,
          pattern_behavior  TEXT,
          pattern_emotion   TEXT,
          pattern_thought   TEXT,
          positive_goal     TEXT,
          tote_goal         TEXT,
          tote_ops          TEXT,
          tote_check        TEXT,
          tote_exit         TEXT,
          checklist_pre     TEXT,
          checklist_post    TEXT,
          created_at TIMESTAMPTZ DEFAULT now()
        );
        """))
    log.info("DB connected & basic ensure OK")
except OperationalError as e:
    raise RuntimeError(f"DB connection failed: {e}")

# ---------- HELPERS: DB STATE ----------
def ensure_user(uid: int):
    with engine.begin() as conn:
        conn.execute(
            text("INSERT INTO users(user_id) VALUES (:uid) ON CONFLICT (user_id) DO NOTHING"),
            {"uid": uid}
        )

def get_state(uid: int):
    ensure_user(uid)
    with engine.begin() as conn:
        row = conn.execute(
            text("SELECT intent, step, COALESCE(data, '{}'::jsonb) AS data FROM user_state WHERE user_id=:uid"),
            {"uid": uid}
        ).mappings().first()
        if not row:
            conn.execute(
                text("INSERT INTO user_state(user_id, intent, step, data) VALUES (:uid,'idle',NULL,'{}'::jsonb)"),
                {"uid": uid}
            )
            return {"intent": "idle", "step": None, "data": {}}
        return {"intent": row["intent"], "step": row["step"], "data": row["data"]}

def set_state(uid: int, *, intent=None, step=None, data_merge: dict | None = None):
    st = get_state(uid)
    new_intent = intent if intent is not None else st["intent"]
    new_step   = step   if step   is not None else st["step"]
    new_data   = st["data"] or {}
    if data_merge:
        new_data.update(data_merge)
    with engine.begin() as conn:
        conn.execute(
            text("""
            INSERT INTO user_state(user_id, intent, step, data, updated_at)
            VALUES(:uid, :intent, :step, CAST(:data AS jsonb), now())
            ON CONFLICT (user_id) DO UPDATE
            SET intent=:intent, step=:step, data=CAST(:data AS jsonb), updated_at=now()
            """),
            {"uid": uid, "intent": new_intent, "step": new_step, "data": json.dumps(new_data)}
        )

def upsert_error_partial(uid: int, fields: dict) -> int:
    """
    –°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å –≤ errors –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ (—Ç—Ä–µ–±—É–µ—Ç—Å—è error_text),
    –¥–∞–ª–µ–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç id –∑–∞–ø–∏—Å–∏.
    –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö—Ä–∞–Ω–∏–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º user_state.data["current_error_id"].
    """
    st = get_state(uid)
    eid = st["data"].get("current_error_id")
    with engine.begin() as conn:
        if not eid:
            # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –Ω—É–∂–µ–Ω error_text
            if "error_text" not in fields or not fields["error_text"]:
                raise ValueError("error_text is required to start errors row")
            eid = conn.execute(
                text("""INSERT INTO errors(user_id, error_text) VALUES(:uid, :et) RETURNING id"""),
                {"uid": uid, "et": fields["error_text"]}
            ).scalar_one()
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state
            set_state(uid, data_merge={"current_error_id": eid})
            fields = {k: v for k, v in fields.items() if k != "error_text"}
        # –æ–±–Ω–æ–≤–ª—è–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
        if fields:
            sets = ", ".join([f"{k}=:{k}" for k in fields.keys()])
            params = {"id": eid, **fields}
            conn.execute(text(f"UPDATE errors SET {sets} WHERE id=:id"), params)
    return eid

# ---------- TELEGRAM ----------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

# ---------- –ë–õ–û–ö –£–†–û–ö 1: –û—à–∏–±–∫–∞ ‚Üí MERCEDES ‚Üí TOTE ----------
# ‚Äî Done-—É—Å–ª–æ–≤–∏–µ —ç—Ç–∞–ø–∞: —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞ + –∑–∞–ø–æ–ª–Ω–µ–Ω—ã pattern_* + positive_goal + TOTE (goal/ops/check/exit).

MERCEDES_ORDER = [
    ("context",   "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç –æ—à–∏–±–∫–µ? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"),
    ("emotions",  "–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? –ö–∞–∫ —ç—Ç–æ –æ—â—É—â–∞–µ—Ç—Å—è –≤ —Ç–µ–ª–µ? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)"),
    ("thoughts",  "–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (—Ü–∏—Ç–∞—Ç–∞–º–∏, 1‚Äì2 —Ñ—Ä–∞–∑—ã)"),
    ("behavior",  "–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ —Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≥–ª–∞–≥–æ–ª–∞–º–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)."),
    # —É–±–µ–∂–¥–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –ù–ï –∫–æ–ø–∞–µ–º ‚Äî –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —É—Ä–æ–∫–∞ 3
    ("state",     "–°–û–°–¢–û–Ø–ù–ò–ï. –í –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Ö–æ–¥–∏–ª? (–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ/–∞–∑–∞—Ä—Ç/–∫–æ–Ω—Ç—Ä–æ–ª—å/—É—Å—Ç–∞–ª–æ—Å—Ç—å ‚Äî –≤—ã–±–µ—Ä–∏ –∏–ª–∏ –æ–ø–∏—à–∏)"),
]

def ask_next_mercedes(uid: int, chat_id: int):
    st = get_state(uid)
    done_keys = st["data"].get("mercedes_done", [])
    for key, prompt in MERCEDES_ORDER:
        if key not in done_keys:
            bot.send_message(chat_id, f"_{prompt}_", reply_markup=main_menu())
            set_state(uid, step=f"mer_{key}")
            return
    # –°–±–æ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = st["data"]
    emotions  = data.get("mer_emotions", "")
    thoughts  = data.get("mer_thoughts", "")
    behavior  = data.get("mer_behavior", "")
    summary = (
        "–†–µ–∑—é–º–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞:\n"
        f"‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω–∏–µ: {behavior or '‚Äî'}\n"
        f"‚Ä¢ –≠–º–æ—Ü–∏–∏: {emotions or '‚Äî'}\n"
        f"‚Ä¢ –ú—ã—Å–ª–∏: {thoughts or '‚Äî'}\n\n"
        "–ï—Å–ª–∏ –æ–∫ ‚Äî –Ω–∞–ø–∏—à–∏ *–ì–æ—Ç–æ–≤–æ*, –∏ –ø–µ—Ä–µ–π–¥—ë–º –∫ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏."
    )
    # —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ —Ç–∞–±–ª–∏—Ü—É errors pattern_* –ø–æ–ª—è
    upsert_error_partial(uid, {
        "pattern_behavior": behavior,
        "pattern_emotion":  emotions,
        "pattern_thought":  thoughts
    })
    bot.send_message(chat_id, summary, reply_markup=main_menu())
    set_state(uid, step="mer_confirm")

def is_too_vague(text_: str) -> bool:
    s = text_.strip().lower()
    return len(s) < 8 or s in {"–Ω–µ –∑–Ω–∞—é", "–∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å", "—Å–ª–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å", "–Ω–µ —É–≤–µ—Ä–µ–Ω"}

def enforce_behavior_level(text_: str) -> str:
    """
    –ï—Å–ª–∏ –ø–æ—Ö–æ–∂–µ –Ω–∞ —É–±–µ–∂–¥–µ–Ω–∏–µ/–æ–±—â–∏–µ —Å–ª–æ–≤–∞ ‚Äî –º—è–≥–∫–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ–º –∫ –ø–æ–≤–µ–¥–µ–Ω–∏—é.
    """
    s = text_.strip()
    if any(x in s.lower() for x in ["–Ω—É–∂–Ω–æ", "–Ω–∞–¥–æ", "–≤—Å–µ–≥–¥–∞", "–Ω–∏–∫–æ–≥–¥–∞", "–¥–æ–ª–∂–µ–Ω", "–ø—Ä–∞–≤", "–æ—à–∏–±", "—Ä—ã–Ω–æ–∫"]):
        return f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –¥–µ–π—Å—Ç–≤–∏—è: {s}\n‚Üí –ü—Ä–∏–º–µ—Ä: ¬´–í—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª / ¬´–ü–µ—Ä–µ–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª."
    return s

def build_checklists(behavior: str) -> tuple[str, str]:
    pre = (
        "üìù *–ß–µ–∫-–ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º*\n"
        "1) –°–µ—Ç–∞–ø 100% —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω\n"
        "2) –ü—Ä–æ–≤–µ—Ä–∏–ª –ø–ª–∞–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è\n"
        "3) –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è\n"
        "4) –ù–µ—Ç –∂–µ–ª–∞–Ω–∏—è ¬´–∏–∑–±–µ–∂–∞—Ç—å¬ª/¬´—É—Å–ø–µ—Ç—å¬ª\n"
        "5) –í—Ö–æ–¥ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º"
    )
    post = (
        "üß≠ *–ß–µ–∫-–ª–∏—Å—Ç –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞*\n"
        "1) –¢–∞–π–º–µ—Ä/–∫–æ–Ω—Ç—Ä–æ–ª—å —Ç–æ—á–µ–∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è\n"
        "2) –ù–µ —Ç—Ä–æ–≥–∞—é —Å—Ç–æ–ø/—Ç–µ–π–∫ –¥–æ —É—Å–ª–æ–≤–∏–π –ø–ª–∞–Ω–∞\n"
        "3) –û—Ç–º–µ—á–∞—é —ç–º–æ—Ü–∏–∏, –Ω–æ –Ω–µ –¥–µ–π—Å—Ç–≤—É—é –∏–∑ –Ω–∏—Ö\n"
        "4) –§–∏–∫—Å–∞—Ü–∏—è –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é, –Ω–µ –ø–æ –∏–º–ø—É–ª—å—Å—É"
    )
    if behavior:
        pre += f"\n\n–§–æ–∫—É—Å: –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å ¬´{behavior}¬ª."
    return pre, post

# ---------- –•–ï–ù–î–õ–ï–†–´ –ò–ù–¢–ï–ù–¢–û–í/–ö–û–ú–ê–ù–î ----------
@bot.message_handler(commands=["start", "menu", "reset"])
def cmd_start(m):
    uid = m.from_user.id
    ensure_user(uid)
    set_state(uid, intent="idle", step=None, data_merge={"current_error_id": None, "mercedes_done": []})
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /status /ping",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    st = get_state(m.from_user.id)
    bot.send_message(
        m.chat.id,
        f"Intent: `{st['intent']}`\nStep: `{st['step'] or '-'}`\nTmp: `{json.dumps(st['data'], ensure_ascii=False)}`",
        reply_markup=main_menu()
    )

# –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def intent_error(m):
    uid = m.from_user.id
    set_state(uid, intent="error_flow", step="ask_error",
              data_merge={"current_error_id": None, "mercedes_done": []})
    bot.send_message(
        m.chat.id,
        "–û–ø–∏—à–∏ *–æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É* 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ **–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞**.\n"
        "–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def intent_strategy(m):
    uid = m.from_user.id
    set_state(uid, intent="strategy", step=None)
    bot.send_message(
        m.chat.id,
        "–û–∫, —Å–æ–±–µ—Ä—ë–º –¢–° (—á–µ—Ä–Ω–æ–≤–∏–∫ v0.1):\n1) –ü–æ–¥—Ö–æ–¥/—Ä—ã–Ω–∫–∏/–¢–§\n2) –ß–µ–∫-–ª–∏—Å—Ç –≤—Ö–æ–¥–∞\n3) –°—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥\n4) –õ–∏–º–∏—Ç—ã –∏ —Ä–∏—Å–∫\n\n"
        "_(–≤ —ç—Ç–æ–º —Ä–µ–ª–∏–∑–µ ‚Äî –ø–æ—Å–ª–µ –£—Ä–æ–∫–∞ 1)_",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def intent_passport(m):
    uid = m.from_user.id
    set_state(uid, intent="passport", step=None)
    bot.send_message(
        m.chat.id,
        "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞: –ø–æ–∑–∂–µ –ø–æ–¥–∫–ª—é—á–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ (–ø–æ—Å–ª–µ —É—Ä–æ–∫–∞ 1).",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def intent_week_panel(m):
    uid = m.from_user.id
    set_state(uid, intent="week_panel", step=None)
    bot.send_message(
        m.chat.id,
        "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏ (MVP —Å–∫–æ—Ä–æ): —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏, 1‚Äì2 —Ü–µ–ª–∏, –ª–∏–º–∏—Ç—ã, –¥–Ω–µ–≤–Ω—ã–µ —á–µ–∫-–∏–Ω—ã, —Ä–µ—Ç—Ä–æ.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def intent_panic(m):
    uid = m.from_user.id
    set_state(uid, intent="panic", step=None)
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
        "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä (—á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–±–∏–ª–æ)\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def intent_start_help(m):
    uid = m.from_user.id
    set_state(uid, intent="start_help", step=None)
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –†–∞–∑–±–µ—Ä—ë–º –æ–¥–Ω—É –∫–ª—é—á–µ–≤—É—é –æ—à–∏–±–∫—É (–£—Ä–æ–∫ 1)\n2) –û–±–Ω–æ–≤–∏–º –ü–∞—Å–ø–æ—Ä—Ç\n3) –°–æ–±–µ—Ä—ë–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¢–°",
        reply_markup=main_menu()
    )

# ---------- –†–û–£–¢–ò–ù–ì –ü–û –¢–ï–ö–°–¢–£ (–î–ò–ê–õ–û–ì –£–†–û–ö–ê 1) ----------
@bot.message_handler(content_types=["text"])
def router(m):
    uid = m.from_user.id
    st = get_state(uid)
    text_in = (m.text or "").strip()

    # –ï—Å–ª–∏ –º—ã –Ω–µ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —É—Ä–æ–∫–∞ 1 ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
    if st["intent"] != "error_flow":
        bot.send_message(m.chat.id, "–ü—Ä–∏–Ω—è–ª. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /menu.", reply_markup=main_menu())
        return

    # --- –®–∞–≥ 1: —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞
    if st["step"] == "ask_error":
        if is_too_vague(text_in):
            bot.send_message(m.chat.id, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ. –û–ø–∏—à–∏ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏, *—á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –¥–µ–ª–∞–µ—à—å* –Ω–µ –ø–æ –ø–ª–∞–Ω—É.")
            return
        normalized = enforce_behavior_level(text_in)
        # —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É errors –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º error_text
        eid = upsert_error_partial(uid, {"error_text": normalized})
        bot.send_message(m.chat.id, "–û–∫. –ü–æ–π–¥—ë–º –ø–æ **MERCEDES** –∫—Ä–∞—Ç–∫–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω.")
        set_state(uid, data_merge={"mercedes_done": []})
        ask_next_mercedes(uid, m.chat.id)
        return

    # --- MERCEDES –±–ª–æ–∫–∏
    if st["step"] and st["step"].startswith("mer_"):
        key = st["step"].split("_", 1)[1]  # context/emotions/thoughts/behavior/state
        if is_too_vague(text_in):
            bot.send_message(m.chat.id, "–î–æ–±–∞–≤—å –¥–µ—Ç–∞–ª–µ–π, —Ö–æ—Ç—è –±—ã 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/—Å–ª–æ–≤–∞ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π data; –≤ –±–∞–∑—É –∑–∞–Ω–µ—Å—ë–º –∫–ª—é—á–µ–≤—ã–µ pattern_* (—ç–º–æ—Ü–∏–∏/–º—ã—Å–ª–∏/–ø–æ–≤–µ–¥–µ–Ω–∏–µ)
        data_merge = {f"mer_{key}": text_in}
        done_list = st["data"].get("mercedes_done", [])
        if key not in done_list:
            done_list.append(key)
        data_merge["mercedes_done"] = done_list
        set_state(uid, data_merge=data_merge)

        # –ï—Å–ª–∏ —ç—Ç–æ behavior/emotions/thoughts ‚Äî —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–∏–º errors.*
        if key == "behavior":
            upsert_error_partial(uid, {"pattern_behavior": text_in})
        elif key == "emotions":
            upsert_error_partial(uid, {"pattern_emotion": text_in})
        elif key == "thoughts":
            upsert_error_partial(uid, {"pattern_thought": text_in})

        ask_next_mercedes(uid, m.chat.id)
        return

    # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    if st["step"] == "mer_confirm":
        if text_in.lower() not in {"–≥–æ—Ç–æ–≤–æ", "–æ–∫", "–¥–∞", "done", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é"}:
            bot.send_message(m.chat.id, "–ï—Å–ª–∏ —Ä–µ–∑—é–º–µ –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏ *–ì–æ—Ç–æ–≤–æ*. –ò –ø–µ—Ä–µ–π–¥—ë–º –¥–∞–ª—å—à–µ.")
            return
        bot.send_message(
            m.chat.id,
            "–°—É–ø–µ—Ä. –¢–µ–ø–µ—Ä—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º *–ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å/–Ω–æ–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ* –≤ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–∞—Ö.\n"
            "–ü—Ä–∏–º–µ—Ä: ¬´–≤—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ 100% —Å–∏–≥–Ω–∞–ª–∞ –∏ *–Ω–µ —Ç—Ä–æ–≥–∞—Ç—å —Å—Ç–æ–ø/—Ç–µ–π–∫* –¥–æ —É—Å–ª–æ–≤–∏–π –ø–ª–∞–Ω–∞¬ª.",
            reply_markup=main_menu()
        )
        set_state(uid, step="goal_new")
        return

    # --- –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å
    if st["step"] == "goal_new":
        if is_too_vague(text_in):
            bot.send_message(m.chat.id, "–¶–µ–ª—å —Å–ª–∏—à–∫–æ–º –æ–±—â–∞—è. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –Ω–∞–±–ª—é–¥–∞–µ–º–æ: *—á—Ç–æ –¥–µ–ª–∞—é/–Ω–µ –¥–µ–ª–∞—é*.")
            return
        upsert_error_partial(uid, {"positive_goal": text_in})
        bot.send_message(m.chat.id, "–ò–¥—ë–º –ø–æ *TOTE*.\n\n*T (—Ü–µ–ª—å)* ‚Äî –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 —Å–¥–µ–ª–∫–∏. –ù–∞–ø–∏—à–∏ —Ü–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–í —Ç–µ—á–µ–Ω–∏–µ 3 —Å–¥–µ–ª–æ–∫ —è ...¬ª")
        set_state(uid, step="tote_goal")
        return

    # --- TOTE: goal
    if st["step"] == "tote_goal":
        if is_too_vague(text_in):
            bot.send_message(m.chat.id, "–ù—É–∂–Ω–æ —á—ë—Ç—á–µ: —Ü–µ–ª—å –Ω–∞ 3 —Å–¥–µ–ª–∫–∏, —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å —Ç–≤–æ–µ–π –æ—à–∏–±–∫–æ–π.")
            return
        upsert_error_partial(uid, {"tote_goal": text_in})
        bot.send_message(
            m.chat.id,
            "*O (–æ–ø–µ—Ä–∞—Ü–∏–∏)* ‚Äî –∫–∞–∫–∏–µ —à–∞–≥–∏ –ø–æ–º–æ–≥—É—Ç —É–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–ª—å?\n"
            "–ü—Ä–∏–º–µ—Ä: —á–µ–∫-–ª–∏—Å—Ç –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º; –ø–∞—É–∑–∞ –∏ –¥—ã—Ö–∞–Ω–∏–µ; –∑–∞–ø–∏—Å–∫–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–µ; —Ç–∞–π–º–µ—Ä –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞.",
        )
        set_state(uid, step="tote_ops")
        return

    # --- TOTE: ops
    if st["step"] == "tote_ops":
        if is_too_vague(text_in):
            bot.send_message(m.chat.id, "–î–æ–±–∞–≤—å 2‚Äì3 —à–∞–≥–∞. –ö–æ—Ä–æ—Ç–∫–æ, –ø–æ –ø—É–Ω–∫—Ç–∞–º.")
            return
        upsert_error_partial(uid, {"tote_ops": text_in})
        bot.send_message(
            m.chat.id,
            "*T (–ø—Ä–æ–≤–µ—Ä–∫–∞)* ‚Äî –∫–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –¥–µ—Ä–∂–∏—à—å—Å—è –ø–ª–∞–Ω–∞?\n"
            "–ü—Ä–∏–º–µ—Ä: ¬´–Ω–µ –¥–≤–∏–≥–∞–ª —Å—Ç–æ–ø/—Ç–µ–π–∫ –≤ 3 —Å–¥–µ–ª–∫–∞—Ö –ø–æ–¥—Ä—è–¥¬ª, ¬´–≤—Ö–æ–¥–∏–ª —Ç–æ–ª—å–∫–æ –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É¬ª.",
        )
        set_state(uid, step="tote_check")
        return

    # --- TOTE: check
    if st["step"] == "tote_check":
        if is_too_vague(text_in):
            bot.send_message(m.chat.id, "–ù—É–∂–Ω–æ —á—ë—Ç–∫–æ–µ —É—Å–ª–æ–≤–∏–µ: —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å—á–∏—Ç–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º.")
            return
        upsert_error_partial(uid, {"tote_check": text_in})
        bot.send_message(
            m.chat.id,
            "*E (–≤—ã—Ö–æ–¥/–∏—Ç–æ–≥)* ‚Äî —á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å, –µ—Å–ª–∏ —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞? –ê –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —á—Ç–æ –∏–∑–º–µ–Ω–∏—à—å –≤ —à–∞–≥–∞—Ö?",
        )
        set_state(uid, step="tote_exit")
        return

    # --- TOTE: exit  ‚Üí —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —É—Ä–æ–∫–∞ 1
    if st["step"] == "tote_exit":
        if is_too_vague(text_in):
            bot.send_message(m.chat.id, "–û–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: ¬´–µ—Å–ª–∏ –î–ê/–µ—Å–ª–∏ –ù–ï–¢, —Ç–æ ...¬ª.")
            return
        upsert_error_partial(uid, {"tote_exit": text_in})

        # –°–æ–±–µ—Ä—ë–º —á–µ–∫-–ª–∏—Å—Ç—ã –∏ –∑–∞–≤–µ—Ä—à–∏–º
        data = get_state(uid)["data"]
        behavior = data.get("mer_behavior", "")
        pre, post = build_checklists(behavior)
        upsert_error_partial(uid, {"checklist_pre": pre, "checklist_post": post})

        bot.send_message(m.chat.id, pre)
        bot.send_message(m.chat.id, post)
        bot.send_message(
            m.chat.id,
            "‚úÖ *–£—Ä–æ–∫ 1 –∑–∞–≤–µ—Ä—à—ë–Ω.* –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ì–æ—Ç–æ–≤ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º/—Ä–æ–ª—è–º (–£—Ä–æ–∫ 2) –∏–ª–∏ —Å–æ–±—Ä–∞—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –¢–°.\n"
            "–û—Ç–∫—Ä–æ–π –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.",
            reply_markup=main_menu()
        )
        # —Å–±—Ä–æ—Å –≤ idle
        set_state(uid, intent="idle", step=None, data_merge={"current_error_id": None, "mercedes_done": []})
        return

    # –§–æ–ª–±—ç–∫ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏, –µ—Å–ª–∏ —à–∞–≥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
    bot.send_message(m.chat.id, "–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å–Ω–∞—á–∞–ª–∞: –Ω–∞–∂–º–∏ ¬´üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞¬ª.", reply_markup=main_menu())
    set_state(uid, intent="idle", step=None, data_merge={"current_error_id": None, "mercedes_done": []})

# ---------- FLASK / WEBHOOK ----------
app = Flask(__name__)

@app.get("/")
def root():
    return "OK Innertrade v1-secure"

@app.get("/health")
def health():
    return jsonify(ok=True, ts=datetime.utcnow().isoformat())

@app.post(f"/webhook/{WEBHOOK_PATH}")
def webhook():
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ –∏ –ª–∏–º–∏—Ç–∞ —Ç–µ–ª–∞
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    try:
        update = Update.de_json(request.get_json(force=True))
        bot.process_new_updates([update])
    except Exception as e:
        log.exception(f"update error: {e}")
        return "err", 500
    return "ok"

def setup_webhook():
    # –°–Ω–∏–º–µ–º —Å—Ç–∞—Ä—ã–π –∏ –ø–æ—Å—Ç–∞–≤–∏–º –Ω–∞—à
    try:
        bot.remove_webhook()
    except Exception:
        pass
    url = f"{PUBLIC_URL}/webhook/{WEBHOOK_PATH}"
    ok = bot.set_webhook(url=url, secret_token=TG_WEBHOOK_SECRET, max_connections=40, allowed_updates=["message"])
    if ok:
        log.info(f"Webhook set to {url}")
    else:
        log.error("Failed to set webhook")

if __name__ == "__main__":
    setup_webhook()
    port = int(os.getenv("PORT", "10000"))
    log.info("Starting Flask keepalive‚Ä¶")
    app.run(host="0.0.0.0", port=port)
