import os
import logging
from datetime import datetime
from typing import Dict, Any

import telebot
from telebot import types

from flask import Flask, jsonify
from openai import OpenAI

# ====== ENV ======
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets")
if not OPENAI_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets")

# ====== GPT client ======
client = OpenAI(api_key=OPENAI_KEY)

# ====== LOGS ======
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ====== BOT ======
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# –°–Ω–∏–º–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π webhook
try:
    bot.remove_webhook()
    logging.info("Webhook removed (ok)")
except Exception as e:
    logging.warning(f"Webhook remove warn: {e}")

# ====== STATE (–ø–∞–º—è—Ç—å –≤ –û–ó–£; –ë–î –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ–∑–∂–µ) ======
user_state: Dict[int, Dict[str, Any]] = {}  # {uid: {mode: ..., data:{...}, step:int}}

# ====== –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ======
def main_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("–û—à–∏–±–∫–∞"), types.KeyboardButton("–•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"), types.KeyboardButton("–ü–æ–≥–æ–≤–æ—Ä–∏–º"))
    kb.row(types.KeyboardButton("–ü–∞—Å–ø–æ—Ä—Ç"), types.KeyboardButton("–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏"))
    kb.row(types.KeyboardButton("–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), types.KeyboardButton("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"), types.KeyboardButton("–°–±—Ä–æ—Å"))
    return kb

# ====== –û–±—â–∏–π "–∫—É—Ä—Å–æ–≤—ã–π" —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT ======
COURSE_SYSTEM = (
    "–¢—ã ‚Äî –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade. –†–∞–±–æ—Ç–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ –∫—É—Ä—Å—É: –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ (MERCEDES, TOTE), "
    "–∞—Ä—Ö–µ—Ç–∏–ø—ã/—Ä–æ–ª–∏, —á–µ–∫-–ª–∏—Å—Ç—ã, —Ä–∏—Ç—É–∞–ª—ã, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¢–°. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ, –¥–∞–≤–∞–π —à–∞–≥–∏ –∏ –º–∏–Ω–∏-—á–µ–∫-–ª–∏—Å—Ç—ã. "
    "–ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ ¬´–æ—à–∏–±–∫—É¬ª ‚Äî –∑–∞–ø—É—Å–∫–∞–π –º–∏–Ω–∏-—Ä–∞–∑–±–æ—Ä —á–µ—Ä–µ–∑ MERCEDES+TOTE. –ï—Å–ª–∏ ¬´—Ö–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é¬ª ‚Äî –≤–µ–¥–∏ –ø–æ "
    "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É –¢–°: —Ü–µ–ª–∏, —Å—Ç–∏–ª—å, —Ä—ã–Ω–æ–∫, –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥, —Ä–∏—Å–∫–∏, –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ï—Å–ª–∏ ¬´–ø–æ–≥–æ–≤–æ—Ä–∏–º¬ª ‚Äî "
    "–¥–µ—Ä–∂–∏ –±–µ—Å–µ–¥—É –≤ —Ä—É—Å–ª–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞."
)

def ask_gpt_course(user_text: str, history: list = None) -> str:
    # –ü—Ä–æ—Å—Ç–æ–π –æ–¥–Ω–æ—Ö–æ–¥–æ–≤—ã–π –≤—ã–∑–æ–≤ —Å "–∂—ë—Å—Ç–∫–∏–º" —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
    msgs = [{"role": "system", "content": COURSE_SYSTEM}]
    if history:
        msgs.extend(history)
    msgs.append({"role": "user", "content": user_text})
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.4,
        messages=msgs
    )
    return (resp.choices[0].message.content or "").strip()

def send_long(chat_id, text):
    MAX = 3500
    for i in range(0, len(text), MAX):
        bot.send_message(chat_id, text[i:i+MAX])

# ====== /start ======
@bot.message_handler(commands=['start'])
def cmd_start(m):
    uid = m.from_user.id
    user_state[uid] = {"mode": None, "data": {}, "step": 0}
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade.\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=main_kb()
    )

@bot.message_handler(commands=['ping'])
def cmd_ping(m):
    bot.reply_to(m, "pong ‚úÖ")

@bot.message_handler(commands=['reset'])
def cmd_reset(m):
    uid = m.from_user.id
    user_state[uid] = {"mode": None, "data": {}, "step": 0}
    bot.reply_to(m, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.", reply_markup=main_kb())

# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞ ======

# ---- –ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞ (wizard) ----
PASSPORT_QUESTIONS = [
    "1/6) –ù–∞ –∫–∞–∫–æ–º —Ä—ã–Ω–∫–µ/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å? (–ø—Ä–∏–º–µ—Ä: –∞–∫—Ü–∏–∏ –°–®–ê, EURUSD, BTC, —Ñ—å—é—á–µ—Ä—Å—ã‚Ä¶)",
    "2/6) –¢–≤–æ–π —Å—Ç–∏–ª—å: —Å–∫–∞–ª—å–ø–∏–Ω–≥ / –∏–Ω—Ç—Ä–∞–¥–µ–π / —Å–≤–∏–Ω–≥ / –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π?",
    "3/6) –¢–∞–π–º—Ñ—Ä–µ–π–º—ã (–æ—Å–Ω–æ–≤–Ω—ã–µ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ)?",
    "4/6) –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç: —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%), –¥–Ω–µ–≤–Ω—ã–µ/–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã?",
    "5/6) –ü—Ä–∞–≤–∏–ª–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞ –≤ –æ–±—â–∏—Ö —á–µ—Ä—Ç–∞—Ö (—É—Ä–æ–≤–Ω–∏, –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –Ω–æ–≤–æ—Å—Ç–∏‚Ä¶)?",
    "6/6) –†–∏—Ç—É–∞–ª—ã –∏ –ø—Ä–∞–≤–∏–ª–∞ –ø—Å–∏—Ö–æ–≥–∏–≥–∏–µ–Ω—ã (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞, —Ç–∞–π–º-–∞—É—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–Ω—è)?"
]

def start_passport(uid, chat_id):
    user_state[uid] = {"mode": "passport", "step": 0, "data": {}}
    bot.send_message(chat_id, "ü™™ –ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. –û—Ç–≤–µ—Ç—å –Ω–∞ 6 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n" + PASSPORT_QUESTIONS[0])

def handle_passport(uid, chat_id, text):
    st = user_state.get(uid, {})
    step = st.get("step", 0)
    data = st.get("data", {})

    data[f"q{step+1}"] = text
    step += 1

    if step >= len(PASSPORT_QUESTIONS):
        # —Ñ–∏–Ω–∞–ª
        user_state[uid] = {"mode": None, "step": 0, "data": data}
        summary = (
            "‚úÖ –ü–∞—Å–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–ª–æ–∫–∞–ª—å–Ω–æ).\n\n"
            f"–†—ã–Ω–∫–∏: {data.get('q1','-')}\n"
            f"–°—Ç–∏–ª—å: {data.get('q2','-')}\n"
            f"–¢–§: {data.get('q3','-')}\n"
            f"–†–∏—Å–∫–∏/–ª–∏–º–∏—Ç—ã: {data.get('q4','-')}\n"
            f"–í—Ö–æ–¥/–≤—ã—Ö–æ–¥: {data.get('q5','-')}\n"
            f"–†–∏—Ç—É–∞–ª—ã: {data.get('q6','-')}\n\n"
            "–î–∞–ª—å—à–µ –º–æ–∂–Ω–æ: ¬´–•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é¬ª –∏–ª–∏ ¬´–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏¬ª."
        )
        send_long(chat_id, summary)
    else:
        user_state[uid]["step"] = step
        user_state[uid]["data"] = data
        bot.send_message(chat_id, PASSPORT_QUESTIONS[step])

# ---- –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏ (wizard) ----
WEEK_PANEL_QUESTIONS = [
    "1/4) –ì–ª–∞–≤–Ω—ã–π —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ (–æ–¥–Ω–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω–µ –ø–µ—Ä–µ—Å–∏–∂–∏–≤–∞—Ç—å —É–±—ã—Ç–∫–∏¬ª):",
    "2/4) –ü–ª–∞–Ω –∏–∑ 3 –º–∏–Ω–∏-—à–∞–≥–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é (–∫—Ä–∞—Ç–∫–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
    "3/4) –õ–∏–º–∏—Ç—ã —Ä–∏—Å–∫–∞ –Ω–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –∏–ª–∏ –¥–µ–Ω—å–≥–∞—Ö):",
    "4/4) –ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –Ω–µ–¥–µ–ª—è —É–¥–∞–ª–∞—Å—å? (1-2 –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è):"
]

def start_week_panel(uid, chat_id):
    user_state[uid] = {"mode": "week_panel", "step": 0, "data": {}, "week_start": datetime.now().strftime("%Y-%m-%d")}
    bot.send_message(chat_id, "üìÖ –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏. 4 —à–∞–≥–∞ ‚Äî –∏ –≥–æ—Ç–æ–≤–æ.\n" + WEEK_PANEL_QUESTIONS[0])

def handle_week_panel(uid, chat_id, text):
    st = user_state.get(uid, {})
    step = st.get("step", 0)
    data = st.get("data", {})
    data[f"q{step+1}"] = text
    step += 1

    if step >= len(WEEK_PANEL_QUESTIONS):
        user_state[uid] = {"mode": None, "step": 0, "data": {}}
        summary = (
            "‚úÖ –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
            f"–§–æ–∫—É—Å: {data.get('q1','-')}\n"
            f"–ü–ª–∞–Ω(3): {data.get('q2','-')}\n"
            f"–õ–∏–º–∏—Ç—ã: {data.get('q3','-')}\n"
            f"–ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞: {data.get('q4','-')}\n\n"
            "–°–æ–≤–µ—Ç: –∑–∞–∫—Ä–µ–ø–∏ —ç—Ç–æ –≤ –∑–∞–º–µ—Ç–∫–∞—Ö/–ø–ª–∞–Ω–µ—Ä–µ. –ú–æ–∂–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å ‚Äî —Å–∫–∞–∂–∏ ¬´–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω¬ª."
        )
        send_long(chat_id, summary)
    else:
        user_state[uid]["step"] = step
        user_state[uid]["data"] = data
        bot.send_message(chat_id, WEEK_PANEL_QUESTIONS[step])

# ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ======
@bot.message_handler(func=lambda m: m.text in {
    "–û—à–∏–±–∫–∞","–•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é","–ü–æ–≥–æ–≤–æ—Ä–∏–º","–ü–∞—Å–ø–æ—Ä—Ç","–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏","–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å","–ú–∞—Ç–µ—Ä–∏–∞–ª—ã","–°–±—Ä–æ—Å"
})
def on_buttons(m):
    uid = m.from_user.id
    t = (m.text or "").strip()

    if t == "–°–±—Ä–æ—Å":
        user_state[uid] = {"mode": None, "step": 0, "data": {}}
        bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.", reply_markup=main_kb())
        return

    if t == "–ü–∞—Å–ø–æ—Ä—Ç":
        start_passport(uid, m.chat.id)
        return

    if t == "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏":
        start_week_panel(uid, m.chat.id)
        return

    if t == "–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
        bot.send_message(
            m.chat.id,
            "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å (–¥–µ–º–æ):\n‚Äî –ö–æ–ª-–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Å–ø–æ—Ä—Ç–æ–≤: 1\n‚Äî –ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n‚Äî –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: ¬´–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω¬ª –∏–ª–∏ ¬´–•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é¬ª"
        )
        return

    if t == "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
        bot.send_message(
            m.chat.id,
            "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã Innertrade:\n‚Äî MERCEDES / TOTE (—Ç–µ–æ—Ä–∏—è)\n‚Äî –ê—Ä—Ö–µ—Ç–∏–ø—ã –∏ —Ä–æ–ª–∏\n‚Äî –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¢–°\n‚Äî –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\n–°–ø—Ä–æ—Å–∏: ¬´–¥–∞–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¢–°¬ª –∏–ª–∏ ¬´–Ω–∞–ø–æ–º–Ω–∏ MERCEDES¬ª."
        )
        return

    # –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –≤ GPT, –Ω–æ —Å –∫—É—Ä—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    alias_prompt = {
        "–û—à–∏–±–∫–∞": "–£ –º–µ–Ω—è –æ—à–∏–±–∫–∞ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ. –ó–∞–ø—É—Å—Ç–∏ –º–∏–Ω–∏-—Ä–∞–∑–±–æ—Ä —á–µ—Ä–µ–∑ MERCEDES+TOTE. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π —á–µ–∫-–ª–∏—Å—Ç.",
        "–•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é": "–•–æ—á—É —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ—é —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é. –í–µ–¥–∏ –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É: —Ü–µ–ª–∏, —Å—Ç–∏–ª—å, —Ä—ã–Ω–æ–∫, –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥, —Ä–∏—Å–∫–∏, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
        "–ü–æ–≥–æ–≤–æ—Ä–∏–º": "–ü–æ–≥–æ–≤–æ—Ä–∏–º –æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –≤ —Ä–∞–º–∫–∞—Ö Innertrade. –ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –≥–ª–∞–≤–Ω–æ–µ —É–∑–∫–æ–µ –º–µ—Å—Ç–æ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ 1-2 —à–∞–≥–∞."
    }
    try:
        reply = ask_gpt_course(alias_prompt[t])
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

# ====== –õ—é–±–æ–π —Ç–µ–∫—Å—Ç (—Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—Å—Ç–µ—Ä–æ–≤ + —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥) ======
@bot.message_handler(func=lambda _: True)
def on_text(m):
    uid = m.from_user.id
    text = (m.text or "").strip()

    st = user_state.get(uid, {"mode": None})
    mode = st.get("mode")

    if mode == "passport":
        handle_passport(uid, m.chat.id, text)
        return

    if mode == "week_panel":
        handle_week_panel(uid, m.chat.id, text)
        return

    # –°–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ –ø–æ –∫—É—Ä—Å—É
    try:
        reply = ask_gpt_course(text)
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

# ====== keepalive ======
app = Flask(__name__)

@app.route("/")
def root():
    return jsonify(ok=True, service="innertrade-bot", ts=datetime.utcnow().isoformat())

@app.route("/health")
def health():
    return "pong"

if __name__ == "__main__":
    logging.info("Starting keepalive web server‚Ä¶")
    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
