# main.py
import os, json, logging, re, threading
from datetime import datetime, timezone
from flask import Flask, request, jsonify, abort
from telebot import TeleBot, types
from openai import OpenAI
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ---------- ENV ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL   = os.getenv("DATABASE_URL")  # optional
PUBLIC_URL     = os.getenv("PUBLIC_URL")    # e.g. https://innertrade-bot.onrender.com
WEBHOOK_PATH   = os.getenv("WEBHOOK_PATH", "webhook")
TG_WEBHOOK_SECRET = os.getenv("TG_WEBHOOK_SECRET")

required = {
    "TELEGRAM_TOKEN": TELEGRAM_TOKEN,
    "OPENAI_API_KEY": OPENAI_API_KEY,
    "PUBLIC_URL": PUBLIC_URL,
    "TG_WEBHOOK_SECRET": TG_WEBHOOK_SECRET
}
missing = [k for k,v in required.items() if not v]
if missing:
    raise RuntimeError(f"Missing env vars: {', '.join(missing)}")

# ---------- OPENAI ----------
oa = OpenAI(api_key=OPENAI_API_KEY)

# ---------- DB ----------
engine = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True, future=True)
        with engine.connect() as conn:
            # user_state —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ–µ–π —Å—Ö–µ–º–µ; —Å–æ–∑–¥–∞—ë–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS user_state (
              user_id BIGINT PRIMARY KEY,
              intent  TEXT,
              step    TEXT,
              data    JSONB,
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
        logging.info("DB connected & migrated")
    except OperationalError as e:
        logging.warning(f"DB not available yet: {e}")
        engine = None
else:
    logging.info("DATABASE_URL not set ‚Äî running without DB persistence")

def load_state(user_id: int) -> dict:
    if not engine: return {"intent":"greet","step":"warmup","data":{}}
    with engine.begin() as conn:
        row = conn.execute(text("SELECT intent, step, data FROM user_state WHERE user_id=:u"),
                           {"u": user_id}).mappings().first()
        if not row:
            conn.execute(text("""
                INSERT INTO user_state(user_id, intent, step, data)
                VALUES (:u, 'greet', 'warmup', '{}'::jsonb)
                ON CONFLICT (user_id) DO NOTHING
            """), {"u": user_id})
            return {"intent":"greet","step":"warmup","data":{}}
        return {"intent": row["intent"] or "greet",
                "step": row["step"] or "warmup",
                "data": row["data"] or {}}

def save_state(user_id: int, intent: str=None, step: str=None, data: dict=None):
    if not engine: return
    cur = load_state(user_id)
    if intent is None: intent = cur["intent"]
    if step   is None: step   = cur["step"]
    merged = cur["data"].copy()
    if data: merged.update(data)
    with engine.begin() as conn:
        conn.execute(text("""
        INSERT INTO user_state(user_id, intent, step, data, updated_at)
        VALUES (:u, :i, :s, :d, now())
        ON CONFLICT (user_id) DO UPDATE
        SET intent=:i, step=:s, data=:d, updated_at=now()
        """), {"u": user_id, "i": intent, "s": step, "d": json.dumps(merged)})

# ---------- UI ----------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu(address="—Ç—ã"):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    if address == "–≤—ã":
        # –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–æ–≥–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä –Ω–∞ –±—É–¥—É—â–µ–µ
        pass
    return kb

# ---------- –ù–ê–¢–£–†–ê–õ–¨–ù–´–ô –î–ò–ê–õ–û–ì / –•–ï–õ–ü–ï–†–´ ----------
INTENT_FREE = "free_talk"     # —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ
INTENT_ERROR = "error_flow"   # —Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏

def user_address(data: dict, msg) -> str:
    # address: "—Ç—ã"|"–≤—ã". –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "—Ç—ã".
    return (data or {}).get("address") or "—Ç—ã"

def reflect_and_question(text_in: str, address: str) -> str:
    # –ö–æ—Ä–æ—Ç–∫–∞—è —ç–º–ø–∞—Ç–∏—è + –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å (–±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è).
    # –ù–µ —É–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫.
    sys = (
        "–¢—ã ‚Äî –∫–æ—É—á-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –ì–æ–≤–æ—Ä–∏ —Ç–µ–ø–ª–æ –∏ –ø—Ä–æ—Å—Ç–æ, –æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ —É—Ç–æ—á–Ω—è—é—â–µ–µ "
        "–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ù–µ –Ω–∞–≤—è–∑—ã–≤–∞–π —à–∞–≥–∏ –∫—É—Ä—Å–∞. –ù–µ –∑–∞–¥–∞–≤–∞–π –¥–ª–∏–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏. "
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–≤–∞–ª –ø—Ä–æ–±–ª–µ–º—É, –æ—Ç–∑–µ—Ä–∫–∞–ª—å –µ—ë –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –∏ –∑–∞–¥–∞–π –æ–¥–∏–Ω –º—è–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å."
    )
    usr = f"–ê–¥—Ä–µ—Å –æ–±—Ä–∞—â–µ–Ω–∏—è: {address}. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ¬´{text_in}¬ª"
    try:
        r = oa.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role":"system","content":sys},
                {"role":"user","content":usr}
            ],
            temperature=0.4,
            max_tokens=180
        )
        return r.choices[0].message.content.strip()
    except Exception:
        # –§–æ–ª–±—ç–∫
        q = "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –≤–æ–ª–Ω—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?" if address=="—Ç—ã" else "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –≤–æ–ª–Ω—É–µ—Ç –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"
        return q

behavior_verbs = re.compile(r"\b(–≤—Ö–æ–∂—É|–≤–æ–π—Ç–∏|–∑–∞–∫—Ä—ã–≤–∞—é|–∑–∞–∫—Ä—ã—Ç—å|–¥–≤–∏–≥–∞—é|–¥–≤–∏–Ω—É–ª|—É—Å—Ä–µ–¥–Ω—è—é|—É—Å—Ä–µ–¥–Ω–∏—Ç—å|–≤–º–µ—à–∏–≤–∞—é—Å—å|–≤–º–µ—à–∞—Ç—å—Å—è|–∑–∞–≤—ã—à–∞—é|–ø–µ—Ä–µ—Å–∏–∂–∏–≤–∞—é|–ø–µ—Ä–µ—Å–∏–¥–µ—Ç—å)\b", re.IGNORECASE)
common_markers = re.compile(r"\b(–ø—Ä–æ—Å–∞–¥–∫|—Å—Ç–æ–ø|—Ç–µ–π–∫|–ø—Ä–∞–≤–∏–ª|–Ω–∞—Ä—É—à–∞—é|—Å–µ—Ç–∞–ø|—Ä–∞–Ω(–æ|—å—à–µ)|–ø–æ—Ç–æ—Ä–æ–ø–∏–ª|–ø–∞–Ω–∏–∫|—Å—Ç—Ä–∞—Ö)\w*", re.IGNORECASE)

def detect_problem_statement(text_in: str) -> bool:
    # Done-—É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏: –µ—Å—Ç—å –≥–ª–∞–≥–æ–ª –ø–æ–≤–µ–¥–µ–Ω–∏—è –ò–õ–ò –º–∞—Ä–∫–µ—Ä—ã
    return bool(behavior_verbs.search(text_in) or common_markers.search(text_in)) and len(text_in.split()) >= 3

def paraphrase_problem(text_in: str, address: str) -> str:
    # –ö–æ—Ä–æ—Ç–∫–∞—è, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞; –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ—Ö–Ω–∏–∫
    sys = ("–°–¥–µ–ª–∞–π –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É —Ç–æ—Ä–≥–æ–≤–æ–π –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞. "
           "–ù–µ –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã, –Ω–µ –æ–±—ä—è—Å–Ω—è–π —Ç–µ–æ—Ä–∏–∏. –ù–µ –ø–∏—à–∏ –±–æ–ª–µ–µ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
    r = oa.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role":"system","content":sys},
            {"role":"user","content":f"–ê–¥—Ä–µ—Å: {address}. –¢–µ–∫—Å—Ç: {text_in}"}
        ],
        temperature=0.2,
        max_tokens=80
    )
    return r.choices[0].message.content.strip().strip(" .") + "."

def confirm_kb():
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–î–∞, —Ç–∞–∫ –∏ –µ—Å—Ç—å", callback_data="confirm_problem_yes"),
        types.InlineKeyboardButton("–ù–µ —Å–æ–≤—Å–µ–º / —É—Ç–æ—á–Ω–∏—Ç—å", callback_data="confirm_problem_no"),
    )
    return kb

# ---------- –ö–û–ú–ê–ù–î–´ ----------
@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m):
    st = load_state(m.from_user.id)
    # –°–±—Ä–æ—Å –≤ ¬´—Ç—ë–ø–ª–æ–µ¬ª –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –∏–º—è + –∫–∞–∫ –æ–±—Ä–∞—â–∞—Ç—å—Å—è
    data = st["data"]
    # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –∏–º—è –∏–∑ Telegram, –µ—Å–ª–∏ –Ω–µ—Ç
    if not data.get("name"):
        data["name"] = m.from_user.first_name or "–¥—Ä—É–≥"
    # –∞–¥—Ä–µ—Å –ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ‚Äî —Å–ø—Ä–æ—Å–∏–º
    data.pop("address", None)
    save_state(m.from_user.id, intent="greet", step="warmup", data=data)
    name = data["name"]
    bot.send_message(
        m.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {name}! –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî *—Ç—ã* –∏–ª–∏ *–≤—ã*?",
        reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("—Ç—ã","–≤—ã")
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(m): bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    st = load_state(m.from_user.id)
    now = datetime.now(timezone.utc).isoformat(timespec="seconds")
    resp = {
        "ok": True,
        "time": now,
        "intent": st["intent"],
        "step": st["step"],
        "db": "ok" if engine else "no-db"
    }
    bot.send_message(m.chat.id, f"```\n{json.dumps(resp, ensure_ascii=False, indent=2)}\n```", parse_mode="Markdown")

# ---------- –û–¢–í–ï–¢ –ù–ê –ö–ù–û–ü–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ----------
def goto_error_flow(m, st):
    addr = user_address(st["data"], m)
    save_state(m.from_user.id, intent=INTENT_ERROR, step="ask_problem")
    bot.send_message(
        m.chat.id,
        "–û–∫–µ–π, –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º —Ç–≤–æ—é —Ç–µ–∫—É—â—É—é —Ç—Ä—É–¥–Ω–æ—Å—Ç—å. –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏ –µ—ë 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.",
        reply_markup=main_menu(addr)
    )

@bot.message_handler(func=lambda msg: msg.text in ["üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞","üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é","üìÑ –ü–∞—Å–ø–æ—Ä—Ç","üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏","üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª","ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å"])
def on_menu_click(m):
    st = load_state(m.from_user.id)
    addr = user_address(st["data"], m)
    t = m.text
    if t == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞":
        goto_error_flow(m, st)
    elif t == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª":
        bot.send_message(m.chat.id,
            "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω—É—Ç—ã\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
            "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä (—á—Ç–æ –≤—ã–±–∏–ª–æ)\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É",
            reply_markup=main_menu(addr))
    elif t == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å":
        bot.send_message(m.chat.id,
            "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫: 1) –∫–æ—Ä–æ—Ç–∫–æ –æ–±–æ–∑–Ω–∞—á–∏–º –±–æ–ª—å, 2) –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ü–µ–ª—å, 3) –Ω–∞–º–µ—á–∞–µ–º —à–∞–≥–∏. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?",
            reply_markup=main_menu(addr))
    elif t == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏":
        bot.send_message(m.chat.id,
            "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏: ‚Ä¢ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ ‚Ä¢ 1‚Äì2 —Ü–µ–ª–∏ ‚Ä¢ –ª–∏–º–∏—Ç—ã ‚Ä¢ –∫–æ—Ä–æ—Ç–∫–∏–µ —á–µ–∫-–∏–Ω—ã ‚Ä¢ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ –≤ –∫–æ–Ω—Ü–µ.",
            reply_markup=main_menu(addr))
    elif t == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç":
        bot.send_message(m.chat.id,
            "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞: —Ä—ã–Ω–∫–∏/–¢–§, —Å—Ç–∏–ª—å, —Ä–∏—Å–∫-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Ç–∏–ø–æ–≤—ã–µ –æ—à–∏–±–∫–∏, —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ —Ä–∞–±–æ—á–∏–µ —Ä–∏—Ç—É–∞–ª—ã. –ì–æ—Ç–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ.",
            reply_markup=main_menu(addr))
    elif t == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é":
        bot.send_message(m.chat.id,
            "–°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°: 1) –ø–æ–¥—Ö–æ–¥/–¢–§/–≤—Ö–æ–¥, 2) —Å—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥/—Ä–∏—Å–∫–∏. –ù–∞—á–Ω—ë–º –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞—Ö–æ–¥–µ.",
            reply_markup=main_menu(addr))

# ---------- –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ + —à–∞–≥–∏) ----------
@bot.message_handler(content_types=["text"])
def on_text(m):
    st = load_state(m.from_user.id)
    data = st["data"]; addr = user_address(data, m)
    txt = (m.text or "").strip().lower()

    # 1) –ø–µ—Ä–≤–∏—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è "—Ç—ã/–≤—ã"
    if st["intent"] == "greet" and st["step"] == "warmup":
        if txt in ["—Ç—ã","–≤—ã"]:
            data["address"] = txt
            # –∏–º—è —É–∂–µ –µ—Å—Ç—å, –æ—Ç–≤–µ—á–∞–µ–º —Ç–µ–ø–ª–æ –∏ –¥–∞—ë–º —Å–≤–æ–±–æ–¥–Ω—ã–π –≤—Ö–æ–¥
            save_state(m.from_user.id, intent=INTENT_FREE, step="warmup_1", data=data)
            sal = "–ü—Ä–∏–Ω—è—Ç–æ." if txt=="–≤—ã" else "–û–∫–µ–π."
            bot.send_message(m.chat.id,
                f"{sal} –ú–æ–∂–µ–º —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ. "
                f"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, —Å–Ω–∏–∑—É –µ—Å—Ç—å –º–µ–Ω—é.", reply_markup=main_menu(txt))
            return
        # –µ—Å–ª–∏ —Å–ø—Ä–æ—Å–∏–ª–∏ "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
        if "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in m.text.lower():
            bot.send_message(m.chat.id, "–Ø ‚Äî Kai. –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ö–∞–π üôÇ")
            return
        # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–µ ¬´—Ç—ã/–≤—ã¬ª ‚Äî –º—è–≥–∫–æ –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∏–º
        bot.send_message(m.chat.id, "–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, ¬´—Ç—ã¬ª –∏–ª–∏ ¬´–≤—ã¬ª.")
        return

    # 2) —Å–≤–æ–±–æ–¥–Ω–∞—è –±–µ—Å–µ–¥–∞ (–¥–æ 2‚Äì3 —Ç—ë–ø–ª—ã—Ö –∑–∞—Ö–æ–¥–æ–≤) —Å –∞–≤—Ç–æ-–¥–µ—Ç–µ–∫—Ç–æ–º –ø—Ä–æ–±–ª–µ–º—ã
    if st["intent"] == INTENT_FREE:
        # –µ—Å–ª–∏ –ø—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å ¬´–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç¬ª
        if "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in m.text.lower():
            bot.send_message(m.chat.id, "–Ø ‚Äî Kai. –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ö–∞–π.")
            return

        # –ø–æ–¥–±–∏—Ä–∞–µ–º –º—è–≥–∫–∏–π –æ—Ç–≤–µ—Ç
        reply = reflect_and_question(m.text, addr)

        # –∫–æ–ø–∏–º warmup count
        wc = int(data.get("warmup_count", 0)) + 1
        data["warmup_count"] = wc

        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–∞–ª –≥–æ–¥–Ω—É—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
        if detect_problem_statement(m.text):
            short = paraphrase_problem(m.text, addr)
            save_state(m.from_user.id, intent=INTENT_ERROR, step="confirm_problem",
                       data={**data, "problem_candidate": short})
            bot.send_message(m.chat.id, f"–ó–∞—Ñ–∏–∫—Å–∏—Ä—É—é —Ç–∞–∫: *{short}*\n–ü–æ–¥—Ö–æ–¥–∏—Ç?", reply_markup=confirm_kb())
            return

        # –ø–æ—Å–ª–µ 2 –∑–∞—Ö–æ–¥–æ–≤ ‚Äî –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±–æ–∑–Ω–∞—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ –∏ –ø–µ—Ä–µ–π—Ç–∏
        if wc >= 2:
            tip = "–ï—Å–ª–∏ –æ–∫, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏: —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –æ–±—ã—á–Ω–æ *–¥–µ–ª–∞–µ—à—å* –Ω–µ —Ç–∞–∫ (–Ω–∞ —É—Ä–æ–≤–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è)."
            bot.send_message(m.chat.id, f"{reply}\n\n{tip}", reply_markup=main_menu(addr))
        else:
            bot.send_message(m.chat.id, reply, reply_markup=main_menu(addr))
        save_state(m.from_user.id, data=data)
        return

    # 3) –ø–æ—Ç–æ–∫ ¬´—Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏¬ª
    if st["intent"] == INTENT_ERROR:
        step = st["step"]

        # A) —à–∞–≥: —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç, –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
        if step == "ask_problem":
            if not detect_problem_statement(m.text):
                hint = "–û–ø–∏—à–∏, *—á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ—à—å* –∏–ª–∏ *–∫–∞–∫ —ç—Ç–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è* –≤ —Å–¥–µ–ª–∫–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)."
                bot.send_message(m.chat.id, f"–ü–æ–Ω—è–ª. –î–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ. {hint}",
                                 reply_markup=main_menu(addr))
                return
            short = paraphrase_problem(m.text, addr)
            save_state(m.from_user.id, step="confirm_problem", data={**data, "problem_candidate": short})
            bot.send_message(m.chat.id, f"–¢–∞–∫ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º: *{short}*\n–ü–æ–¥—Ö–æ–¥–∏—Ç?", reply_markup=confirm_kb())
            return

        # B) –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚Äî –∏–¥—ë–º –≤ –º—è–≥–∫–∏–π –æ–ø—Ä–æ—Å (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ—Ö–Ω–∏–∫)
        if step == "context":
            bot.send_message(m.chat.id, "–í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
                             reply_markup=main_menu(addr))
            save_state(m.from_user.id, step="context_wait")
            return
        if step == "context_wait":
            save_state(m.from_user.id, step="emotions", data={**data, "ctx": m.text})
            bot.send_message(m.chat.id, "–ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç —ç—Ç–æ–π –æ—à–∏–±–∫–∏? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")
            return
        if step == "emotions":
            save_state(m.from_user.id, step="thoughts", data={**data, "emo": m.text})
            bot.send_message(m.chat.id, "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (1‚Äì2 —Ñ—Ä–∞–∑—ã)")
            return
        if step == "thoughts":
            save_state(m.from_user.id, step="behavior", data={**data, "thoughts": m.text})
            bot.send_message(m.chat.id, "–ò —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≥–ª–∞–≥–æ–ª–∞–º–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).")
            return
        if step == "behavior":
            # –ò—Ç–æ–≥ –º–∏–Ω–∏-—Ä–µ–∑—é–º–µ –±–µ–∑ –Ω–∞–≤—è–∑—ã–≤–∞–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤
            data.update({"beh": m.text})
            problem = data.get("problem_confirmed") or data.get("problem_candidate") or "–æ—à–∏–±–∫–∞"
            resume = f"–†–µ–∑—é–º–µ: {problem}\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: {data.get('ctx','‚Äî')}\n–≠–º–æ—Ü–∏–∏: {data.get('emo','‚Äî')}\n–ú—ã—Å–ª–∏: {data.get('thoughts','‚Äî')}\n–ü–æ–≤–µ–¥–µ–Ω–∏–µ: {data.get('beh','‚Äî')}"
            bot.send_message(m.chat.id, f"–û–∫, –≤–∏–∂—É –∫–∞—Ä—Ç–∏–Ω—É.\n\n{resume}\n\n–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º (—á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)?")
            save_state(m.from_user.id, step="new_goal", data=data)
            return
        if step == "new_goal":
            goal = m.text.strip()
            # –º—è–≥–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –ø–ª–∞–Ω (–∞–Ω–∞–ª–æ–≥ TOTE, –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)
            save_state(m.from_user.id, step="mini_plan", data={**data, "new_goal": goal})
            bot.send_message(m.chat.id, "–ö–∞–∫–∏–µ 2‚Äì3 —à–∞–≥–∞ –ø–æ–º–æ–≥—É—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è —ç—Ç–æ–π —Ü–µ–ª–∏ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–∫–∞—Ö?")
            return
        if step == "mini_plan":
            plan = m.text.strip()
            goal = data.get("new_goal","–¶–µ–ª—å")
            bot.send_message(m.chat.id, f"–û—Ç–ª–∏—á–Ω–æ. –¶–µ–ª—å: *{goal}*\n–®–∞–≥–∏: {plan}\n\n–ì–æ—Ç–æ–≤–æ. –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –ø–æ–∑–∂–µ.")
            save_state(m.from_user.id, intent=INTENT_FREE, step="warmup_1", data=data)
            return

    # 4) –æ–±—â–∏–π —Ñ–æ–ª–±—ç–∫ ‚Äî –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç + –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –º–µ–Ω—é
    reply = reflect_and_question(m.text, addr)
    bot.send_message(m.chat.id, reply + "\n\n(–°–Ω–∏–∑—É –µ—Å—Ç—å –º–µ–Ω—é –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —É–¥–æ–±–Ω–µ–µ –∫–Ω–æ–ø–∫–∞–º–∏.)", reply_markup=main_menu(addr))

# ---------- CALLBACKS (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏) ----------
@bot.callback_query_handler(func=lambda c: c.data in ["confirm_problem_yes","confirm_problem_no"])
def cb_confirm(call):
    st = load_state(call.from_user.id); data = st["data"]; addr = user_address(data, call)
    if call.data == "confirm_problem_yes":
        confirmed = data.get("problem_candidate") or "–æ—à–∏–±–∫–∞"
        save_state(call.from_user.id, intent=INTENT_ERROR, step="context",
                   data={**data, "problem_confirmed": confirmed})
        bot.answer_callback_query(call.id, "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏.")
        bot.send_message(call.message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ. –î–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.", reply_markup=main_menu(addr))
    else:
        save_state(call.from_user.id, intent=INTENT_ERROR, step="ask_problem", data=data)
        bot.answer_callback_query(call.id, "–û–∫, —É—Ç–æ—á–Ω–∏–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É.")
        bot.send_message(call.message.chat.id, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ-–¥—Ä—É–≥–æ–º—É –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏, –∫–∞–∫ —Ç—ã —ç—Ç–æ –≤–∏–¥–∏—à—å.", reply_markup=main_menu(addr))

# ---------- FLASK (webhook, health) ----------
app = Flask(__name__)

@app.get("/health")
def health():
    return jsonify({"status":"ok","time":datetime.now(timezone.utc).isoformat()})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    update = request.get_data().decode("utf-8", errors="ignore")
    try:
        bot.process_new_updates([types.Update.de_json(json.loads(update))])
    except Exception as e:
        logging.exception("update handling failed: %s", e)
    return "OK", 200

# ---------- –°–ï–¢–ê–ü –í–ï–ë–•–£–ö–ê ----------
def setup_webhook():
    import requests
    url = f"{PUBLIC_URL}/{WEBHOOK_PATH}"
    r = requests.get(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                     params={
                         "url": url,
                         "secret_token": TG_WEBHOOK_SECRET,
                         "allowed_updates": "message,callback_query",
                         "drop_pending_updates": "true"
                     }, timeout=10)
    logging.info("Webhook set resp: %s", r.text)

if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        setup_webhook()
    except Exception as e:
        logging.warning("Webhook setup warn: %s", e)

    port = int(os.getenv("PORT","10000"))
    logging.info("Starting server on 0.0.0.0:%s", port)
    app.run(host="0.0.0.0", port=port)
