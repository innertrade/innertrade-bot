import os, logging, json, time
from datetime import datetime
from typing import Optional

from flask import Flask, request, jsonify, abort
from telebot import TeleBot, types
from openai import OpenAI
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("innertrade")

# ---------- ENV ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
DATABASE_URL   = os.getenv("DATABASE_URL")
PUBLIC_URL     = os.getenv("PUBLIC_URL")            # https://innertrade-bot.onrender.com
WEBHOOK_PATH   = os.getenv("WEBHOOK_PATH")          # –Ω–∞–ø—Ä–∏–º–µ—Ä: wbhk_9t3x
TG_WEBHOOK_SECRET = os.getenv("TG_WEBHOOK_SECRET")  # –ª—é–±–æ–π –¥–ª–∏–Ω–Ω—ã–π —Å–µ–∫—Ä–µ—Ç
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")        # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

for k, v in {
    "TELEGRAM_TOKEN": TELEGRAM_TOKEN,
    "PUBLIC_URL": PUBLIC_URL,
    "WEBHOOK_PATH": WEBHOOK_PATH,
    "TG_WEBHOOK_SECRET": TG_WEBHOOK_SECRET,
}.items():
    if not v:
        raise RuntimeError(f"{k} missing")

# ---------- OPENAI (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----------
client_oa: Optional[OpenAI] = None
if OPENAI_API_KEY:
    try:
        client_oa = OpenAI(api_key=OPENAI_API_KEY)
        log.info("OpenAI client ready")
    except Exception as e:
        log.warning(f"OpenAI init failed: {e}")

# ---------- DB ----------
engine = None
if DATABASE_URL:
    engine = create_engine(DATABASE_URL, pool_pre_ping=True)
    with engine.begin() as conn:
        # –ú–∏–Ω–∏-—Å—Ö–µ–º–∞ (–∫–∞–∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ)
        conn.execute(text("""
        CREATE TABLE IF NOT EXISTS users (
          user_id    BIGINT PRIMARY KEY,
          mode       TEXT NOT NULL DEFAULT 'course',
          created_at TIMESTAMPTZ DEFAULT now(),
          updated_at TIMESTAMPTZ DEFAULT now()
        );
        CREATE TABLE IF NOT EXISTS user_state (
          user_id    BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
          intent     TEXT,
          step       TEXT,
          data       JSONB,
          updated_at TIMESTAMPTZ DEFAULT now()
        );
        CREATE TABLE IF NOT EXISTS errors (
          id BIGSERIAL PRIMARY KEY,
          user_id BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
          error_text TEXT NOT NULL,
          pattern_behavior TEXT,
          pattern_emotion  TEXT,
          pattern_thought  TEXT,
          positive_goal    TEXT,
          tote_goal  TEXT, tote_ops TEXT, tote_check TEXT, tote_exit TEXT,
          checklist_pre TEXT, checklist_post TEXT,
          created_at TIMESTAMPTZ DEFAULT now()
        );
        """))
        log.info("DB connected & migrated")
else:
    log.info("DATABASE_URL not set ‚Äî running stateless")

def ensure_user(uid: int):
    if not engine: return
    try:
        with engine.begin() as conn:
            conn.execute(text("""
                INSERT INTO users(user_id) VALUES(:u)
                ON CONFLICT (user_id) DO UPDATE SET updated_at = now()
            """), {"u": uid})
            conn.execute(text("""
                INSERT INTO user_state(user_id, intent, step, data)
                VALUES(:u, 'idle', NULL, '{}'::jsonb)
                ON CONFLICT (user_id) DO NOTHING
            """), {"u": uid})
    except SQLAlchemyError as e:
        log.error(f"ensure_user DB error: {e}")

def save_state(uid: int, intent: Optional[str]=None, step: Optional[str]=None, data: Optional[dict]=None):
    if not engine: return
    try:
        with engine.begin() as conn:
            if intent is not None:
                conn.execute(text("""
                    UPDATE user_state SET intent=:i, updated_at=now() WHERE user_id=:u
                """), {"i": intent, "u": uid})
            if step is not None:
                conn.execute(text("""
                    UPDATE user_state SET step=:s, updated_at=now() WHERE user_id=:u
                """), {"s": step, "u": uid})
            if data is not None:
                conn.execute(text("""
                    UPDATE user_state SET data=:d, updated_at=now() WHERE user_id=:u
                """), {"d": json.dumps(data), "u": uid})
    except SQLAlchemyError as e:
        log.error(f"save_state DB error: {e}")

def get_state(uid: int) -> dict:
    if not engine: return {"intent":"idle","step":None,"data":{}}
    try:
        with engine.begin() as conn:
            row = conn.execute(text("""
                SELECT intent, step, COALESCE(data,'{}'::jsonb) AS data FROM user_state WHERE user_id=:u
            """), {"u": uid}).mappings().first()
            return row or {"intent":"idle","step":None,"data":{}}
    except SQLAlchemyError as e:
        log.error(f"get_state DB error: {e}")
        return {"intent":"idle","step":None,"data":{}}

# ---------- TELEGRAM ----------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

# –ù–µ–±–æ–ª—å—à–æ–π ¬´—É–º–Ω—ã–π¬ª –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
def sidecar_or_hint(user_text: str, last_prompt: str) -> Optional[str]:
    txt = user_text.strip()
    if not txt.endswith("?"):
        return None
    # –ï—Å–ª–∏ –µ—Å—Ç—å OpenAI, –∫–æ—Ä–æ—Ç–∫–æ –æ—Ç–≤–µ—á–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤–æ–ø—Ä–æ—Å—É
    if client_oa:
        try:
            msg = [
                {"role":"system","content":"–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ (1-2 —Ñ—Ä–∞–∑—ã), –ø–æ –¥–µ–ª—É, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."},
                {"role":"user","content": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ç–æ—á–Ω—è–µ—Ç: ¬´{txt}¬ª. –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –±–æ—Ç–∞ –±—ã–ª: ¬´{last_prompt}¬ª. –ü–æ–º–æ–≥–∏ –ø—Ä–æ—è—Å–Ω–∏—Ç—å –∏ –º—è–≥–∫–æ –≤–µ—Ä–Ω–∏ –∫ –≤–æ–ø—Ä–æ—Å—É."}
            ]
            r = client_oa.chat.completions.create(
                model="gpt-4o-mini",
                messages=msg,
                temperature=0.2,
                max_tokens=120,
            )
            return r.choices[0].message.content.strip()
        except Exception as e:
            log.warning(f"OpenAI sidecar failed: {e}")
    # –§–æ–ª–±—ç–∫: —Å—Ç–∞—Ç–∏—á–Ω—ã–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç
    return f"–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å! –ó–¥–µ—Å—å –∏–º–µ—é –≤ –≤–∏–¥—É *–¥–æ –≤—Ö–æ–¥–∞*, –≤ –º–æ–º–µ–Ω—Ç –≤—ã–±–æ—Ä–∞. –ê —Ç–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: {last_prompt}"

# ---------- –•–ï–ù–î–õ–ï–†–´ ----------
@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m: types.Message):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="idle", step=None, data={})
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /status /ping",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    st = get_state(m.from_user.id)
    bot.send_message(m.chat.id, f"status: intent={st.get('intent')} step={st.get('step')}")

# –ò–Ω—Ç–µ–Ω—Ç—ã-–∫–Ω–æ–ø–∫–∏
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def intent_error(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="error", step="ask_error", data={})
    bot.send_message(
        m.chat.id,
        "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ *–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞*.\n–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def intent_strategy(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="strategy", step="intro")
    bot.send_message(
        m.chat.id,
        "–û–∫, —Å–æ–±–∏—Ä–∞–µ–º –¢–° –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É:\n1) –¶–µ–ª–∏\n2) –°—Ç–∏–ª—å (–¥–Ω–µ–≤–Ω–æ–π/—Å–≤–∏–Ω–≥/–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π)\n3) –†—ã–Ω–∫–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n4) –ü—Ä–∞–≤–∏–ª–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞\n5) –†–∏—Å–∫ (%, —Å—Ç–æ–ø)\n6) –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n7) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏—Å—Ç–æ—Ä–∏—è/–¥–µ–º–æ)",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def intent_passport(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="passport", step="q1")
    bot.send_message(m.chat.id, "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. 1/6) –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å?", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def intent_week(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="week_panel", step="intro")
    bot.send_message(m.chat.id, "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏:\n‚Ä¢ –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n‚Ä¢ –ü–ª–∞–Ω (3 —à–∞–≥–∞)\n‚Ä¢ –õ–∏–º–∏—Ç—ã\n‚Ä¢ –†–∏—Ç—É–∞–ª—ã\n‚Ä¢ –†–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def intent_panic(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="panic", step=None)
    bot.send_message(m.chat.id, "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É/–∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def intent_start_help(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="start_help", step=None)
    bot.send_message(m.chat.id, "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°\n–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º ‚Äî –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏?", reply_markup=main_menu())

# –î–∏–∞–ª–æ–≥ –£—Ä–æ–∫ 1 (–∫–æ—Ä–æ—Ç–∫–∏–π MERCEDES-flow MVP)
MER_QUESTIONS = [
    ("ask_context",  "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç –æ—à–∏–±–∫–µ? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"),
    ("ask_emotions", "–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? –ö–∞–∫ –æ—â—É—â–∞–µ—Ç—Å—è –≤ —Ç–µ–ª–µ? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)"),
    ("ask_thoughts", "–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (1‚Äì2 —Ñ—Ä–∞–∑—ã —Ü–∏—Ç–∞—Ç–∞–º–∏)"),
    ("ask_behavior", "–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ —Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≥–æ–ª–∞–º–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"),
    ("ask_goal",     "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –Ω–æ–≤–æ–µ –∂–µ–ª–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ: *—á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ?*")
]

@bot.message_handler(content_types=["text"])
def router(m: types.Message):
    uid = m.from_user.id
    txt = (m.text or "").strip()
    st = get_state(uid)
    intent = st.get("intent")
    step = st.get("step")
    data = st.get("data") or {}
    last_prompt = None

    # –û–±—â–∏–π ¬´—É–º–Ω—ã–π¬ª –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –≤ —Ä–∞–º–∫–∞—Ö –≤–æ–ø—Ä–æ—Å–∞
    if intent == "error" and step:
        for key, prompt in MER_QUESTIONS:
            if step == key:
                last_prompt = prompt
                break
        if last_prompt:
            hint = sidecar_or_hint(txt, last_prompt)
            if hint:
                bot.send_message(m.chat.id, hint, reply_markup=main_menu())
                return

    # –í–µ—Ç–∫–∞ "–û—à–∏–±–∫–∞"
    if intent == "error":
        if step == "ask_error" or step is None:
            # –ë–µ—Ä—ë–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –æ—à–∏–±–∫–∏ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)
            if len(txt) < 3:
                bot.send_message(m.chat.id, "–ù—É–∂–Ω–∞ –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).")
                return
            data["error_text"] = txt
            save_state(uid, step="ask_context", data=data)
            bot.send_message(m.chat.id, MER_QUESTIONS[0][1], reply_markup=main_menu())
            return

        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—ë–º MER-–≤–æ–ø—Ä–æ—Å—ã
        for idx, (key, prompt) in enumerate(MER_QUESTIONS):
            if step == key:
                field_map = {
                    "ask_context":  "mer_context",
                    "ask_emotions": "mer_emotions",
                    "ask_thoughts": "mer_thoughts",
                    "ask_behavior": "mer_behavior",
                    "ask_goal":     "positive_goal",
                }
                data[field_map[key]] = txt
                if idx + 1 < len(MER_QUESTIONS):
                    next_key, next_prompt = MER_QUESTIONS[idx+1]
                    save_state(uid, step=next_key, data=data)
                    bot.send_message(m.chat.id, next_prompt, reply_markup=main_menu())
                else:
                    # –§–∏–Ω–∞–ª MER ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏–º –≤ —Ç–∞–±–ª–∏—Ü—É errors (–µ—Å–ª–∏ –µ—Å—Ç—å –ë–î)
                    if engine:
                        try:
                            with engine.begin() as conn:
                                conn.execute(text("""
                                    INSERT INTO errors(user_id, error_text, pattern_behavior, pattern_emotion, pattern_thought, positive_goal)
                                    VALUES (:u, :err, :beh, :emo, :th, :pg)
                                """), {
                                    "u": uid,
                                    "err": data.get("error_text",""),
                                    "beh": data.get("mer_behavior",""),
                                    "emo": data.get("mer_emotions",""),
                                    "th":  data.get("mer_thoughts",""),
                                    "pg":  data.get("positive_goal",""),
                                })
                        except SQLAlchemyError as e:
                            log.error(f"INSERT errors failed: {e}")
                    save_state(uid, intent="idle", step=None, data={})
                    bot.send_message(
                        m.chat.id,
                        "–ì–æ—Ç–æ–≤–æ. –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª –ø–∞—Ç—Ç–µ—Ä–Ω –∏ —Ü–µ–ª—å. –•–æ—á–µ—à—å —Å—Ä–∞–∑—É –æ—Ñ–æ—Ä–º–∏—Ç—å TOTE –ø–æ–¥ —ç—Ç—É —Ü–µ–ª—å?",
                        reply_markup=main_menu()
                    )
                return

    # –§–æ–ª–±—ç–∫ ‚Äî –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–Ω—è–ª. –ß—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ ‚Äî –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /menu.",
        reply_markup=main_menu()
    )

# ---------- WEB ----------
app = Flask(__name__)

@app.get("/health")
def health():
    return jsonify({"status":"ok","time": datetime.utcnow().isoformat() + "Z"})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–º–µ—Ç—Ä–∞
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    try:
        upd = types.Update.de_json(request.get_data().decode("utf-8"))
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –∫–æ—Ä–æ—Ç–∫–∏–π –ª–æ–≥
        who = None
        try:
            if upd.message and upd.message.from_user:
                who = upd.message.from_user.id
            elif upd.callback_query and upd.callback_query.from_user:
                who = upd.callback_query.from_user.id
        except Exception:
            pass
        log.info(f"update <- {who} type={('callback' if upd.callback_query else 'message')}")
        bot.process_new_updates([upd])
        return "OK", 200
    except Exception as e:
        log.exception(f"webhook exception: {e}")
        return "ERR", 500

@app.get("/")
def root():
    return "OK"

if __name__ == "__main__":
    # –ù–ò–ö–ê–ö–û–ì–û polling ‚Äî —Ç–æ–ª—å–∫–æ –≤–µ–±—Ö—É–∫
    port = int(os.getenv("PORT", "10000"))
    log.info(f"Starting Flask on 0.0.0.0:{port}, webhook /{WEBHOOK_PATH}")
    app.run(host="0.0.0.0", port=port)
