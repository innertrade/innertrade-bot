import os
import logging
import threading
from datetime import datetime
from typing import Optional

import telebot
from telebot import types
from openai import OpenAI
from flask import Flask, jsonify

# === ENV ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets")
if not OPENAI_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets")
if not DATABASE_URL:
    raise RuntimeError("–ù–µ—Ç DATABASE_URL –≤ Secrets")

# === LOGS ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# === OpenAI client ===
client = OpenAI(api_key=OPENAI_KEY)

# === Telegram bot ===
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# === Keepalive Flask ===
app = Flask(__name__)

@app.get("/")
def root():
    return "Innertrade bot: OK"

@app.get("/health")
def health():
    return jsonify({"status": "pong", "service": "Innertrade"})

def run_keepalive():
    port = int(os.getenv("PORT", "10000"))
    logging.info("Starting keepalive web server‚Ä¶")
    app.run(host="0.0.0.0", port=port, debug=False, use_reloader=False)

# === DB (SQLAlchemy) ===
from sqlalchemy import (
    create_engine, Column, Integer, BigInteger, String, Text, DateTime, ForeignKey, JSON, func
)
from sqlalchemy.orm import declarative_base, sessionmaker, relationship, scoped_session

engine = create_engine(DATABASE_URL, pool_pre_ping=True)
SessionLocal = scoped_session(sessionmaker(bind=engine, autoflush=False, autocommit=False))
Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    tg_id = Column(BigInteger, unique=True, index=True, nullable=False)
    username = Column(String(255))
    first_name = Column(String(255))
    last_name = Column(String(255))
    created_at = Column(DateTime, server_default=func.now())
    updated_at = Column(DateTime, onupdate=func.now(), server_default=func.now())

    passport = relationship("Passport", back_populates="user", uselist=False, cascade="all, delete-orphan")

class Passport(Base):
    __tablename__ = "passports"
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("users.id"), nullable=False, index=True)
    # –ë–∞–∑–æ–≤–æ–µ —è–¥—Ä–æ –ø–æ–ª–µ–π ¬´–ø–∞—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö¬ª ‚Äî –ø–æ–∫–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–æ, –¥–∞–ª—å—à–µ —Ä–∞—Å—à–∏—Ä–∏–º
    risk_profile = Column(String(255))          # –ø—Ä–∏–º–µ—Ä: "–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π/—É–º–µ—Ä–µ–Ω–Ω—ã–π/–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π"
    style = Column(String(255))                 # –ø—Ä–∏–º–µ—Ä: "–∏–Ω—Ç—Ä–∞–¥–µ–π/—Å–≤–∏–Ω–≥/–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π"
    timeframes = Column(String(255))            # –ø—Ä–∏–º–µ—Ä: "M15,H1" (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    instruments = Column(String(255))           # –ø—Ä–∏–º–µ—Ä: "BTCUSDT, ES"
    triggers_blocklist = Column(Text)           # ¬´—Ñ—Ä–∞–∑—ã-–∑–∞–ø—Ä–µ—Ç—ã¬ª (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π)
    rituals = Column(Text)                      # –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫/—Ä–∏—Ç—É–∞–ª–æ–≤
    notes = Column(Text)                        # –ª—é–±—ã–µ –∑–∞–º–µ—Ç–∫–∏
    version = Column(Integer, default=1)
    updated_at = Column(DateTime, onupdate=func.now(), server_default=func.now())

    user = relationship("User", back_populates="passport")

def create_tables():
    Base.metadata.create_all(engine)
    logging.info("DB: tables ensured")

def db_session():
    return SessionLocal()

def get_or_create_user(tg_id: int, username: Optional[str], first: Optional[str], last: Optional[str]) -> User:
    session = db_session()
    try:
        u: Optional[User] = session.query(User).filter_by(tg_id=tg_id).one_or_none()
        if u is None:
            u = User(tg_id=tg_id, username=username, first_name=first, last_name=last)
            session.add(u)
            session.commit()
            session.refresh(u)
            logging.info(f"DB: created user tg_id={tg_id}")
        else:
            # –ú—è–≥–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏/–Ω–∏–∫–∞, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            changed = False
            if u.username != username:
                u.username = username; changed = True
            if u.first_name != first:
                u.first_name = first; changed = True
            if u.last_name != last:
                u.last_name = last; changed = True
            if changed:
                session.commit()
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É —é–∑–µ—Ä–∞ –µ—Å—Ç—å –ø–∞—Å–ø–æ—Ä—Ç (–ø–æ–∫–∞ –ø—É—Å—Ç–æ–π)
        if u.passport is None:
            p = Passport(user_id=u.id)
            session.add(p)
            session.commit()
            session.refresh(u)
        return u
    finally:
        session.close()

# === Simple GPT wrapper (–∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∫–∞ –¥–µ—Ä–∂–∏–º –≤ –ø–∞–º—è—Ç–∏, –ø–æ–∑–∂–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–º –≤ –ë–î) ===
history = {}  # uid -> [{"role": "...", "content": "..."}]

def ask_gpt(uid: int, text: str) -> str:
    msgs = history.setdefault(uid, [])
    msgs.append({"role": "user", "content": text})
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.4,
        messages=msgs
    )
    reply = (resp.choices[0].message.content or "").strip()
    msgs.append({"role": "assistant", "content": reply})
    return reply

def send_long(chat_id: int, text: str):
    MAX = 3500
    for i in range(0, len(text), MAX):
        bot.send_message(chat_id, text[i:i+MAX])

# === UI: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∏–Ω—Ç–µ–Ω—Ç–∞–º–∏ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä) ===
def main_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(
        types.KeyboardButton("ü™™ –ü—Ä–æ—Ñ–∏–ª—å"),
        types.KeyboardButton("üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
    )
    kb.row(
        types.KeyboardButton("üö® –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞"),
        types.KeyboardButton("üß± –°–æ–±—Ä–∞—Ç—å –¢–°")
    )
    kb.row(
        types.KeyboardButton("üß≠ –ù–µ –∑–Ω–∞—é —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å"),
        types.KeyboardButton("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
    )
    kb.row(
        types.KeyboardButton("üóÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"),
        types.KeyboardButton("–°–±—Ä–æ—Å")
    )
    return kb

# === START / PING / RESET ===
@bot.message_handler(commands=['start'])
def cmd_start(m):
    bot.remove_webhook()  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    uid = m.from_user.id
    get_or_create_user(
        tg_id=uid,
        username=m.from_user.username,
        first=m.from_user.first_name,
        last=m.from_user.last_name
    )
    history[uid] = []
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade.\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=main_kb()
    )

@bot.message_handler(commands=['ping'])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=['reset'])
def cmd_reset(m):
    history[m.from_user.id] = []
    bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.", reply_markup=main_kb())

# === –ü–†–û–§–ò–õ–¨: –≤—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞ ===
def render_passport_text(p: Passport) -> str:
    def dash(x): return x if (x and x.strip()) else "‚Äî"
    return (
        "<b>ü™™ –ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞</b>\n"
        f"‚Ä¢ –†–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å: {dash(p.risk_profile)}\n"
        f"‚Ä¢ –°—Ç–∏–ª—å: {dash(p.style)}\n"
        f"‚Ä¢ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {dash(p.timeframes)}\n"
        f"‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {dash(p.instruments)}\n"
        f"‚Ä¢ –ó–∞–ø—Ä–µ—Ç–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: {dash(p.triggers_blocklist)}\n"
        f"‚Ä¢ –†–∏—Ç—É–∞–ª—ã: {dash(p.rituals)}\n"
        f"‚Ä¢ –ó–∞–º–µ—Ç–∫–∏: {dash(p.notes)}\n"
        f"‚Ä¢ –í–µ—Ä—Å–∏—è: {p.version or 1}\n"
        f"‚Ä¢ –û–±–Ω–æ–≤–ª—ë–Ω: {p.updated_at.strftime('%Y-%m-%d %H:%M') if p.updated_at else '‚Äî'}"
    )

@bot.message_handler(func=lambda m: (m.text or "").strip() == "ü™™ –ü—Ä–æ—Ñ–∏–ª—å")
def handle_profile(m):
    session = db_session()
    try:
        u = session.query(User).filter_by(tg_id=m.from_user.id).one_or_none()
        if not u or not u.passport:
            bot.send_message(m.chat.id, "–ü–∞—Å–ø–æ—Ä—Ç –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏ /start –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        text = render_passport_text(u.passport)
        bot.send_message(m.chat.id, text)
    finally:
        session.close()

# === –ó–∞–≥–ª—É—à–∫–∏-–∏–Ω—Ç–µ–Ω—Ç—ã (–ø–æ–∫–∞ –±–µ–∑ –ª–æ–≥–∏–∫–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏) ===
@bot.message_handler(func=lambda m: (m.text or "").strip() == "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
def handle_progress(m):
    bot.send_message(m.chat.id, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É/–±–æ—Ç—É (–ø–æ—Å–ª–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞).")

@bot.message_handler(func=lambda m: (m.text or "").strip() == "üö® –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def handle_error_intent(m):
    bot.send_message(m.chat.id, "OK. –ù–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ –≤–∫–ª—é—á–∏–º –º–∏–Ω–∏-—Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏ (Mercedes+TOTE) —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î.")

@bot.message_handler(func=lambda m: (m.text or "").strip() == "üß± –°–æ–±—Ä–∞—Ç—å –¢–°")
def handle_build_ts(m):
    bot.send_message(m.chat.id, "–í–∫–ª—é—á–∏–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¢–° –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç/–æ—à–∏–±–æ–∫. –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø.")

@bot.message_handler(func=lambda m: (m.text or "").strip() == "üß≠ –ù–µ –∑–Ω–∞—é —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def handle_dont_know(m):
    bot.send_message(m.chat.id, "–°–¥–µ–ª–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä (–≤–æ–ø—Ä–æ—Å—ã ‚Üí –ø–æ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç) –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤.")

@bot.message_handler(func=lambda m: (m.text or "").strip() == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def handle_emergency(m):
    bot.send_message(m.chat.id, "–ü–æ–¥–∫–ª—é—á–∏–º –∞–≤–∞—Ä–∏–π–Ω—ã–π –ø–ª–∞–Ω (–±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è + –ª–æ–≥) –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ.")

@bot.message_handler(func=lambda m: (m.text or "").strip() == "üóÇ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
def handle_materials(m):
    bot.send_message(m.chat.id, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã/–ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–æ–±–∞–≤–∏–º —á—É—Ç—å –ø–æ–∑–∂–µ (–ø–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π).")

@bot.message_handler(func=lambda m: (m.text or "").strip() == "–°–±—Ä–æ—Å")
def handle_clear(m):
    history[m.from_user.id] = []
    bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=main_kb())

# === Fallback: –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –ø–æ–∫–∞ —É—Ö–æ–¥–∏—Ç –≤ GPT (–ø–æ–∑–∂–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–º –∏–Ω—Ç–µ–Ω—Ç–∞–º–∏) ===
@bot.message_handler(func=lambda _m: True)
def on_text(m):
    uid = m.from_user.id
    reply = ask_gpt(uid, m.text or "")
    send_long(m.chat.id, reply)

if __name__ == "__main__":
    # DB
    create_tables()

    # —Å–Ω—è—Ç—å webhook –∏ —Å—Ç–∞—Ä—Ç–∞–Ω—É—Ç—å Flask + polling
    try:
        bot.remove_webhook()
        logging.info("Webhook removed (ok)")
    except Exception as e:
        logging.warning(f"Webhook remove warn: {e}")

    threading.Thread(target=run_keepalive, daemon=True).start()
    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
