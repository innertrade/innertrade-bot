# main.py
import os
import json
import logging
from datetime import datetime, timezone
from typing import Optional, Dict, Any

from flask import Flask, request, jsonify, abort
from telebot import TeleBot, types
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError

# =============== –õ–û–ì–ò ===============
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# =============== ENV ===============
TELEGRAM_TOKEN  = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY", "")
DATABASE_URL    = os.getenv("DATABASE_URL", "")
PUBLIC_URL      = os.getenv("PUBLIC_URL", "")
WEBHOOK_PATH    = os.getenv("WEBHOOK_PATH", "webhook")
TG_SECRET       = os.getenv("TG_WEBHOOK_SECRET", "")  # –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å setWebhook
DISPLAY_TZ      = os.getenv("DISPLAY_TZ", "")         # –Ω–∞–ø—Ä. "Europe/Moscow" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN missing")
if not PUBLIC_URL:
    raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")

WEBHOOK_URL = f"{PUBLIC_URL.rstrip('/')}/{WEBHOOK_PATH}"

# =============== DB ===============
engine = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True, future=True)
        with engine.begin() as conn:
            # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (idempotent)
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS users(
              user_id BIGINT PRIMARY KEY,
              mode TEXT NOT NULL DEFAULT 'course',
              created_at TIMESTAMPTZ DEFAULT now(),
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS user_state(
              user_id BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
              intent  TEXT,
              step    TEXT,
              data    JSONB,
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
        logging.info("DB connected & ensured minimal schema")
    except OperationalError as e:
        logging.warning(f"DB not available yet: {e}")
        engine = None
else:
    logging.info("DATABASE_URL not set ‚Äî running without DB persistence")

def db_exec(sql: str, params: Optional[Dict[str, Any]] = None):
    if not engine:
        return None
    with engine.begin() as conn:
        return conn.execute(text(sql), params or {})

def ensure_user(uid: int):
    if not engine: return
    db_exec("INSERT INTO users(user_id) VALUES(:u) ON CONFLICT (user_id) DO NOTHING", {"u": uid})

def get_state(uid: int) -> Dict[str, Any]:
    if not engine:
        return {"intent": "greet", "step": None, "data": {}}
    res = db_exec("SELECT intent, step, COALESCE(data,'{}'::jsonb) AS data FROM user_state WHERE user_id=:u", {"u": uid}).mappings().first()
    return dict(res) if res else {"intent": "greet", "step": None, "data": {}}

def save_state(uid: int, intent: Optional[str] = None, step: Optional[str] = None, data: Optional[dict] = None):
    if not engine: return
    cur = get_state(uid)
    if intent is None: intent = cur.get("intent")
    if step   is None: step   = cur.get("step")
    merged = cur.get("data", {}).copy()
    if data: merged.update(data)
    db_exec("""
    INSERT INTO user_state(user_id,intent,step,data)
    VALUES(:u,:i,:s,CAST(:d AS JSONB))
    ON CONFLICT (user_id) DO UPDATE SET
      intent=EXCLUDED.intent,
      step=EXCLUDED.step,
      data=EXCLUDED.data,
      updated_at=now()
    """, {"u": uid, "i": intent, "s": step, "d": json.dumps(merged)})

# =============== NLP-—Ö–µ–ª–ø–µ—Ä—ã (–º–∏–Ω–∏–º—É–º –ª–æ–≥–∏–∫–∏, –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è ¬´—Ç–µ—Ö–Ω–∏–∫¬ª) ===============
BEHAVIOR_VERBS = [
    "–≤—Ö–æ–∂—É", "–≤–æ–π—Ç–∏", "–∑–∞—Ö–æ–∂—É", "–∑–∞–π—Ç–∏",
    "–≤—ã—Ö–æ–¥", "–≤—ã—Ö–æ–∂—É", "–∑–∞–∫—Ä—ã–≤–∞—é", "–ø–µ—Ä–µ–Ω–æ—à—É", "–¥–≤–∏–≥–∞—é",
    "—É—Å—Ä–µ–¥–Ω—è", "—Ñ–∏–∫—Å–∏—Ä", "—Ñ–∏–∫—Å–∏—Ä—É—é", "–ø—ã—Ç–∞—é—Å—å –æ—Ç—ã–≥—Ä–∞—Ç—å—Å—è",
    "–ø–µ—Ä–µ—Å–∏–∂–∏–≤–∞—é", "—É–≤–µ–ª–∏—á–∏–≤–∞—é —Ä–∏—Å–∫", "—É–º–µ–Ω—å—à–∞—é —Ä–∏—Å–∫"
]

def looks_concrete_behavior(text: str) -> bool:
    t = text.lower()
    return any(v in t for v in BEHAVIOR_VERBS) and len(t.split()) >= 3

def too_abstract(text: str) -> bool:
    t = text.lower()
    return any(x in t for x in ["–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–Ω–∏", "–∏–Ω–æ–≥–¥–∞", "–±—ã–≤–∞–µ—Ç", "–Ω–µ –≤—Å–µ–≥–¥–∞", "–ø–æ-—Ä–∞–∑–Ω–æ–º—É", "–∫–æ–≥–¥–∞-—Ç–æ"])

def summarize_to_behavior(candidate: str) -> str:
    # –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫ –ø–æ–≤–µ–¥–µ–Ω–∏—é
    t = candidate.strip().rstrip(".")
    # –ë–µ–∑ ¬´—É–º–Ω–∏—á–∞–Ω–∏—è¬ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å ‚Äî –±–æ—Ç –ø–æ–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    return t

# =============== TELEGRAM BOT ===============
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "ü§î –ü—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
    return kb

def yes_no_add_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row("‚úÖ –û–∫", "‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å/—É—Ç–æ—á–Ω–∏—Ç—å", "‚ùå –ù–µ —Ç–æ")
    return kb

# =============== –í–°–¢–£–ü–õ–ï–ù–ò–ï (–º—è–≥–∫–æ–µ) ===============
def greet_user(m):
    uid = m.from_user.id
    ensure_user(uid)
    st = get_state(uid)
    data = st.get("data", {})
    # –∏–º—è –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∏–∑ Telegram, –Ω–µ –ø—Ä–æ—Å–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
    name = data.get("name") or (m.from_user.first_name or "").strip()
    want_form = data.get("form")  # 'ty' | 'vy' | None

    # —Å–æ—Ö—Ä–∞–Ω–∏–º –∏–º—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    if name and name != data.get("name"):
        save_state(uid, intent="greet", step="ask_form" if not want_form else None, data={"name": name})

    # –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—â–µ–Ω–∏—è ‚Äî —Å–ø—Ä–æ—Å–∏–º. –°–Ω–∞—á–∞–ª–∞ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–µ–º—Å—è
    if not want_form:
        bot.send_message(
            m.chat.id,
            f"üëã –ü—Ä–∏–≤–µ—Ç{', ' + name if name else ''}! –ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è ‚Äî –Ω–∞ *—Ç—ã* –∏–ª–∏ –Ω–∞ *–≤—ã*?",
            reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).row("—Ç—ã", "–≤—ã")
        )
        save_state(uid, intent="greet", step="ask_form")
        return

    # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ —É–∂–µ –µ—Å—Ç—å ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è
    bot.send_message(
        m.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç{', ' + name if name else ''}! –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ –∑–∞–Ω—è—Ç—å—Å—è –∑–∞–¥–∞—á–µ–π ‚Äî –∫–∞–∫ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ.",
        reply_markup=main_menu()
    )
    save_state(uid, intent="idle", step=None)

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start", "menu", "reset"])
def cmd_start(m):
    # –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    ensure_user(m.from_user.id)
    save_state(m.from_user.id, intent="greet", step=None, data={"session_free_talk": 0})
    greet_user(m)

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    st = get_state(m.from_user.id)
    now_utc = datetime.now(timezone.utc).isoformat()
    human = (
        f"‚úÖ –ë–æ—Ç –∂–∏–≤\n"
        f"‚è± –í—Ä–µ–º—è (UTC): {now_utc}\n"
        f"üéØ Intent: {st.get('intent')}\n"
        f"üß© Step: {st.get('step') or '-'}\n"
        f"üóÑ DB: {'ok' if engine else 'no-db'}"
    )
    bot.send_message(m.chat.id, human)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º—ã
@bot.message_handler(func=lambda msg: msg.text and msg.text.lower() in ["—Ç—ã", "–≤—ã"])
def choose_form(m):
    st = get_state(m.from_user.id)
    if st.get("intent") != "greet" or st.get("step") != "ask_form":
        return  # –Ω–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è
    form = "ty" if m.text.lower() == "—Ç—ã" else "vy"
    save_state(m.from_user.id, intent="idle", step=None, data={"form": form})
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–Ω—è—Ç–æ. –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é.",
        reply_markup=main_menu()
    )

# =============== –ò–ù–¢–ï–ù–¢–´-–ö–ù–û–ü–ö–ò ===============
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def btn_error(m):
    save_state(m.from_user.id, intent="error", step="ask_issue", data={"session_free_talk": 0})
    bot.send_message(
        m.chat.id,
        "–†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, *—á—Ç–æ –∏–º–µ–Ω–Ω–æ* –Ω–µ —Ç–∞–∫. –ú–æ–∂–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ ‚Äî —è –ø–æ–º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ.",
        reply_markup=types.ReplyKeyboardRemove()
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ü—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
def btn_chat(m):
    save_state(m.from_user.id, intent="free", step="warmup", data={"session_free_talk": 0})
    bot.send_message(m.chat.id, "–û–∫–µ–π. –ß—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª–∏—Ç –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ?", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def btn_strategy(m):
    save_state(m.from_user.id, intent="strategy", step="intro")
    bot.send_message(m.chat.id, "–°–æ–±–µ—Ä—ë–º –æ—Å–Ω–æ–≤—É —Ç–≤–æ–µ–π –¢–° –≤ 2 —à–∞–≥–∞. –°–Ω–∞—á–∞–ª–∞ ‚Äî –ø–æ–¥—Ö–æ–¥/—Ç–∞–π–º—Ñ—Ä–µ–π–º—ã/–≤—Ö–æ–¥. –ü–æ–µ—Ö–∞–ª–∏?")

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def btn_passport(m):
    save_state(m.from_user.id, intent="passport", step="intro")
    bot.send_message(m.chat.id, "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å —Ä—ã–Ω–∫–æ–≤/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –≥–¥–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?")

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def btn_week(m):
    save_state(m.from_user.id, intent="week", step="focus")
    bot.send_message(m.chat.id, "–§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏: –∫–∞–∫–æ–π –æ–¥–∏–Ω —É–∑–µ–ª/–Ω–∞–≤—ã–∫ —Å—Ç–æ–∏—Ç —É—Å–∏–ª–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5‚Äì7 –¥–Ω–µ–π?")

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ")
def btn_panic(m):
    save_state(m.from_user.id, intent="panic", step="run")
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª: 1) –ü–∞—É–∑–∞ 2 –º–∏–Ω; 2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É; 3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤; "
        "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä; 5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É.",
        reply_markup=main_menu()
    )

# =============== –°–í–û–ë–û–î–ù–´–ô –°–¢–ê–†–¢ / –†–ï–ó–Æ–ú–ï –ö –ü–†–û–ë–õ–ï–ú–ï ===============
def try_converge_issue(uid: int, user_text: str) -> Optional[str]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–π—Ç–∏ –∫ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è:
    - –µ—Å–ª–∏ —É–∂–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ ‚Äî –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å;
    - –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ ‚Äî –≤–µ—Ä–Ω—ë–º None (–Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Ç–æ—á–Ω—è–∫).
    """
    if looks_concrete_behavior(user_text):
        return summarize_to_behavior(user_text)
    if too_abstract(user_text):
        return None
    # –µ—Å–ª–∏ –Ω–µ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ, –Ω–æ –∏ –Ω–µ –æ—á–µ–Ω—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if len(user_text.split()) >= 4:
        return summarize_to_behavior(user_text)
    return None

def ask_for_concrete(m, msg="–ß—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? (–≥–ª–∞–≥–æ–ª–∞–º–∏)"):
    bot.send_message(m.chat.id, msg)

# =============== –ì–õ–ê–í–ù–´–ô –•–ï–ù–î–õ–ï–† –¢–ï–ö–°–¢–ê ===============
@bot.message_handler(content_types=["text"])
def on_text(m):
    uid = m.from_user.id
    st = get_state(uid)
    intent = st.get("intent") or "idle"
    step = st.get("step")
    data = st.get("data", {})
    free_turns = int(data.get("session_free_talk", 0))

    # –í—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ
    if intent == "greet":
        # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ñ–æ—Ä–º—É ‚Äî –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–º ¬´—Ç—ã/–≤—ã¬ª —Ö–µ–Ω–¥–ª–µ—Ä–æ–º –≤—ã—à–µ; –∏–Ω–∞—á–µ –ø—Ä–∏–≤–µ—Ç —É–∂–µ —Å–¥–µ–ª–∞–Ω
        return

    # –°–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—Ö–æ–¥–∞
    if intent in ("free", "error") and step in (None, "warmup", "ask_issue"):
        # 1) –î–∞—Ç—å –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è 1‚Äì2 —Ä–∞–∑–∞, –ø–æ–¥–¥–∞–∫–∏–≤–∞—Ç—å –∏ —É—Ç–æ—á–Ω—è—Ç—å
        if free_turns < 2 and not looks_concrete_behavior(m.text):
            save_state(uid, data={"session_free_talk": free_turns + 1})
            # –ú—è–≥–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ + –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å
            bot.send_message(
                m.chat.id,
                "–ü–æ–Ω–∏–º–∞—é. –ü—Ä–æ–¥–æ–ª–∂–∞–π ‚Äî —á—Ç–æ –∏–º–µ–Ω–Ω–æ –º–µ—à–∞–µ—Ç –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—à–∏–±–∫—É? "
                "–ú–æ–∂–Ω–æ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –æ–¥–Ω–æ–π –Ω–µ–¥–∞–≤–Ω–µ–π —Å–¥–µ–ª–∫–∏."
            )
            return

        # 2) –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É
        candidate = try_converge_issue(uid, m.text)
        if candidate is None:
            ask_for_concrete(m)
            return

        # 3) –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≤–æ—ë —Ä–µ–∑—é–º–µ –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å
        candidate = candidate[0].upper() + candidate[1:]
        save_state(uid, intent="error", step="confirm_issue", data={"issue_text": candidate})
        bot.send_message(
            m.chat.id,
            f"–ó–∞—Ñ–∏–∫—Å–∏—Ä—É—é —Ç–∞–∫: *{candidate}*.\n–ü–æ–¥—Ö–æ–¥–∏—Ç?",
            reply_markup=yes_no_add_kb()
        )
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/—É—Ç–æ—á–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
    if intent == "error" and step == "confirm_issue":
        txt = (m.text or "").lower()
        if "‚úÖ" in txt or "–æ–∫" in txt or "–¥–∞" in txt:
            # done-—É—Å–ª–æ–≤–∏–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ ‚Äî –¥–≤–∏–≥–∞–µ–º—Å—è –∫ —Ä–∞–∑–±–æ—Ä—É, –Ω–µ –Ω–∞–∑—ã–≤–∞—è —Ç–µ—Ö–Ω–∏–∫
            save_state(uid, step="ask_context")
            bot.send_message(m.chat.id, "–û–∫. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç?")
            return
        if "‚úè" in txt or "–¥–æ–±–∞–≤" in txt:
            save_state(uid, step="ask_issue")
            bot.send_message(m.chat.id, "–î–æ–±–∞–≤—å/—É—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å?")
            return
        if "‚ùå" in txt or "–Ω–µ —Ç–æ" in txt or "–Ω–µ—Ç" in txt:
            save_state(uid, step="ask_issue", data={"issue_text": None})
            bot.send_message(m.chat.id, "–ü–æ–Ω—è–ª. –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑ –∫–æ—Ä–æ—Ç–∫–æ: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ —Ç–∞–∫?")
            return
        # –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ ‚Äî —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
        merged = summarize_to_behavior(m.text)
        save_state(uid, step="confirm_issue", data={"issue_text": merged})
        bot.send_message(m.chat.id, f"–ü—Ä–∞–≤–ª—é —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É: *{merged}*. –ü–æ–¥—Ö–æ–¥–∏—Ç?", reply_markup=yes_no_add_kb())
        return

    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã (–±–µ–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤)
    if intent == "error" and step == "ask_context":
        save_state(uid, step="ask_emotions", data={"ctx": m.text.strip()})
        bot.send_message(m.chat.id, "–ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ —Ç–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")
        return

    if intent == "error" and step == "ask_emotions":
        save_state(uid, step="ask_thoughts", data={"emo": m.text.strip()})
        bot.send_message(m.chat.id, "–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –≤ –≥–æ–ª–æ–≤–µ? –ú–æ–∂–µ—à—å –ø—Ä—è–º–æ —Ü–∏—Ç–∞—Ç–∞–º–∏.")
        return

    if intent == "error" and step == "ask_thoughts":
        save_state(uid, step="ask_behavior", data={"thoughts": m.text.strip()})
        bot.send_message(m.chat.id, "–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≥–æ–ª–∞–º–∏.")
        return

    if intent == "error" and step == "ask_behavior":
        # –†–µ–∑—é–º–µ-–ø–∞—Ç—Ç–µ—Ä–Ω + –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ü–µ–ª–∏
        info = get_state(uid).get("data", {})
        issue = info.get("issue_text", "–æ—à–∏–±–∫–∞")
        ctx   = info.get("ctx", "")
        emo   = info.get("emo", "")
        th    = info.get("thoughts", "")
        beh   = m.text.strip()

        pattern = f"–ü–æ—Ö–æ–∂–µ –Ω–∞ —Å–≤—è–∑–∫—É: *{beh}* ‚Üê —á—É–≤—Å—Ç–≤–∞ (*{emo or '‚Ä¶'}*) ‚Üê –º—ã—Å–ª–∏ (*{th or '‚Ä¶'}*) –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ (*{ctx or '‚Ä¶'}*)."
        bot.send_message(m.chat.id, f"–í–∏–∂—É –ø–∞—Ç—Ç–µ—Ä–Ω. {pattern}")

        save_state(uid, step="ask_goal", data={"behavior": beh})
        bot.send_message(m.chat.id, "–ö–∞–∫ –∑–≤—É—á–∏—Ç –∂–µ–ª–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ? (–∫–æ—Ä–æ—Ç–∫–æ, –Ω–∞–±–ª—é–¥–∞–µ–º–æ)")
        return

    if intent == "error" and step == "ask_goal":
        goal = m.text.strip()
        # –ú–∏–Ω–∏-–ø—Ä–æ–≤–µ—Ä–∫–∞ ¬´–Ω–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç–∏¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏–º —É–ø–æ–º—è–Ω—É—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
        if not looks_concrete_behavior(goal):
            bot.send_message(m.chat.id, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–∞–∫ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–¥–æ–∂–∏–¥–∞—é—Å—å –ø–æ–ª–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –∏ –Ω–µ –¥–≤–∏–≥–∞—é —Å—Ç–æ–ø/—Ç–µ–π–∫¬ª")
            return
        save_state(uid, step="ops", data={"goal": goal})
        bot.send_message(m.chat.id, "–û–∫. –ö–∞–∫–∏–µ 2‚Äì3 —à–∞–≥–∞ –ø–æ–º–æ–≥—É—Ç —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç—Ç–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ? (—á–µ–∫-–ª–∏—Å—Ç)")
        return

    if intent == "error" and step == "ops":
        ops = m.text.strip()
        save_state(uid, step="check", data={"ops": ops})
        bot.send_message(m.chat.id, "–ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? (–∫—Ä–∏—Ç–µ—Ä–∏–π: –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´3 —Å–¥–µ–ª–∫–∏ –ø–æ–¥—Ä—è–¥ –±–µ–∑ —Å–¥–≤–∏–≥–∞ —Å—Ç–æ–ø–∞¬ª)")
        return

    if intent == "error" and step == "check":
        check = m.text.strip()
        save_state(uid, step=None, intent="idle", data={"check": check})
        bot.send_message(
            m.chat.id,
            "–ì–æ—Ç–æ–≤–æ. –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –æ—à–∏–±–∫–∏, –ø–∞—Ç—Ç–µ—Ä–Ω –∏ –Ω–æ–≤—É—é —Ü–µ–ª—å —Å –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏. "
            "–ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–µ–º–µ.",
            reply_markup=main_menu()
        )
        return

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∏ –≤ –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Äî –º—è–≥–∫–∏–π –æ—Ç–≤–µ—Ç + –º–µ–Ω—é
    bot.send_message(m.chat.id, "–ü—Ä–∏–Ω—è–ª. –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu())

# =============== FLASK / WEBHOOK ===============
app = Flask(__name__)

@app.get("/")
def root():
    return "OK"

@app.get("/health")
def health():
    return jsonify({"status": "ok", "time": datetime.now(timezone.utc).isoformat()})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if TG_SECRET and request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_SECRET:
        abort(401)
    # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
    MAX_BODY = 1_000_000
    if request.content_length and request.content_length > MAX_BODY:
        abort(413)
    update = request.get_data().decode("utf-8")
    bot.process_new_updates([types.Update.de_json(update)])
    return "OK"

# =============== –õ–û–ö–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö (polling) ===============
def start_polling():
    try:
        bot.remove_webhook()
        logging.info("Webhook removed (ok)")
    except Exception as e:
        logging.warning(f"Webhook remove warn: {e}")
    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(timeout=30, long_polling_timeout=30, skip_pending=True)

if __name__ == "__main__":
    mode = os.getenv("RUN_MODE", "webhook")  # "polling" –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
    if mode == "polling":
        start_polling()
    else:
        # —Ç–æ–ª—å–∫–æ –≤–µ–±—Ö—É–∫ –Ω–∞ Render
        port = int(os.getenv("PORT", "10000"))
        logging.info(f"Starting Flask (webhook={WEBHOOK_URL})‚Ä¶")
        app.run(host="0.0.0.0", port=port)
