# main.py ‚Äî Innertrade Kai Mentor Bot
# –í–µ—Ä—Å–∏—è: 2025-09-26 (v8.0-safe: coach-engine + –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç, –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π app)

from __future__ import annotations
import os, json, time, logging, threading, hashlib
from datetime import datetime, timezone, timedelta
from typing import Any, Dict, Optional, List

from flask import Flask, request, abort, jsonify
import telebot
from telebot import types
from sqlalchemy import create_engine, text
from sqlalchemy.pool import QueuePool
from openai import OpenAI

# --- —Å–æ–∑–¥–∞—ë–º app –°–†–ê–ó–£, —á—Ç–æ–±—ã –æ–Ω —Ç–æ—á–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –¥–ª—è gunicorn: ---
app = Flask(__name__)

# --- –ø–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–π –ª–æ–≥–∏–∫–∏; –ø—Ä–∏ —Å–±–æ–µ ‚Äî –∑–∞–≥–ª—É—à–∫–∞ ---
try:
    import logic_layer as LG  # —Ñ–∞–π–ª logic_layer.py –¥–æ–ª–∂–µ–Ω –ª–µ–∂–∞—Ç—å —Ä—è–¥–æ–º
except Exception as _e:
    logging.getLogger("kai-mentor").error(f"logic_layer import failed: {_e}")

    class _LGStub:
        @staticmethod
        def extract_problem_summary(history: List[Dict]) -> str:
            return "–¢—Ä–∏–≥–≥–µ—Ä—ã: –Ω—É–∂–µ–Ω –ø—Ä–∏–º–µ—Ä"

        @staticmethod
        def process_turn(oai_client, model: str, state: Dict[str, Any], user_text: str) -> Dict[str, Any]:
            # –ø—Ä–æ—Å—Ç–æ–π —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º (2-3 —É—Ç–æ—á–Ω—è—é—â–∏—Ö —à–∞–≥–∞)
            coach = state.get("coach", {})
            turns = int(coach.get("turns", 0)) + 1
            reply = "–î–∞–≤–∞–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ: –≥–¥–µ –∏ –∫–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–¥–µ–ª–∞–ª –Ω–µ –ø–æ –ø–ª–∞–Ω—É?"
            if turns >= 2:
                reply = "–û–∫–µ–π, –≤—Å—ë –±–ª–∏–∂–µ –∫ —Å—É—Ç–∏. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–µ, —á—Ç–æ –º–µ—à–∞–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"
            return {
                "reply": reply, "state_updates": {"coach": {"turns": turns, "loop": "explore"}},
                "ask_confirm": False, "propose_summary": "", "suggest_struct": False
            }
    LG = _LGStub()

# ========= Version =========
def _code_hash():
    try:
        with open(__file__, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()[:8]
    except Exception:
        return "unknown"
BOT_VERSION = f"2025-09-26-{_code_hash()}"

# ========= ENV =========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
PUBLIC_URL     = os.getenv("PUBLIC_URL", "").strip()
WEBHOOK_PATH   = os.getenv("WEBHOOK_PATH", "webhook").strip()
TG_SECRET      = os.getenv("TG_WEBHOOK_SECRET", "").strip()
DATABASE_URL   = os.getenv("DATABASE_URL", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
OPENAI_MODEL   = os.getenv("OPENAI_MODEL", "gpt-4o-mini").strip()

OFFSCRIPT_ENABLED = os.getenv("OFFSCRIPT_ENABLED", "true").lower() == "true"
SET_WEBHOOK_FLAG  = os.getenv("SET_WEBHOOK", "false").lower() == "true"
LOG_LEVEL         = os.getenv("LOG_LEVEL", "INFO").upper()
MAX_BODY          = int(os.getenv("MAX_BODY", "1000000"))
IDLE_MINUTES_REMIND = int(os.getenv("IDLE_MINUTES_REMIND", "60"))
IDLE_MINUTES_RESET  = int(os.getenv("IDLE_MINUTES_RESET", "240"))
REMINDERS_ENABLED   = os.getenv("REMINDERS_ENABLED", "true").lower() == "true"
HIST_LIMIT = 16

# ========= Logging =========
logging.basicConfig(level=LOG_LEVEL, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
log = logging.getLogger("kai-mentor")
log.info(f"Starting bot version: {BOT_VERSION}")

# ========= Guards (–±–µ–∑ KeyError) =========
_required = {
    "TELEGRAM_TOKEN": TELEGRAM_TOKEN,
    "PUBLIC_URL": PUBLIC_URL,
    "WEBHOOK_PATH": WEBHOOK_PATH,
    "TG_WEBHOOK_SECRET": TG_SECRET,
    "DATABASE_URL": DATABASE_URL,
}
_missing = [k for k, v in _required.items() if not v]
if _missing:
    # –ù–µ –ø–∞–¥–∞–µ–º —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏: –≤–µ—Ä–Ω—ë–º 500 –Ω–∞ /version, –Ω–æ app —É–∂–µ —Å–æ–∑–¥–∞–Ω.
    log.error("ENV variables missing: %s", ", ".join(_missing))

# ========= Intents/Steps =========
INTENT_GREET = "greet"
INTENT_FREE  = "free"
INTENT_ERR   = "error"
INTENT_DONE  = "done"

STEP_ASK_STYLE  = "ask_style"
STEP_FREE_INTRO = "free_intro"
STEP_ERR_DESCR  = "err_describe"
STEP_MER_CTX    = "mer_context"
STEP_MER_EMO    = "mer_emotions"
STEP_MER_THO    = "mer_thoughts"
STEP_MER_BEH    = "mer_behavior"
STEP_GOAL       = "goal_positive"
STEP_TOTE_OPS   = "tote_ops"
STEP_TOTE_TEST  = "tote_test"
STEP_TOTE_EXIT  = "tote_exit"
MER_ORDER = [STEP_MER_CTX, STEP_MER_EMO, STEP_MER_THO, STEP_MER_BEH]

# ========= OpenAI =========
oai_client = None
openai_status = "disabled"
if OPENAI_API_KEY and OFFSCRIPT_ENABLED:
    try:
        oai_client = OpenAI(api_key=OPENAI_API_KEY)
        oai_client.chat.completions.create(
            model=OPENAI_MODEL, messages=[{"role": "user", "content": "ping"}], max_tokens=4
        )
        openai_status = "active"
        log.info("OpenAI ready")
    except Exception as e:
        log.error(f"OpenAI init error: {e}")
        oai_client = None
        openai_status = f"error: {e}"

# ========= DB =========
engine = create_engine(
    DATABASE_URL or "sqlite:///tmp.db",  # —á—Ç–æ–±—ã app –ø–æ–¥–Ω—è–ª—Å—è –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –ë–î (–¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ /version)
    poolclass=QueuePool, pool_size=5, max_overflow=10, pool_timeout=30, pool_recycle=1800,
)
def db_exec(sql: str, params: Optional[Dict[str, Any]] = None):
    with engine.begin() as conn:
        return conn.execute(text(sql), params or {})

def init_db():
    if not DATABASE_URL:
        log.warning("DATABASE_URL is empty ‚Äî DB init skipped (diagnostic mode)")
        return
    db_exec("""
    CREATE TABLE IF NOT EXISTS user_state(
        user_id BIGINT PRIMARY KEY,
        intent TEXT,
        step TEXT,
        data TEXT,
        updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
    );
    """)
    db_exec("CREATE INDEX IF NOT EXISTS idx_user_state_updated_at ON user_state(updated_at)")
    db_exec("CREATE INDEX IF NOT EXISTS idx_user_state_intent_step ON user_state(intent, step)")
    log.info("DB initialized")

# ========= State =========
def load_state(uid: int) -> Dict[str, Any]:
    try:
        row = db_exec("SELECT intent, step, data FROM user_state WHERE user_id=:uid", {"uid": uid}).mappings().first()
    except Exception as e:
        log.error("load_state DB error: %s", e)
        row = None
    if row:
        data = {}
        if row["data"]:
            try:
                data = json.loads(row["data"])
            except Exception as e:
                log.error("Failed to parse user data: %s", e)
                data = {}
        if "history" not in data:
            data["history"] = []
        return {"user_id": uid, "intent": row["intent"] or INTENT_GREET, "step": row["step"] or STEP_ASK_STYLE, "data": data}
    return {"user_id": uid, "intent": INTENT_GREET, "step": STEP_ASK_STYLE, "data": {"history": []}}

def save_state(uid: int, intent=None, step=None, data=None) -> Dict[str, Any]:
    cur = load_state(uid)
    intent = intent or cur["intent"]
    step   = step   or cur["step"]
    new_data = cur["data"].copy()
    if data:
        new_data.update(data)
    new_data["last_state_write_at"] = datetime.now(timezone.utc).isoformat()
    try:
        db_exec("""
            INSERT INTO user_state (user_id, intent, step, data, updated_at)
            VALUES (:uid, :intent, :step, :data, CURRENT_TIMESTAMP)
            ON CONFLICT (user_id) DO UPDATE
            SET intent=EXCLUDED.intent, step=EXCLUDED.step, data=EXCLUDED.data, updated_at=CURRENT_TIMESTAMP
        """, {"uid": uid, "intent": intent, "step": step, "data": json.dumps(new_data, ensure_ascii=False)})
    except Exception as e:
        log.error("save_state DB error: %s", e)
    return {"user_id": uid, "intent": intent, "step": step, "data": new_data}

# ========= Bot =========
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML", threaded=False)

MAIN_MENU = types.ReplyKeyboardMarkup(resize_keyboard=True)
MAIN_MENU.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
MAIN_MENU.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
MAIN_MENU.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")

STYLE_KB = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
STYLE_KB.row("—Ç—ã", "–≤—ã")

def _now_iso():
    return datetime.now(timezone.utc).isoformat()

def _append_history(data: Dict[str, Any], role: str, content: str) -> Dict[str, Any]:
    hist = data.get("history", [])
    if len(hist) >= HIST_LIMIT:
        hist = hist[-(HIST_LIMIT - 1):]
    hist.append({"role": role, "content": content})
    data["history"] = hist
    return data

def mer_prompt_for(step: str) -> str:
    return {
        "mer_context": "–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É. –ì–¥–µ –∏ –∫–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ? –ö–æ—Ä–æ—Ç–∫–æ.",
        "mer_emotions": "–ß—Ç–æ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª –≤ –º–æ–º–µ–Ω—Ç–µ (2‚Äì3 —Å–ª–æ–≤–∞)?",
        "mer_thoughts": "–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –º–µ–ª—å–∫–∞–ª–∏ (2‚Äì3 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ñ—Ä–∞–∑—ã)?",
        "mer_behavior": "–ß—Ç–æ —Å–¥–µ–ª–∞–ª —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏? –î–µ–π—Å—Ç–≤–∏—è.",
    }.get(step, "–ü—Ä–æ–¥–æ–ª–∂–∏–º.")

def offer_structural(uid: int, st: Dict[str, Any]):
    if st["data"].get("struct_offer_shown"):
        return
    st["data"]["struct_offer_shown"] = True
    save_state(uid, data=st["data"])
    summary = LG.extract_problem_summary(st["data"].get("history", []))
    kb = types.InlineKeyboardMarkup().row(
        types.InlineKeyboardButton("–†–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ —à–∞–≥–∞–º", callback_data="start_error_flow"),
        types.InlineKeyboardButton("–ü–æ–∫–∞ –Ω–µ—Ç", callback_data="skip_error_flow")
    )
    bot.send_message(uid, f"{summary}\n\n–ì–æ—Ç–æ–≤ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —ç—Ç–æ –ø–æ —à–∞–≥–∞–º?", reply_markup=kb)

# ========= Handlers =========
@bot.message_handler(commands=["start", "reset"])
def cmd_start(m: types.Message):
    uid = m.from_user.id
    st = load_state(uid)
    if st["intent"] == INTENT_GREET and st["step"] == STEP_ASK_STYLE:
        pass
    else:
        st = save_state(uid, INTENT_GREET, STEP_ASK_STYLE, {"history": []})
    bot.send_message(uid,
        "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —É–¥–æ–±–Ω–µ–µ ‚Äî <b>—Ç—ã</b> –∏–ª–∏ <b>–≤—ã</b>?\n\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ ‚Äî –Ω–∞–ø–∏—à–∏: <b>–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä</b>.",
        reply_markup=STYLE_KB
    )

@bot.message_handler(commands=["version", "v"])
def cmd_version(m: types.Message):
    info = (
        f"üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {BOT_VERSION}\n"
        f"üìù –•—ç—à –∫–æ–¥–∞: {_code_hash()}\n"
        f"üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now(timezone.utc).isoformat()}\n"
        f"ü§ñ OpenAI: {openai_status}"
    )
    bot.reply_to(m, info)

@bot.message_handler(commands=["menu"])
def cmd_menu(m: types.Message):
    bot.send_message(m.chat.id, "–ú–µ–Ω—é:", reply_markup=MAIN_MENU)

@bot.message_handler(content_types=["text"])
def on_text(m: types.Message):
    handle_text_message(m.from_user.id, m.text.strip(), m)

# ========= –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ =========
def handle_text_message(uid: int, text_in: str, original_message=None):
    st = load_state(uid)
    log.info("User %s: intent=%s step=%s text='%s'", uid, st["intent"], st["step"], text_in[:200])

    if text_in.lower().strip() in ("–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä", "–Ω–æ–≤—ã–π", "—Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞", "start over"):
        st = save_state(uid, INTENT_FREE, STEP_FREE_INTRO, {"history": [], "struct_offer_shown": False})
        bot.send_message(uid, "–û–∫–µ–π, –Ω–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –ß—Ç–æ —Å–µ–π—á–∞—Å –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ —Ö–æ—á–µ—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=MAIN_MENU)
        return

    st["data"] = _append_history(st["data"], "user", text_in)
    st["data"]["last_user_msg_at"] = _now_iso()
    st["data"]["awaiting_reply"] = True

    if st["intent"] == INTENT_GREET and st["step"] == STEP_ASK_STYLE:
        if text_in.lower() in ("—Ç—ã", "–≤—ã"):
            st["data"]["style"] = text_in.lower()
            st = save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
            bot.send_message(uid, f"–ü—Ä–∏–Ω—è—Ç–æ ({text_in}). –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º? –ß—Ç–æ —Å–µ–π—á–∞—Å –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ —Ö–æ—á–µ—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=MAIN_MENU)
        else:
            save_state(uid, data=st["data"])
            bot.send_message(uid, "–í—ã–±–µ—Ä–∏ ¬´—Ç—ã¬ª –∏–ª–∏ ¬´–≤—ã¬ª.", reply_markup=STYLE_KB)
        return

    if st["intent"] == INTENT_ERR:
        proceed_struct(uid, text_in, st)
        return

    # –ö–û–£–ß-–î–í–ò–ñ–û–ö
    if oai_client and OFFSCRIPT_ENABLED:
        decision = LG.process_turn(oai_client=oai_client, model=OPENAI_MODEL, state=st["data"], user_text=text_in)
        if decision.get("state_updates"):
            st["data"].setdefault("coach", {})
            for k, v in decision["state_updates"].items():
                if isinstance(v, dict) and isinstance(st["data"].get(k), dict):
                    st["data"][k].update(v)
                else:
                    st["data"][k] = v
        reply = decision.get("reply") or "–û–∫–µ–π. –ì–¥–µ –∏–º–µ–Ω–Ω–æ –æ—Ç—Å—Ç—É–ø–∏–ª –æ—Ç –ø–ª–∞–Ω–∞ ‚Äî –≤—Ö–æ–¥/—Å—Ç–æ–ø/–≤—ã—Ö–æ–¥?"
        st["data"] = _append_history(st["data"], "assistant", reply)
        if decision.get("propose_summary"):
            st["data"]["problem_draft"] = decision["propose_summary"]
        save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
        if original_message:
            bot.reply_to(original_message, reply, reply_markup=MAIN_MENU)
        else:
            bot.send_message(uid, reply, reply_markup=MAIN_MENU)
        if decision.get("ask_confirm") and st["data"].get("problem_draft"):
            kb = types.InlineKeyboardMarkup().row(
                types.InlineKeyboardButton("–î–∞, —ç—Ç–æ –æ–Ω–æ", callback_data="confirm_problem"),
                types.InlineKeyboardButton("–ù–µ—Ç, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å", callback_data="refine_problem"),
            )
            bot.send_message(uid, f"–°—É–º–º–∏—Ä—É—é —Ç–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:\n\n<b>{st['data']['problem_draft']}</b>\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç?", reply_markup=kb)
            return
        if decision.get("suggest_struct") or st["data"].get("problem_confirmed"):
            offer_structural(uid, st)
        return
    else:
        turns = int(st["data"].get("coach", {}).get("turns", 0)) + 1
        st["data"].setdefault("coach", {})["turns"] = turns
        reply = "–î–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º: –≥–¥–µ –∏ –∫–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–¥–µ–ª–∞–ª –Ω–µ –ø–æ –ø–ª–∞–Ω—É?" if turns <= 2 else "–ü–æ—á—Ç–∏ —Ç–∞–º. –° –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π ‚Äî –≤ —á—ë–º –∑–∞—Ç—ã–∫?"
        st["data"] = _append_history(st["data"], "assistant", reply)
        save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
        bot.send_message(uid, reply, reply_markup=MAIN_MENU)
        return

# ========= Structural Flow =========
def proceed_struct(uid: int, text_in: str, st: Dict[str, Any]):
    step = st["step"]
    data = st["data"].copy()

    if step == STEP_ERR_DESCR:
        data["error_description"] = text_in
        save_state(uid, INTENT_ERR, STEP_MER_CTX, data)
        bot.send_message(uid, mer_prompt_for(STEP_MER_CTX), reply_markup=MAIN_MENU)
        return

    if step in MER_ORDER:
        mer = data.get("mer", {})
        mer[step] = text_in
        data["mer"] = mer
        idx = MER_ORDER.index(step)
        if idx + 1 < len(MER_ORDER):
            nxt = MER_ORDER[idx + 1]
            save_state(uid, INTENT_ERR, nxt, data)
            bot.send_message(uid, mer_prompt_for(nxt), reply_markup=MAIN_MENU)
        else:
            save_state(uid, INTENT_ERR, STEP_GOAL, data)
            bot.send_message(uid, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å: —á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?", reply_markup=MAIN_MENU)
        return

    if step == STEP_GOAL:
        data["goal"] = text_in
        save_state(uid, INTENT_ERR, STEP_TOTE_OPS, data)
        bot.send_message(uid, "–î–ª—è –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–æ–∫ –Ω–∞–∑–æ–≤–∏ 2‚Äì3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ (–∫–æ—Ä–æ—Ç–∫–æ, —Å–ø–∏—Å–∫–æ–º).", reply_markup=MAIN_MENU)
        return

    if step == STEP_TOTE_OPS:
        tote = data.get("tote", {})
        tote["ops"] = text_in
        data["tote"] = tote
        save_state(uid, INTENT_ERR, STEP_TOTE_TEST, data)
        bot.send_message(uid, "–ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –û–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π.", reply_markup=MAIN_MENU)
        return

    if step == STEP_TOTE_TEST:
        tote = data.get("tote", {})
        tote["test"] = text_in
        data["tote"] = tote
        save_state(uid, INTENT_ERR, STEP_TOTE_EXIT, data)
        bot.send_message(uid, "–ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∂–µ—Ç ¬´–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª ‚Äî —á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å?", reply_markup=MAIN_MENU)
        return

    if step == STEP_TOTE_EXIT:
        tote = data.get("tote", {})
        tote["exit"] = text_in
        data["tote"] = tote
        mer = data.get('mer', {})
        summary = [
            "<b>–ò—Ç–æ–≥ —Ä–∞–∑–±–æ—Ä–∞</b>",
            f"–ü—Ä–æ–±–ª–µ–º–∞: {data.get('error_description', data.get('problem', '‚Äî'))}",
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {mer.get(STEP_MER_CTX, '‚Äî')}",
            f"–≠–º–æ—Ü–∏–∏: {mer.get(STEP_MER_EMO, '‚Äî')}",
            f"–ú—ã—Å–ª–∏: {mer.get(STEP_MER_THO, '‚Äî')}",
            f"–ü–æ–≤–µ–¥–µ–Ω–∏–µ: {mer.get(STEP_MER_BEH, '‚Äî')}",
            f"–¶–µ–ª—å: {data.get('goal', '‚Äî')}",
            f"–®–∞–≥–∏ (3 —Å–¥–µ–ª–∫–∏): {data.get('tote', {}).get('ops', '‚Äî')}",
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {data.get('tote', {}).get('test', '‚Äî')}",
            f"–ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ: {data.get('tote', {}).get('exit', '‚Äî')}",
        ]
        save_state(uid, INTENT_DONE, STEP_FREE_INTRO, data)
        bot.send_message(uid, "\n".join(summary), reply_markup=MAIN_MENU)
        bot.send_message(uid, "–ì–æ—Ç–æ–≤ –≤—ã–Ω–µ—Å—Ç–∏ —ç—Ç–æ –≤ ¬´—Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏¬ª –∏–ª–∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ?", reply_markup=MAIN_MENU)
        return

    save_state(uid, INTENT_FREE, STEP_FREE_INTRO, data)
    bot.send_message(uid, "–û–∫–µ–π, –≤–µ—Ä–Ω—ë–º—Å—è –Ω–∞ —à–∞–≥ –Ω–∞–∑–∞–¥ –∏ —É—Ç–æ—á–Ω–∏–º –µ—â—ë —á—É—Ç—å-—á—É—Ç—å.", reply_markup=MAIN_MENU)

# ========= HTTP =========
@app.get("/")
def root():
    ok_env = not _missing
    return jsonify({"ok": ok_env, "time": _now_iso(), "missing_env": _missing})

@app.get("/version")
def version_api():
    return jsonify({"version": BOT_VERSION, "code_hash": _code_hash(), "status": "running", "timestamp": _now_iso(), "openai": openai_status})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_SECRET:
        abort(401)
    if request.content_length and request.content_length > MAX_BODY:
        abort(413, description="Body too large")
    body = request.get_data()
    if not body:
        abort(400, description="Empty body")
    try:
        update = telebot.types.Update.de_json(body.decode("utf-8"))
        if update is None:
            abort(400, description="Invalid update")
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        log.error("Webhook processing error: %s", e)
        abort(500)

# ========= Init on import (–¥–ª—è gunicorn) =========
try:
    init_db()
    log.info("DB initialized (import)")
except Exception as e:
    log.error("DB init (import) failed: %s", e)

if os.getenv("SET_WEBHOOK","false").lower() == "true":
    try:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(
            url=f"{PUBLIC_URL}/{WEBHOOK_PATH}",
            secret_token=TG_SECRET,
            allowed_updates=["message", "callback_query"]
        )
        log.info("Webhook set to %s/%s", PUBLIC_URL, WEBHOOK_PATH)
    except Exception as e:
        log.error("Webhook setup error: %s", e)

try:
    th = threading.Thread(target=lambda: None, daemon=True)
    th.start()
except Exception as e:
    log.error("Can't start background thread: %s", e)

# ========= Dev run =========
if __name__ == "__main__":
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
