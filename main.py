import os, json, time, logging
from datetime import datetime, timezone
from flask import Flask, request, abort, jsonify
import telebot
from telebot import types

from sqlalchemy import create_engine, text
from sqlalchemy.pool import NullPool

# ---------- CONFIG ----------
APP_VERSION   = os.getenv("APP_VERSION", "chat-first-2025-08-29")
PUBLIC_URL    = os.getenv("PUBLIC_URL", "")
DB_URL        = os.getenv("DATABASE_URL", "")
TG_TOKEN      = os.getenv("TELEGRAM_TOKEN", "")
WEBHOOK_PATH  = os.getenv("WEBHOOK_PATH", "webhook")
WEBHOOK_SECRET= os.getenv("TG_WEBHOOK_SECRET", "")
OFFSCRIPT     = os.getenv("OFFSCRIPT_ENABLED", "true").lower() in ("1","true","yes","on")
OPENAI_KEY    = os.getenv("OPENAI_API_KEY", "")

if not PUBLIC_URL:   raise RuntimeError("PUBLIC_URL missing")
if not TG_TOKEN:     raise RuntimeError("TELEGRAM_TOKEN missing")
if not DB_URL:       raise RuntimeError("DATABASE_URL missing")
if not WEBHOOK_PATH: raise RuntimeError("WEBHOOK_PATH missing")
if not WEBHOOK_SECRET: logging.warning("TG_WEBHOOK_SECRET is empty ‚Äî webhook auth disabled")

logging.basicConfig(level=os.getenv("LOG_LEVEL","INFO"))

# ---------- DB ----------
engine = create_engine(DB_URL, poolclass=NullPool, future=True)

DDL = """
CREATE TABLE IF NOT EXISTS users (
  user_id    BIGINT PRIMARY KEY,
  mode       TEXT NOT NULL DEFAULT 'course',
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE IF NOT EXISTS user_state (
  user_id    BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
  intent     TEXT,
  step       TEXT,
  data       JSONB,
  updated_at TIMESTAMPTZ DEFAULT now()
);
"""
with engine.begin() as conn:
    conn.exec_driver_sql(DDL)

def ensure_user(uid:int):
    with engine.begin() as conn:
        conn.execute(text("""
            INSERT INTO users(user_id) VALUES(:uid)
            ON CONFLICT (user_id) DO UPDATE SET updated_at = now();
        """), {"uid": uid})

def save_state(uid:int, intent:str|None, step:str|None, data:dict|None):
    with engine.begin() as conn:
        conn.execute(text("""
            INSERT INTO user_state (user_id, intent, step, data, updated_at)
            VALUES (:uid, COALESCE(:intent,'greet'), COALESCE(:step,'ask_form'),
                    COALESCE(CAST(:data AS jsonb), '{}'::jsonb), now())
            ON CONFLICT (user_id) DO UPDATE
            SET intent = COALESCE(EXCLUDED.intent, user_state.intent),
                step   = COALESCE(EXCLUDED.step,   user_state.step),
                data   = COALESCE(EXCLUDED.data,   user_state.data, '{}'::jsonb),
                updated_at = now();
        """), {"uid": uid, "intent": intent, "step": step, "data": json.dumps(data) if isinstance(data, dict) else data})

def load_state(uid:int):
    with engine.begin() as conn:
        row = conn.execute(text("SELECT intent, step, data FROM user_state WHERE user_id=:uid"), {"uid": uid}).first()
        if not row: return {"intent":"greet","step":"ask_form","data":{}}
        return {"intent": row[0] or "greet", "step": row[1] or "ask_form", "data": row[2] or {}}

# ---------- AI (optional) ----------
def ai_reply(history: list[dict], fallback:str) -> str:
    """
    history: [{"role":"system"/"user"/"assistant","content":"..."}]
    Returns assistant text. If OpenAI disabled or fails ‚Äî fallback.
    """
    if not (OFFSCRIPT and OPENAI_KEY):
        return fallback
    try:
        # Lazy import to avoid hard dependency if no key
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_KEY)
        sys = {
            "role": "system",
            "content": (
                "–¢—ã ‚Äî —Ç—ë–ø–ª—ã–π –∫–æ—É—á –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –û–±—â–∞–π—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ, –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥–∏–∫, "
                "–Ω–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ –¥–µ—Ä–∂–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –ù–µ —Ü–∏—Ç–∏—Ä—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å–ª–æ–≤–Ω–æ. "
                "–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å: –º—è–≥–∫–æ –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞, —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É, "
                "–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —à–∞–≥–∞–º–∏ (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π)."
            )
        }
        msgs = [sys] + history
        # Use chat.completions for compatibility
        res = client.chat.completions.create(
            model=os.getenv("OPENAI_MODEL","gpt-4o-mini"),
            messages=msgs,
            temperature=0.4,
            max_tokens=300
        )
        return (res.choices[0].message.content or "").strip() or fallback
    except Exception as e:
        logging.warning(f"AI fallback due to: {e}")
        return fallback

# ---------- BOT ----------
bot = telebot.TeleBot(TG_TOKEN, parse_mode="HTML")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

def gently_paraphrase(text_in:str) -> str:
    t = (text_in or "").strip()
    if not t: return "–ü–æ–Ω—è–ª, –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É."
    # –ø—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è –º—è–≥–∫–∞—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∞ (–±–µ–∑ –±—É–∫–≤–∞–ª—å–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è)
    lead = t.split(".")[0][:120]
    return f"–ü–æ–Ω–∏–º–∞—é: —ç—Ç–æ –ø—Ä–æ —Å—Ä—ã–≤—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤–æ–∫—Ä—É–≥ —Å–¥–µ–ª–æ–∫ (¬´{lead}‚Ä¶¬ª). –í–µ—Ä–Ω–æ —É–ª–æ–≤–∏–ª?"

# ---------- FLASK ----------
app = Flask(__name__)

@app.get("/health")
def health():
    return jsonify({"status":"ok","time": datetime.now(timezone.utc).isoformat()})

@app.get("/status")
def status():
    return jsonify({"ok": True,
                    "time": datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S%z"),
                    "version": APP_VERSION})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if WEBHOOK_SECRET and request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    try:
        update = telebot.types.Update.de_json(request.get_data(as_text=True))
        bot.process_new_updates([update])
    except Exception as e:
        logging.exception("Webhook error")
        abort(500)
    return "OK", 200

# ---------- COMMANDS ----------
@bot.message_handler(commands=["ping"])
def cmd_ping(m: telebot.types.Message):
    bot.reply_to(m, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m: telebot.types.Message):
    st = load_state(m.from_user.id)
    bot.reply_to(m, f"<code>{json.dumps({'ok':True,'time': datetime.utcnow().isoformat(timespec='seconds'),'intent': st['intent'],'step': st['step'],'db':'ok'}, ensure_ascii=False, indent=2)}</code>")

@bot.message_handler(commands=["reset","start"])
def cmd_reset(m: telebot.types.Message):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, "greet", "ask_address", {"address": None})
    greet = f"üëã –ü—Ä–∏–≤–µ—Ç, {m.from_user.first_name or '–¥—Ä—É–≥'}!\n–ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏, —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ.\n\n–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî <b>—Ç—ã</b> –∏–ª–∏ <b>–≤—ã</b>? (–Ω–∞–ø–∏—à–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ)"
    bot.send_message(uid, greet, reply_markup=main_menu())

# ---------- GENERAL TEXT ----------
@bot.message_handler(func=lambda m: True, content_types=["text"])
def on_text(m: telebot.types.Message):
    uid = m.from_user.id
    ensure_user(uid)
    st = load_state(uid)
    txt = (m.text or "").strip()

    # –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏:
    if txt == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞":
        save_state(uid, "error", "ask_error", st["data"])
        bot.send_message(uid, "–û–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).", reply_markup=main_menu())
        return
    if txt == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é":
        save_state(uid, "strategy", "intro", st["data"])
        bot.send_message(uid, "–°–æ–±–µ—Ä—ë–º –ø–æ —à–∞–≥–∞–º: —Ä—ã–Ω–æ–∫/–¢–§ ‚Üí –≤—Ö–æ–¥ ‚Üí —Å—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ ‚Üí —Ä–∏—Å–∫. –ü–æ–µ—Ö–∞–ª–∏?", reply_markup=main_menu())
        return
    if txt == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç":
        save_state(uid, "passport", "q1", st["data"])
        bot.send_message(uid, "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. 1/6) –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å?", reply_markup=main_menu())
        return
    if txt == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏":
        save_state(uid, "week_panel", "start", st["data"])
        bot.send_message(uid, "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏: —Ñ–æ–∫—É—Å, 1‚Äì2 —Ü–µ–ª–∏, –ª–∏–º–∏—Ç—ã, —Ä–∏—Ç—É–∞–ª—ã. –ì–æ—Ç–æ–≤ –≤—ã–±—Ä–∞—Ç—å —Ñ–æ–∫—É—Å?", reply_markup=main_menu())
        return
    if txt == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ":
        save_state(uid, "sos", "stop_protocol", st["data"])
        bot.send_message(uid, "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª: 1) –ü–∞—É–∑–∞ 2 –º–∏–Ω 2) –£–±–µ—Ä–∏ –≥—Ä–∞—Ñ–∏–∫ 3) 10 –≤–¥–æ—Ö–æ–≤ 4) –ù–∞–∑–æ–≤–∏ —Ç—Ä–∏–≥–≥–µ—Ä 5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É.", reply_markup=main_menu())
        return
    if txt == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å":
        save_state(uid, "help", "route", st["data"])
        bot.send_message(uid, "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫: 1) –ü–∞—Å–ø–æ—Ä—Ç 2) –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ 3) –°–∫–µ–ª–µ—Ç –¢–°. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?", reply_markup=main_menu())
        return

    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
    if st["intent"] == "greet" and st["step"] in ("ask_address","ask_form"):
        t = txt.lower()
        if t in ("—Ç—ã","–≤—ã"):
            st["data"]["address"] = t
            save_state(uid, "greet", "free_talk", st["data"])
            reply = "–ü—Ä–∏–Ω—è—Ç–æ. –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª–∏—Ç, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ."
            bot.send_message(uid, reply, reply_markup=main_menu())
            return
        else:
            # –æ—Ñ—Ñ—Å–∫—Ä–∏–ø—Ç: –ø–æ–∑–≤–æ–ª—è–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
            fallback = "–ü–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–Ω–æ —Å–ª–æ–≤–æ: ¬´—Ç—ã¬ª –∏–ª–∏ ¬´–≤—ã¬ª ‚Äî —Ç–∞–∫ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ –æ–±—â–∞—Ç—å—Å—è."
            out = ai_reply([{"role":"user","content":txt}], fallback)
            bot.send_message(uid, out, reply_markup=main_menu())
            return

    # –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    if st["intent"] in ("greet","help") and st["step"] in ("free_talk","route","ask_address","ask_form"):
        # –ü—ã—Ç–∞–µ–º—Å—è –º—è–≥–∫–æ –≤—ã—è–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è, –±–µ–∑ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        paraphrase = gently_paraphrase(txt)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç —Ä–∞–∑–±–æ—Ä ‚Äî –ø–µ—Ä–µ–π–¥—ë–º —Å—Ä–∞–∑—É
        if any(k in txt.lower() for k in ("–æ—à–∏–±–∫–∞","–ø—Ä–æ—Å–∞–¥–∫","–Ω–∞—Ä—É—à–∞","—Å—Ç–æ–ø","—É—Å—Ä–µ–¥–Ω", "–Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å")):
            save_state(uid, "error", "confirm_problem", {"candidate": txt})
            bot.send_message(uid, f"{paraphrase}\n\n–ï—Å–ª–∏ –≤–µ—Ä–Ω–æ ‚Äî —Å–∫–∞–∂–∏ ¬´–¥–∞¬ª, –∏ —Ä–∞–∑–±–µ—Ä—ë–º –ø–æ —à–∞–≥–∞–º. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–ø—Ä–∞–≤—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.", reply_markup=main_menu())
            return
        # –ò–Ω–∞—á–µ –ø–æ–¥–¥–µ—Ä–∂–∏–º –¥–∏–∞–ª–æ–≥ –æ—Ñ—Ñ—Å–∫—Ä–∏–ø—Ç–æ–º
        fallback = "–ü–æ–Ω–∏–º–∞—é. –†–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ ‚Äî –≤ —á—ë–º –∏–º–µ–Ω–Ω–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–µ–π—á–∞—Å?"
        out = ai_reply([{"role":"user","content":txt}], fallback)
        bot.send_message(uid, out, reply_markup=main_menu())
        return

    # –í–µ—Ç–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –æ—à–∏–±–∫–∏: —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ ‚Üí –≤–æ–ø—Ä–æ—Å—ã
    if st["intent"] == "error":
        step = st["step"]
        data = st["data"] or {}

        if step == "ask_error":
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–¥–∞–ª –∏—Å—Ö–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            data["raw_error"] = txt
            save_state(uid, "error", "confirm_problem", data)
            paraphrase = gently_paraphrase(txt)
            bot.send_message(uid, f"{paraphrase}\n\n–ï—Å–ª–∏ –≤–µ—Ä–Ω–æ ‚Äî —Å–∫–∞–∂–∏ ¬´–¥–∞¬ª. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–ø—Ä–∞–≤—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.")
            return

        if step == "confirm_problem":
            if txt.strip().lower() in ("–¥–∞","–æ–∫","–≤–µ—Ä–Ω–æ","—É–≥—É","–∞–≥–∞","–ø—Ä–∞–≤–∏–ª—å–Ω–æ"):
                save_state(uid, "error", "mer_context", data)
                bot.send_message(uid, "–û–∫. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
                return
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É
            data["raw_error"] = txt
            save_state(uid, "error", "confirm_problem", data)
            paraphrase = gently_paraphrase(txt)
            bot.send_message(uid, f"{paraphrase}\n\n–í–µ—Ä–Ω–æ? –°–∫–∞–∂–∏ ¬´–¥–∞¬ª –∏–ª–∏ –ø–æ–ø—Ä–∞–≤—å –∫–æ—Ä–æ—Ç–∫–æ.")
            return

        if step == "mer_context":
            data["context"] = txt
            save_state(uid, "error", "mer_emotions", data)
            bot.send_message(uid, "–ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")
            return

        if step == "mer_emotions":
            data["emotions"] = txt
            save_state(uid, "error", "mer_thoughts", data)
            bot.send_message(uid, "–ö–∞–∫–∏–µ –º—ã—Å–ª–∏/—Ñ—Ä–∞–∑—ã –∫—Ä—É—Ç—è—Ç—Å—è –≤ –≥–æ–ª–æ–≤–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö)")
            return

        if step == "mer_thoughts":
            data["thoughts"] = txt
            save_state(uid, "error", "mer_behavior", data)
            bot.send_message(uid, "–ß—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≥–æ–ª–∞–º–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).")
            return

        if step == "mer_behavior":
            data["behavior"] = txt
            # –†–µ–∑—é–º–µ –±–µ–∑ –¥–æ—Å–ª–æ–≤–Ω—ã—Ö —Ü–∏—Ç–∞—Ç
            save_state(uid, "error", "new_goal", data)
            bot.send_message(uid, "–û–∫, –≤–∏–∂—É –∫–∞—Ä—Ç–∏–Ω—É. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –Ω–æ–≤—É—é —Ü–µ–ª—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º ‚Äî —á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?")
            return

        if step == "new_goal":
            data["new_goal"] = txt
            save_state(uid, "error", "tote_ops", data)
            bot.send_message(uid, "–ù–∞–∑–æ–≤–∏ 2‚Äì3 —à–∞–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è —ç—Ç–æ–π —Ü–µ–ª–∏ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–∫–∞—Ö.")
            return

        if step == "tote_ops":
            data["tote_ops"] = txt
            save_state(uid, "error", "tote_check", data)
            bot.send_message(uid, "–ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –û–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return

        if step == "tote_check":
            data["tote_check"] = txt
            save_state(uid, "error", "tote_exit", data)
            bot.send_message(uid, "–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ: —á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å, –µ—Å–ª–∏ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—ã–π–¥–µ—Ç ¬´–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª? (1 –¥–µ–π—Å—Ç–≤–∏–µ)")
            return

        if step == "tote_exit":
            data["tote_exit"] = txt
            # —Ñ–∏–Ω–∞–ª
            save_state(uid, "error", "done", data)
            bot.send_message(uid, "–ì–æ—Ç–æ–≤–æ. –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ä–∞–∑–±–æ—Ä. –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ.", reply_markup=main_menu())
            return

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ ‚Äî –º—è–≥–∫–∏–π –æ—Ñ—Ñ—Å–∫—Ä–∏–ø—Ç
    fallback = "–ü–æ–Ω—è–ª. –ú–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ä–∞–∑–±–æ—Ä—É ‚Äî –Ω–∞–∂–º–∏ ¬´üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞¬ª."
    out = ai_reply([{"role":"user","content":txt}], fallback)
    bot.send_message(uid, out, reply_markup=main_menu())

# ---------- LOCAL DEV (optional) ----------
if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (Render –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ python main.py —Ç–æ–∂–µ)
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
