import os
import json
import logging
from datetime import datetime, timezone

from flask import Flask, request, abort, jsonify
from telebot import TeleBot, types
from telebot.types import Update

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("innertrade")

# ----------------- ENV ------------------
TELEGRAM_TOKEN     = os.getenv("TELEGRAM_TOKEN")
TG_WEBHOOK_SECRET  = os.getenv("TG_WEBHOOK_SECRET")   # –ª—é–±–æ–π –≤–∞—à —Å–µ–∫—Ä–µ—Ç (—Ç–æ—Ç –∂–µ, —á—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏ –≤ setWebhook&secret_token=)
PUBLIC_URL         = os.getenv("PUBLIC_URL")          # https://innertrade-bot.onrender.com
WEBHOOK_PATH       = os.getenv("WEBHOOK_PATH")        # –Ω–∞–ø—Ä–∏–º–µ—Ä: wbhk_9t3x
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY", "")
DATABASE_URL       = os.getenv("DATABASE_URL", "")

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN missing")
if not TG_WEBHOOK_SECRET:
    raise RuntimeError("TG_WEBHOOK_SECRET missing")
if not PUBLIC_URL:
    raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")
if not WEBHOOK_PATH:
    raise RuntimeError("WEBHOOK_PATH missing (random safe path)")

# ----------------- BOT ------------------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

def greet(chat_id, first_name: str | None = None):
    name = first_name or "–¥—Ä—É–≥"
    bot.send_message(
        chat_id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {name}! –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏, —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ.\n"
        f"–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
        reply_markup=main_menu()
    )

# ----------------- /health ------------------
app = Flask(__name__)

@app.get("/health")
def health():
    return jsonify({"status": "ok", "time": datetime.now(timezone.utc).isoformat()})

# ----------------- WEBHOOK ------------------
@app.post(f"/{WEBHOOK_PATH}")
def telegram_webhook():
    # –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–µ–∫—Ä–µ—Ç–∞ –æ—Ç Telegram (–≤–∞–∂–Ω–æ, –∏–Ω–∞—á–µ –±—É–¥—É—Ç 401)
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        log.warning("Webhook secret mismatch")
        abort(401)

    if not request.is_json:
        abort(415)

    try:
        update = Update.de_json(request.get_json(force=True))
        bot.process_new_updates([update])
    except Exception as e:
        # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–¥–∞—ë–º 500 –¢–µ–ª–µ–≥–µ ‚Äî –∏–Ω–∞—á–µ getWebhookInfo –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å last_error_message: 500
        log.exception("Error while processing update: %s", e)
        return "OK", 200

    return "OK", 200

# ----------------- –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ ------------------
@bot.message_handler(commands=["start", "menu"])
def cmd_start(m):
    greet(m.chat.id, m.from_user.first_name)

@bot.message_handler(commands=["reset"])
def cmd_reset(m):
    greet(m.chat.id, m.from_user.first_name)

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    # –±–µ–∑ –ø–æ—Ö–æ–¥–∞ –≤ –ë–î ‚Äî –ª–∞–∫–æ–Ω–∏—á–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    payload = {
        "ok": True,
        "time": datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S%z"),
        "intent": "greet",
        "step": "idle",
        "db": "ok" if DATABASE_URL else "none",
    }
    bot.send_message(m.chat.id, f"```\n{json.dumps(payload, ensure_ascii=False, indent=2)}\n```", parse_mode="Markdown")

# ----------------- –ò–ù–¢–ï–ù–¢–´-–ö–ù–û–ü–ö–ò ------------------
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def intent_error(m):
    bot.send_message(
        m.chat.id,
        "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.\n"
        "_–ù–∞–ø—Ä–∏–º–µ—Ä:_ ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –Ω–∞ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def intent_strategy(m):
    bot.send_message(
        m.chat.id,
        "–°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°:\n"
        "1) –¶–µ–ª–∏\n2) –°—Ç–∏–ª—å (–¥–Ω–µ–≤–Ω–æ–π/—Å–≤–∏–Ω–≥)\n3) –†—ã–Ω–∫–∏/–¢–§\n"
        "4) –í—Ö–æ–¥/–≤—ã—Ö–æ–¥\n5) –†–∏—Å–∫ (—Å—Ç–æ–ø/–ª–∏–º–∏—Ç—ã)\n6) –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n7) –¢–µ—Å—Ç –Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏/–¥–µ–º–æ",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def intent_passport(m):
    bot.send_message(
        m.chat.id,
        "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞ ‚Äî 1/6. –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç—ã —Ç–æ—Ä–≥—É–µ—à—å?",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def intent_week(m):
    bot.send_message(
        m.chat.id,
        "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏:\n‚Ä¢ –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n‚Ä¢ 1‚Äì2 —Ü–µ–ª–∏\n‚Ä¢ –õ–∏–º–∏—Ç—ã\n‚Ä¢ –†–∏—Ç—É–∞–ª—ã\n‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def intent_panic(m):
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
        "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä (—á—Ç–æ –≤—ã–±–∏–ª–æ)\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def intent_start_help(m):
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω)\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°\n"
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º: –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏?",
        reply_markup=main_menu()
    )

# ----------------- –°–í–û–ë–û–î–ù–´–ô –¢–ï–ö–°–¢ ------------------
@bot.message_handler(content_types=["text"])
def freestyle(m):
    text = (m.text or "").strip().lower()

    # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∞—è ¬´–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è¬ª —Ä–µ–∞–∫—Ü–∏—è + –º—è–≥–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –º–µ–Ω—é
    if any(greet_word in text for greet_word in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤", "hi", "hello"]):
        bot.send_message(
            m.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ. "
            "–ò–ª–∏ —Ç–∫–Ω–∏ –≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=main_menu()
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –ø–∏—à–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–µ ‚Äî –æ—Ç–≤–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –ø–æ –¥–µ–ª—É
    if any(w in text for w in ["–æ—à–∏–±", "–ø—Ä–∞–≤–∏–ª", "–ø—Ä–æ—Å–∞–¥", "—Å—É–µ—Ç", "—Å—Ç–æ–ø", "—Ç–µ–π–∫"]):
        bot.send_message(
            m.chat.id,
            "–ü–æ–Ω–∏–º–∞—é. –ß—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ —à–∞–≥–∞–º –∏ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –º—ã—Å–ª—å ‚Äî –Ω–∞–∂–º–∏ ¬´üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞¬ª, "
            "–∏ —è –ø—Ä–æ–≤–µ–¥—É —Ç–µ–±—è —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä.",
            reply_markup=main_menu()
        )
        return

    # –§–æ–ª–±—ç–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–Ω—è–ª. –ß—Ç–æ–±—ã –±—ã–ª–æ –±—ã—Å—Ç—Ä–µ–µ, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /menu.",
        reply_markup=main_menu()
    )

# ----------------- APP RUN ------------------
if __name__ == "__main__":
    # –ù–∏–∫–∞–∫–∏—Ö polling ‚Äî —Ç–æ–ª—å–∫–æ webhook —á–µ—Ä–µ–∑ Flask
    port = int(os.getenv("PORT", "10000"))
    log.info("Starting Flask on 0.0.0.0:%s", port)
    app.run(host="0.0.0.0", port=port)
