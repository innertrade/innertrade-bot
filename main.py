import os
import logging
from openai import OpenAI
import telebot
from telebot import types
from flask import Flask

# ====== –ö–ª—é—á–∏ ======
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")  # –Ω–∞ –±—É–¥—É—â–µ–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ë–î —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets")
if not OPENAI_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets")

client = OpenAI(api_key=OPENAI_KEY)

# ====== –õ–æ–≥–∏ ======
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# ====== Keepalive (–¥–ª—è Render / UptimeRobot) ======
app = Flask(__name__)

@app.route("/", methods=["GET"])
def index():
    return "OK: Innertrade bot"

@app.route("/health", methods=["GET"])
def health():
    return "pong"

# ====== –ü–∞–º—è—Ç—å (RAM) ======
history = {}       # uid -> [{"role":"user"/"assistant","content":"..."}]
user_state = {}    # uid -> {"flow": "passport|weekly|error|...", "step": int, "data": dict}

# ====== GPT ======
def ask_gpt(uid, text):
    msgs = history.setdefault(uid, [])
    msgs.append({"role": "user", "content": text})
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.5,
        messages=msgs
    )
    reply = (resp.choices[0].message.content or "").strip()
    msgs.append({"role": "assistant", "content": reply})
    return reply

def send_long(chat_id, text):
    MAX = 3500
    for i in range(0, len(text), MAX):
        bot.send_message(chat_id, text[i:i+MAX])

# ====== –ú–µ–Ω—é ======
def build_main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("–û—à–∏–±–∫–∞"), types.KeyboardButton("–¢–° / –°—Ç—Ä–∞—Ç–µ–≥–∏—è"))
    kb.row(types.KeyboardButton("–ü–∞—Å–ø–æ—Ä—Ç"), types.KeyboardButton("–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏"))
    kb.row(types.KeyboardButton("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"), types.KeyboardButton("–ü—Ä–æ–≥—Ä–µ—Å—Å"))
    kb.row(types.KeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"), types.KeyboardButton("–°–±—Ä–æ—Å"))
    return kb

# ====== –•–µ–ª–ø–µ—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ======
def start_passport(uid):
    user_state[uid] = {"flow": "passport", "step": 1, "data": {}}
    return ("–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞.\n"
            "1/6) –ù–∞ –∫–∞–∫–æ–º —Ä—ã–Ω–∫–µ/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å? (–ø—Ä–∏–º–µ—Ä: –∞–∫—Ü–∏–∏ –°–®–ê, EURUSD, BTC, —Ñ—å—é—á–µ—Ä—Å—ã‚Ä¶)")

def continue_passport(uid, text):
    st = user_state.get(uid, {})
    step = st.get("step", 1)
    data = st.get("data", {})

    if step == 1:
        data["—Ä—ã–Ω–æ–∫"] = text.strip()
        user_state[uid] = {"flow": "passport", "step": 2, "data": data}
        return "2/6) –¢–≤–æ–π —Å—Ç–∏–ª—å: —Å–∫–∞–ª—å–ø–∏–Ω–≥, –∏–Ω—Ç—Ä–∞–¥–µ–π, —Å–≤–∏–Ω–≥, –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π?"
    elif step == 2:
        data["—Å—Ç–∏–ª—å"] = text.strip()
        user_state[uid] = {"flow": "passport", "step": 3, "data": data}
        return "3/6) –†–∞–±–æ—á–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã?"
    elif step == 3:
        data["—Ç–∞–π–º—Ñ—Ä–µ–π–º—ã"] = text.strip()
        user_state[uid] = {"flow": "passport", "step": 4, "data": data}
        return "4/6) –°—Ä–µ–¥–Ω—è—è –¥–Ω–µ–≤–Ω–∞—è —Å–µ—Å—Å–∏—è (–≤—Ä–µ–º—è): –∫–æ–≥–¥–∞ —Ç–æ—Ä–≥—É–µ—à—å?"
    elif step == 4:
        data["–≤—Ä–µ–º—è"] = text.strip()
        user_state[uid] = {"flow": "passport", "step": 5, "data": data}
        return "5/6) –†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (% –æ—Ç –¥–µ–ø–æ)?"
    elif step == 5:
        data["—Ä–∏—Å–∫_–Ω–∞_—Å–¥–µ–ª–∫—É"] = text.strip()
        user_state[uid] = {"flow": "passport", "step": 6, "data": data}
        return "6/6) –ì–ª–∞–≤–Ω–∞—è —Å–ª–∞–±–æ—Å—Ç—å/–æ—à–∏–±–∫–∞ (–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)?"
    elif step == 6:
        data["–≥–ª–∞–≤–Ω–∞—è_–æ—à–∏–±–∫–∞"] = text.strip()
        user_state[uid] = {"flow": None, "step": 0, "data": data}
        # TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å data –≤ –ë–î
        return ("–ì–æ—Ç–æ–≤–æ ‚úÖ –ü–∞—Å–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–ª–æ–∫–∞–ª—å–Ω–æ)."
                "\n–ö—Ä–∞—Ç–∫–æ:\n"
                f"- –†—ã–Ω–æ–∫: {data.get('—Ä—ã–Ω–æ–∫')}\n"
                f"- –°—Ç–∏–ª—å: {data.get('—Å—Ç–∏–ª—å')}\n"
                f"- –¢–§: {data.get('—Ç–∞–π–º—Ñ—Ä–µ–π–º—ã')}\n"
                f"- –í—Ä–µ–º—è: {data.get('–≤—Ä–µ–º—è')}\n"
                f"- –†–∏—Å–∫: {data.get('—Ä–∏—Å–∫_–Ω–∞_—Å–¥–µ–ª–∫—É')}\n"
                f"- –û—à–∏–±–∫–∞: {data.get('–≥–ª–∞–≤–Ω–∞—è_–æ—à–∏–±–∫–∞')}")
    else:
        return start_passport(uid)

def start_weekly(uid):
    user_state[uid] = {"flow": "weekly", "step": 1, "data": {}}
    return ("–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏ üóìÔ∏è\n"
            "1/4) –û–¥–∏–Ω —Ñ–æ–∫—É—Å –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é (—É–∑–µ–ª/–Ω–∞–≤—ã–∫). –ü—Ä–∏–º–µ—Ä: ¬´–ù–µ –ø–µ—Ä–µ—Å–∏–∂–∏–≤–∞—é —É–±—ã—Ç–∫–∏¬ª "
            "–∏–ª–∏ ¬´–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Å–µ—Ç–∞–ø A+ –≤ –¥–µ–Ω—å¬ª. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π —Ñ–æ–∫—É—Å.")

def continue_weekly(uid, text):
    st = user_state.get(uid, {})
    step = st.get("step", 1)
    data = st.get("data", {})

    if step == 1:
        data["—Ñ–æ–∫—É—Å"] = text.strip()
        user_state[uid] = {"flow": "weekly", "step": 2, "data": data}
        return ("2/4) –ü–ª–∞–Ω –Ω–∞ 5 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω–µ–π: –∫–æ—Ä–æ—Ç–∫–æ ‚Äî —á—Ç–æ –¥–µ–ª–∞–µ—à—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ, —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Ñ–æ–∫—É—Å—É?"
                "\n–ü—Ä–∏–º–µ—Ä: ¬´–ü–µ—Ä–µ–¥ —Å–µ—Å—Å–∏–µ–π ‚Äî —á–µ–∫-–ª–∏—Å—Ç –≤—Ö–æ–¥–∞; –ø–æ—Å–ª–µ ‚Äî 2 —Å—Ç—Ä–æ–∫–∏ –≤ –∂—É—Ä–Ω–∞–ª¬ª")
    elif step == 2:
        data["–ø–ª–∞–Ω"] = text.strip()
        user_state[uid] = {"flow": "weekly", "step": 3, "data": data}
        return ("3/4) –õ–∏–º–∏—Ç—ã –∏ —Ä–∞–º–∫–∏: max —Ä–∏—Å–∫/–¥–µ–Ω—å, stop-trading —Ç—Ä–∏–≥–≥–µ—Ä—ã?"
                "\n–ü—Ä–∏–º–µ—Ä: ¬´–ú–∞–∫—Å. -2R/–¥–µ–Ω—å, –ø–æ—Å–ª–µ 2 –ø–æ–¥—Ä—è–¥ —Å—Ç–æ–ø–æ–≤ ‚Äî –ø–∞—É–∑–∞ 30 –º–∏–Ω¬ª")
    elif step == 3:
        data["–ª–∏–º–∏—Ç—ã"] = text.strip()
        user_state[uid] = {"flow": "weekly", "step": 4, "data": data}
        return ("4/4) –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ –Ω–µ–¥–µ–ª–∏ (–ø–æ–∑–∂–µ): –∫–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –Ω–µ–¥–µ–ª—è —É–¥–∞–ª–∞—Å—å?"
                "\n–ü—Ä–∏–º–µ—Ä: ¬´–í—ã–ø–æ–ª–Ω–∏–ª 5/5 —Ä–∏—Ç—É–∞–ª–æ–≤, 0 –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø–æ –ª–∏–º–∏—Ç–∞–º¬ª")
    elif step == 4:
        data["–∫—Ä–∏—Ç–µ—Ä–∏–π_—É—Å–ø–µ—Ö–∞"] = text.strip()
        user_state[uid] = {"flow": None, "step": 0, "data": data}
        # TODO: –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å data –≤ –ë–î
        return ("–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ\n"
                f"–§–æ–∫—É—Å: {data.get('—Ñ–æ–∫—É—Å')}\n"
                f"–ü–ª–∞–Ω: {data.get('–ø–ª–∞–Ω')}\n"
                f"–õ–∏–º–∏—Ç—ã: {data.get('–ª–∏–º–∏—Ç—ã')}\n"
                f"–ö—Ä–∏—Ç–µ—Ä–∏–π —É—Å–ø–µ—Ö–∞: {data.get('–∫—Ä–∏—Ç–µ—Ä–∏–π_—É—Å–ø–µ—Ö–∞')}")
    else:
        return start_weekly(uid)

def start_error(uid):
    user_state[uid] = {"flow": "error", "step": 1, "data": {}}
    return ("–†–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏ (MER+TOTE).\n"
            "–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ (—Å–∏—Ç—É–∞—Ü–∏—è).")

def continue_error(uid, text):
    st = user_state.get(uid, {})
    step = st.get("step", 1)
    data = st.get("data", {})

    if step == 1:
        data["—Å–∏—Ç—É–∞—Ü–∏—è"] = text.strip()
        user_state[uid] = {"flow": "error", "step": 2, "data": data}
        return "–ö–∞–∫–æ–µ –±—ã–ª–æ <b>—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</b> (M –∏–∑ MERCEDES)?"
    elif step == 2:
        data["emotion"] = text.strip()
        user_state[uid] = {"flow": "error", "step": 3, "data": data}
        return "–ö–∞–∫–∏–µ –±—ã–ª–∏ <b>—É–±–µ–∂–¥–µ–Ω–∏—è/–º—ã—Å–ª–∏</b> (E)?"
    elif step == 3:
        data["beliefs"] = text.strip()
        user_state[uid] = {"flow": "error", "step": 4, "data": data}
        return "–ß—Ç–æ —Ç—ã <b>—Å–¥–µ–ª–∞–ª</b> (R ‚Äî —Ä–µ–∞–∫—Ü–∏—è/–ø–æ–≤–µ–¥–µ–Ω–∏–µ)?"
    elif step == 4:
        data["reaction"] = text.strip()
        user_state[uid] = {"flow": "error", "step": 5, "data": data}
        return "–†–µ–∑—É–ª—å—Ç–∞—Ç –∏ –≤—ã–≤–æ–¥ (S). –ß—Ç–æ –º–µ–Ω—è—Ç—å –≤ TOTE-–ø–µ—Ç–ª–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑?"
    elif step == 5:
        data["result"] = text.strip()
        user_state[uid] = {"flow": None, "step": 0, "data": data}
        # TODO: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        return ("–ì–æ—Ç–æ–≤–æ ‚úÖ –†–∞–∑–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω (–ª–æ–∫–∞–ª—å–Ω–æ).\n"
                "–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ —Ä–∏—Ç—É–∞–ª–µ ¬´—Ç–∞–π–º-–∞—É—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏¬ª –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π?")
    else:
        return start_error(uid)

# ====== –ö–æ–º–∞–Ω–¥—ã ======
@bot.message_handler(commands=['start'])
def cmd_start(m):
    uid = m.from_user.id
    history[uid] = []
    user_state[uid] = {"flow": None, "step": 0, "data": {}}
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade.\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=build_main_menu()
    )

@bot.message_handler(commands=['ping'])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=['reset'])
def cmd_reset(m):
    history[m.from_user.id] = []
    user_state[m.from_user.id] = {"flow": None, "step": 0, "data": {}}
    bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.", reply_markup=build_main_menu())

# ====== –ö–Ω–æ–ø–∫–∏ (–∏–Ω—Ç–µ–Ω—Ç—ã) ======
INTENT_ALIASES = {
    "–û—à–∏–±–∫–∞": "error",
    "–¢–° / –°—Ç—Ä–∞—Ç–µ–≥–∏—è": "ts",
    "–ü–∞—Å–ø–æ—Ä—Ç": "passport",
    "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏": "weekly",
    "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": "materials",
    "–ü—Ä–æ–≥—Ä–µ—Å—Å": "progress",
    "–ü—Ä–æ—Ñ–∏–ª—å": "profile",
    "–°–±—Ä–æ—Å": "reset_btn",
}

@bot.message_handler(func=lambda m: (m.text or "").strip() in INTENT_ALIASES.keys())
def on_intent_button(m):
    uid = m.from_user.id
    t = (m.text or "").strip()
    intent = INTENT_ALIASES[t]

    if intent == "reset_btn":
        history[uid] = []
        user_state[uid] = {"flow": None, "step": 0, "data": {}}
        bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=build_main_menu())
        return

    if intent == "passport":
        reply = start_passport(uid)
        send_long(m.chat.id, reply)
        return

    if intent == "weekly":
        reply = start_weekly(uid)
        send_long(m.chat.id, reply)
        return

    if intent == "error":
        reply = start_error(uid)
        send_long(m.chat.id, reply)
        return

    if intent == "ts":
        # –ª—ë–≥–∫–∏–π –≤—Ö–æ–¥ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–π –¢–° ‚Äî –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ (–±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è)
        send_long(m.chat.id, "–•–æ—á–µ—à—å —Å–æ–±—Ä–∞—Ç—å/–ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –¢–°. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º: –ø–æ–¥—Ö–æ–¥/—Ç–∞–π–º—Ñ—Ä–µ–π–º—ã, –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥ –∏–ª–∏ —Ä–∏—Å–∫?")
        return

    if intent == "materials":
        send_long(m.chat.id, "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: MERCEDES, TOTE, –∞—Ä—Ö–µ—Ç–∏–ø—ã, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–µ —É–±–µ–∂–¥–µ–Ω–∏—è, –±–∞–∑–æ–≤–∞—è –¢–°, —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∏ –ø—Ä. (–∫–∞—Ç–∞–ª–æ–≥ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≤ –º–µ–Ω—é).")
        return

    if intent == "progress":
        send_long(m.chat.id, "–†–∞–∑–¥–µ–ª ¬´–ü—Ä–æ–≥—Ä–µ—Å—Å¬ª: —Å–∫–æ—Ä–æ –ø–æ–∫–∞–∂—É % –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∏—Ç—É–∞–ª–æ–≤, —á–∏—Å–ª–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ª–∏–º–∏—Ç–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–∑–ª—ã –Ω–µ–¥–µ–ª–∏.")
        return

    if intent == "profile":
        send_long(m.chat.id, "–ü—Ä–æ—Ñ–∏–ª—å: –ø–∞—Å–ø–æ—Ä—Ç, —Å—Ç–∏–ª—å, —á–∞—Å—ã —Ç–æ—Ä–≥–æ–≤–ª–∏, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. (–ü–æ–∫–∞ —Ö—Ä–∞–Ω—é –ª–æ–∫–∞–ª—å–Ω–æ, –ë–î –ø–æ–¥–∫–ª—é—á–∏–º ‚Äî –±—É–¥—É –ø–æ–º–Ω–∏—Ç—å –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏.)")
        return

# ====== –¢–µ–∫—É—â–∏–µ –ø–æ—à–∞–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ======
@bot.message_handler(func=lambda m: True)
def on_text(m):
    uid = m.from_user.id
    text = (m.text or "").strip()
    st = user_state.get(uid, {"flow": None, "step": 0, "data": {}})

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ–≥–æ
    if st.get("flow") == "passport":
        reply = continue_passport(uid, text)
        send_long(m.chat.id, reply)
        return

    if st.get("flow") == "weekly":
        reply = continue_weekly(uid, text)
        send_long(m.chat.id, reply)
        return

    if st.get("flow") == "error":
        reply = continue_error(uid, text)
        send_long(m.chat.id, reply)
        return

    # –∏–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π GPT
    try:
        reply = ask_gpt(uid, text)
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

if __name__ == "__main__":
    # —Å–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling + –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è /health
    try:
        bot.remove_webhook()
        logging.info("Webhook removed (ok)")
    except Exception as e:
        logging.warning(f"Webhook remove warn: {e}")

    import threading
    def run_flask():
        logging.info("Starting keepalive web server‚Ä¶")
        app.run(host="0.0.0.0", port=int(os.getenv("PORT", 10000)))

    threading.Thread(target=run_flask, daemon=True).start()
    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
