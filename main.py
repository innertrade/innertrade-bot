import os
import logging
from flask import Flask
import telebot
from telebot import types
from openai import OpenAI

# ====== –ö–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")  # —É–∂–µ –µ—Å—Ç—å –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets/Environment")
if not OPENAI_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets/Environment")

# ====== –õ–æ–≥–∏ ======
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ====== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ======
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")
client = OpenAI(api_key=OPENAI_KEY)

# –ü–∞–º—è—Ç—å –ø—Ä–æ—Å—Ç–∞—è (RAM) ‚Äî –¥–ª—è –¥–µ–º–æ; –ø–æ–∑–∂–µ –ø–µ—Ä–µ–≤–µ–¥—ë–º –≤ –ë–î
history = {}  # uid -> [{"role":"user"/"assistant","content":"..."}]

# ====== –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ (–∏–Ω—Ç–µ–Ω—Ç—ã) ======
BTN_ERROR         = "üß© –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞"
BTN_STRATEGY      = "üß≠ –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"
BTN_DONT_KNOW     = "ü§∑ –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å"
BTN_PANIC         = "‚õë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: ¬´–ø–æ–ø–ª—ã–ª¬ª"
BTN_PROGRESS      = "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"
BTN_PROFILE       = "üóÇ –ü–∞—Å–ø–æ—Ä—Ç / –ø—Ä–æ—Ñ–∏–ª—å"
BTN_MATERIALS     = "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"

INTENT_BUTTONS = [
    BTN_ERROR, BTN_STRATEGY, BTN_DONT_KNOW,
    BTN_PANIC, BTN_PROGRESS, BTN_PROFILE, BTN_MATERIALS
]

# ====== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ======
def make_menu_keyboard() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(BTN_ERROR, BTN_STRATEGY)
    kb.row(BTN_DONT_KNOW, BTN_PANIC)
    kb.row(BTN_PROGRESS, BTN_PROFILE, BTN_MATERIALS)
    return kb

def remove_keyboard(chat_id):
    bot.send_message(chat_id, "–û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é‚Ä¶", reply_markup=types.ReplyKeyboardRemove())

def send_menu(chat_id):
    bot.send_message(
        chat_id,
        "–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.",
        reply_markup=make_menu_keyboard()
    )

def ask_gpt(uid, text):
    msgs = history.setdefault(uid, [])
    msgs.append({"role": "user", "content": text})
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.5,
        messages=msgs
    )
    reply = (resp.choices[0].message.content or "").strip()
    msgs.append({"role": "assistant", "content": reply})
    return reply

def send_long(chat_id, text):
    MAX = 3500
    for i in range(0, len(text), MAX):
        bot.send_message(chat_id, text[i:i+MAX])

# ====== –ö–æ–º–∞–Ω–¥—ã ======
@bot.message_handler(commands=['start'])
def cmd_start(m):
    uid = m.from_user.id
    history[uid] = []  # —á–∏—Å—Ç–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    remove_keyboard(m.chat.id)    # —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–¢–µ–ª–µ–≥—Ä–∞–º –µ—ë –∫—ç—à–∏—Ä—É–µ—Ç)
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade.\n"
        "–£–º–µ—é —Ä–∞–∑–±–∏—Ä–∞—Ç—å –æ—à–∏–±–∫–∏, —Å–æ–±–∏—Ä–∞—Ç—å –¢–° –∏ –≤–µ—Å—Ç–∏ —Ç–µ–±—è –ø–æ —à–∞–≥–∞–º.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /ping /reset /menu"
    )
    send_menu(m.chat.id)

@bot.message_handler(commands=['menu'])
def cmd_menu(m):
    remove_keyboard(m.chat.id)
    send_menu(m.chat.id)

@bot.message_handler(commands=['ping'])
def cmd_ping(m):
    bot.reply_to(m, "pong ‚úÖ")

@bot.message_handler(commands=['reset'])
def cmd_reset(m):
    history[m.from_user.id] = []
    remove_keyboard(m.chat.id)
    bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")
    send_menu(m.chat.id)

# ====== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (–ù–û–í–´–ï —Ç–µ–∫—Å—Ç—ã) ======
@bot.message_handler(func=lambda x: (x.text or "") in INTENT_BUTTONS)
def on_buttons(m):
    uid = m.from_user.id
    t = (m.text or "").strip()

    # –ó–¥–µ—Å—å –º–∞–ø–ø–∏–º –∫–Ω–æ–ø–∫—É -> ¬´—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å¬ª –≤ GPT (–ø–æ–∫–∞ –±–µ–∑ –ë–î)
    intent_map = {
        BTN_ERROR:     "–ù–∞—á–∞—Ç—å —Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏ –ø–æ –º–æ–¥–µ–ª–∏ MERCEDES + TOTE. –°–ø—Ä–æ—Å–∏, —á—Ç–æ –±–æ–ª–∏—Ç, –∏ –≤–µ–¥–∏ –ø–æ —à–∞–≥–∞–º.",
        BTN_STRATEGY:  "–ü–æ–º–æ–≥–∏ —Å–æ–±—Ä–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: —Å—Ç–∏–ª—å, —Ä—ã–Ω–æ–∫, TF, –≤—Ö–æ–¥/–≤—ã—Ö–æ–¥, —Ä–∏—Å–∫. –í–µ–¥–∏ —á–µ–∫–ª–∏—Å—Ç–æ–º.",
        BTN_DONT_KNOW:"–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –∑–∞–¥–∞–π 5-7 –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å (–æ—à–∏–±–∫–∞/–¢–°/–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è).",
        BTN_PANIC:     "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: —á—Ç–æ –¥–µ–ª–∞—Ç—å –∫–æ–≥–¥–∞ ¬´–ø–æ–ø–ª—ã–ª¬ª. –ö–æ—Ä–æ—Ç–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏ —Ç–∞–π–º-–∞—É—Ç–æ–º.",
        BTN_PROGRESS:  "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á—ë—Ç: —á—Ç–æ —Å–¥–µ–ª–∞–ª –∑–∞ –Ω–µ–¥–µ–ª—é/–¥–µ–Ω—å, —á—Ç–æ —É–ª—É—á—à–∏—Ç—å, 1 —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥.",
        BTN_PROFILE:   "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞: —á—Ç–æ —ç—Ç–æ, –∫–∞–∫–∏–µ –ø–æ–ª—è, —á–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å. –î–∞–π —à–∞–±–ª–æ–Ω –∏ –∫–∞–∫ –≤–µ—Å—Ç–∏.",
        BTN_MATERIALS: "–°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫—É—Ä—Å–∞ –ø–æ –º–æ–¥—É–ª—è–º (–±–µ–∑ –≤–æ–¥—ã), —á—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å/–¥–µ–ª–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å."
    }

    try:
        reply = ask_gpt(uid, intent_map.get(t, t))
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"

    send_long(m.chat.id, reply)

# ====== –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ======
@bot.message_handler(func=lambda _: True)
def on_text(m):
    uid = m.from_user.id
    try:
        reply = ask_gpt(uid, m.text or "")
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

# ====== Keepalive HTTP –¥–ª—è Render/UptimeRobot ======
app = Flask(__name__)

@app.route("/")
def root():
    return "Innertrade bot alive"

@app.route("/health")
def health():
    return "pong"

if __name__ == "__main__":
    # TeleBot: —Å–Ω–∏–º–∞–µ–º webhook –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    try:
        bot.remove_webhook()
        logging.info("Webhook removed (ok)")
    except Exception as e:
        logging.warning(f"Webhook remove warn: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask (keepalive) –∏ polling –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    from threading import Thread
    def run_flask():
        logging.info("Starting keepalive web server‚Ä¶")
        app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
    Thread(target=run_flask, daemon=True).start()

    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
