# main.py
import os, json, logging, time
from datetime import datetime
from typing import Optional, Tuple, Dict, Any

from flask import Flask, request, jsonify, abort
from telebot import TeleBot, types
from openai import OpenAI
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ---------- ENV ----------
TELEGRAM_TOKEN      = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY      = os.getenv("OPENAI_API_KEY")
DATABASE_URL        = os.getenv("DATABASE_URL")
PUBLIC_URL          = os.getenv("PUBLIC_URL")           # https://innertrade-bot.onrender.com
WEBHOOK_PATH        = os.getenv("WEBHOOK_PATH", "wbhk")
TG_WEBHOOK_SECRET   = os.getenv("TG_WEBHOOK_SECRET")

if not TELEGRAM_TOKEN:    raise RuntimeError("TELEGRAM_TOKEN missing")
if not OPENAI_API_KEY:    raise RuntimeError("OPENAI_API_KEY missing")
if not PUBLIC_URL:        raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")
if not TG_WEBHOOK_SECRET: raise RuntimeError("TG_WEBHOOK_SECRET missing")

WEBHOOK_URL = f"{PUBLIC_URL.rstrip('/')}/{WEBHOOK_PATH}"

# ---------- OPENAI ----------
client = OpenAI(api_key=OPENAI_API_KEY)

# ---------- DB ----------
engine = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True, isolation_level="AUTOCOMMIT")
        with engine.begin() as conn:
            # users + user_state + errors (–º–∏–Ω–∏–º—É–º, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏)
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS users (
              user_id    BIGINT PRIMARY KEY,
              mode       TEXT NOT NULL DEFAULT 'course',
              created_at TIMESTAMPTZ DEFAULT now(),
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS user_state (
              user_id    BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
              intent     TEXT,
              step       TEXT,
              data       JSONB,
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS errors (
              id                BIGSERIAL PRIMARY KEY,
              user_id           BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
              error_text        TEXT NOT NULL,
              pattern_behavior  TEXT,
              pattern_emotion   TEXT,
              pattern_thought   TEXT,
              positive_goal     TEXT,
              tote_goal         TEXT,
              tote_ops          TEXT,
              tote_check        TEXT,
              tote_exit         TEXT,
              checklist_pre     TEXT,
              checklist_post    TEXT,
              created_at        TIMESTAMPTZ DEFAULT now()
            );
            """))
        logging.info("DB connected & migrated")
    except OperationalError as e:
        logging.warning(f"DB not available yet: {e}")
        engine = None
else:
    logging.info("DATABASE_URL not set ‚Äî running without DB")

def db_exec(sql: str, params: dict | None = None):
    if not engine: return None
    with engine.begin() as conn:
        return conn.execute(text(sql), params or {})

def ensure_user(uid: int):
    db_exec("INSERT INTO users(user_id) VALUES (:uid) ON CONFLICT (user_id) DO NOTHING", {"uid": uid})

def get_state(uid: int) -> Tuple[Optional[str], Optional[str], Dict[str, Any]]:
    if not engine:
        return None, None, {}
    row = db_exec("SELECT intent, step, COALESCE(data, '{}'::jsonb) AS data FROM user_state WHERE user_id=:uid", {"uid": uid}).fetchone()
    if not row:
        return None, None, {}
    intent, step, data = row[0], row[1], row[2]
    if isinstance(data, str):
        try: data = json.loads(data)
        except: data = {}
    return intent, step, data or {}

def set_state(uid: int, intent: Optional[str] = None, step: Optional[str] = None,
              data_update: Optional[Dict[str, Any]] = None, replace: bool=False):
    if not engine: return
    ensure_user(uid)
    cur_intent, cur_step, cur_data = get_state(uid)
    new_intent = intent if intent is not None else cur_intent
    new_step   = step   if step   is not None else cur_step
    if replace:
        new_data = data_update or {}
    else:
        new_data = {**(cur_data or {}), **(data_update or {})}
    db_exec("""
        INSERT INTO user_state(user_id, intent, step, data)
        VALUES (:uid, :intent, :step, CAST(:data AS jsonb))
        ON CONFLICT (user_id) DO UPDATE
           SET intent=:intent, step=:step, data=CAST(:data AS jsonb), updated_at=now()
    """, {"uid": uid, "intent": new_intent, "step": new_step, "data": json.dumps(new_data)})

# ---------- TELEGRAM ----------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

# –£—Ç–∏–ª–∏—Ç—ã NATURAL LLM
def llm_short_reply(user_text: str) -> str:
    """–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π/–Ω–µ—Ç–∏–ø–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –±–µ–∑ —É—Ö–æ–¥–∞ –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è."""
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role":"system","content":"–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ-–¥–æ–±—Ä–æ–º—É, –≤ —Å—Ç–∏–ª–µ –∫–æ—É—á–∞. 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–∞–∫—Å–∏–º—É–º."},
                {"role":"user","content": user_text}
            ],
            temperature=0.3,
            max_tokens=120,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        logging.warning(f"LLM short reply error: {e}")
        return "–ü–æ–Ω–∏–º–∞—é. –î–∞–≤–∞–π—Ç–µ —è –ø–æ–º–æ–≥—É —Å—É–∑–∏—Ç—å —Ç–µ–º—É –∏ –¥–≤–∏–Ω–µ–º—Å—è –ø–æ —à–∞–≥–∞–º."

BEHAVIOR_VERBS = [
    "–≤—Ö–æ–∂—É","–∑–∞—Ö–æ–∂—É","–≤—ã—Ö–æ–¥","–≤—ã—Ö–æ–∂—É","–¥–≤–∏–≥–∞—é","–ø–µ—Ä–µ–Ω–æ—à—É","—Ñ–∏–∫—Å–∏—Ä—É—é",
    "—É—Å—Ä–µ–¥–Ω—è—é","–¥–æ–±–∞–≤–ª—è—é","–∑–∞–∫—Ä—ã–≤–∞—é","–ø–µ—Ä–µ—Å–∏–∂–∏–≤–∞—é","–ø–µ—Ä–µ—Å–∏–∂–∏–≤–∞—é —É–±—ã—Ç–æ–∫",
    "–ø–µ—Ä–µ–∑–∞—Ö–æ–¥","—É—Å–∏–ª–∏–≤–∞—é","–æ–±–Ω—É–ª—è—é","–ø—Ä–∏–±–∏—Ä–∞—é","—à–æ—Ä—Ç—é","–ª–æ–Ω–≥—É—é"
]

def looks_behavioral(text_in: str) -> bool:
    t = text_in.lower()
    return any(v in t for v in BEHAVIOR_VERBS) or len(t) >= 120

def llm_summarize_problem(vent: list[str]) -> str:
    """–°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞, –∏–∑–±–µ–≥–∞—è —É—Ä–æ–≤–Ω—è —É–±–µ–∂–¥–µ–Ω–∏–π –Ω–∞ —Å—Ç–∞—Ä—Ç–µ."""
    joined = "\n".join(vent[-6:])  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∏
    prompt = f"""
–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ–¥–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É —Ç—Ä–µ–π–¥–µ—Ä–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞ (–Ω–µ —É–±–µ–∂–¥–µ–Ω–∏–π),
–æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π, –±–µ–∑ –≤–æ–¥—ã –∏ –æ–±—â–∏—Ö —Å–ª–æ–≤. –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∞: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª,
¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª. –í–≤–æ–¥:
{joined}
"""
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role":"system","content":"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫-–∫–æ—É—á. –í—ã–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ—Ä–∞–∑—É-–∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É –ø—Ä–æ –ø–æ–≤–µ–¥–µ–Ω–∏–µ/–Ω–∞–≤—ã–∫."},
                {"role":"user","content": prompt}
            ],
            temperature=0.2,
            max_tokens=60
        )
        return resp.choices[0].message.content.strip().strip("‚Äî- ")
    except Exception as e:
        logging.warning(f"LLM summarize error: {e}")
        # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        return "–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞"

# --------- –ö–æ–º–∞–Ω–¥—ã ---------
@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m):
    ensure_user(m.from_user.id)
    set_state(m.from_user.id, intent="idle", step=None, data_update={"vent":[], "draft_problem":None}, replace=True)
    bot.send_message(m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /status /ping",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(m): bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    intent, step, data = get_state(m.from_user.id)
    bot.send_message(m.chat.id, f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: intent=`{intent}` step=`{step}` vent={len((data or {}).get('vent',[]))}")

# --------- –ò–Ω—Ç–µ–Ω—Ç—ã (–∫–Ω–æ–ø–∫–∏) ---------
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def btn_error(m):
    set_state(m.from_user.id, intent="error", step="free_talk", data_update={"vent":[], "draft_problem":None}, replace=True)
    bot.send_message(m.chat.id,
        "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ **–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞**.\n"
        "–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def btn_strategy(m):
    set_state(m.from_user.id, intent="strategy", step=None)
    bot.send_message(m.chat.id,
        "–û–∫, —Å–æ–±–∏—Ä–∞–µ–º –¢–° –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É:\n"
        "1) –¶–µ–ª–∏\n2) –°—Ç–∏–ª—å (–¥–Ω–µ–≤–Ω–æ–π/—Å–≤–∏–Ω–≥/–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π)\n3) –†—ã–Ω–∫–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n"
        "4) –ü—Ä–∞–≤–∏–ª–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞\n5) –†–∏—Å–∫ (%, —Å—Ç–æ–ø)\n6) –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n7) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def btn_passport(m):
    set_state(m.from_user.id, intent="passport", step=None)
    bot.send_message(m.chat.id, "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. 1/6) –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å?", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def btn_week_panel(m):
    set_state(m.from_user.id, intent="week_panel", step=None)
    bot.send_message(m.chat.id,
        "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏:\n‚Ä¢ –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n‚Ä¢ –ü–ª–∞–Ω (3 —à–∞–≥–∞)\n‚Ä¢ –õ–∏–º–∏—Ç—ã\n‚Ä¢ –†–∏—Ç—É–∞–ª—ã\n‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def btn_panic(m):
    set_state(m.from_user.id, intent="panic", step=None)
    bot.send_message(m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–æ–º\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
        "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä (—á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–±–∏–ª–æ)\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def btn_start_help(m):
    set_state(m.from_user.id, intent="start_help", step=None)
    bot.send_message(m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω)\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°\n"
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º ‚Äî –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏?",
        reply_markup=main_menu()
    )

# --------- –í–ï–¢–ö–ê ¬´–û–®–ò–ë–ö–ê¬ª: –≤—ã–≥–æ–≤–æ—Ä ‚Üí —Å–∏–Ω—Ç–µ–∑ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Üí MERCEDES ----------
def ask_mercedes_first(chat_id: int, uid: int):
    set_state(uid, step="m_context")
    bot.send_message(chat_id, "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç –æ—à–∏–±–∫–µ? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")

def propose_problem(chat_id: int, uid: int, problem: str):
    # inline confirm/refine
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("‚úÖ –î–∞, –≤–µ—Ä–Ω–æ", callback_data="pr_confirm"))
    kb.add(types.InlineKeyboardButton("‚úçÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç—å/–∏—Å–ø—Ä–∞–≤–∏—Ç—å", callback_data="pr_refine"))
    bot.send_message(chat_id,
        f"–Ø —É—Å–ª—ã—à–∞–ª —Ç–∞–∫:\n\n*–†–∞–±–æ—á–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏*: _{problem}_\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç?\n"
        "–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ –ø–æ —Ä–∞–∑–±–æ—Ä–∞–º.",
        reply_markup=kb
    )

@bot.callback_query_handler(func=lambda c: c.data in ["pr_confirm","pr_refine"])
def cb_problem_confirm(c):
    uid = c.from_user.id
    intent, step, data = get_state(uid)
    if intent != "error":
        bot.answer_callback_query(c.id, "–û–∫")
        return
    if c.data == "pr_confirm":
        bot.answer_callback_query(c.id, "–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏")
        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤ errors (–º–∏–Ω–∏–º—É–º ‚Äî —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏)
        if engine and data.get("draft_problem"):
            db_exec("""
                INSERT INTO errors(user_id, error_text) VALUES (:uid, :txt)
            """, {"uid": uid, "txt": data["draft_problem"]})
        ask_mercedes_first(c.message.chat.id, uid)
    else:
        bot.answer_callback_query(c.id, "–û–∫, –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º")
        set_state(uid, step="refine_problem")
        bot.send_message(c.message.chat.id, "–ö–∞–∫ –±—ã —Ç—ã —ç—Ç–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª(–∞) —Ç–æ—á–Ω–µ–µ? 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")

@bot.message_handler(func=lambda m: get_state(m.from_user.id)[0] == "error")
def flow_error(m):
    uid, chat_id, txt = m.from_user.id, m.chat.id, (m.text or "").strip()
    intent, step, data = get_state(uid)
    data = data or {}

    # –í–∞—Ä–∏–∞–Ω—Ç: —É–∂–µ –≤ MERCEDES
    if step and step.startswith("m_"):
        if step == "m_context":
            set_state(uid, step="m_emotions", data_update={"mer_context": txt})
            bot.send_message(chat_id, "–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? –ö–∞–∫ –æ—â—É—â–∞–µ—Ç—Å—è –≤ —Ç–µ–ª–µ? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")
        elif step == "m_emotions":
            set_state(uid, step="m_thoughts", data_update={"mer_emotions": txt})
            bot.send_message(chat_id, "–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (1‚Äì2 —Ñ—Ä–∞–∑—ã)")
        elif step == "m_thoughts":
            set_state(uid, step="m_behavior", data_update={"mer_thoughts": txt})
            bot.send_message(chat_id, "–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ —Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? (–≥–ª–∞–≥–æ–ª–∞–º–∏, 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
        elif step == "m_behavior":
            set_state(uid, step="m_values", data_update={"mer_behavior": txt})
            bot.send_message(chat_id, "–¶–ï–ù–ù–û–°–¢–ò/–£–ë–ï–ñ–î–ï–ù–ò–Ø. –ü–æ—á–µ–º—É –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ ¬´—Ç–∞–∫ –∏ –Ω–∞–¥–æ¬ª? (–∫–æ—Ä–æ—Ç–∫–æ)")
        elif step == "m_values":
            set_state(uid, step="m_state", data_update={"mer_values": txt})
            bot.send_message(chat_id, "–°–û–°–¢–û–Ø–ù–ò–ï. –í –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—Ö–æ–¥–∏–ª? –ß—Ç–æ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–ª–æ: —Ç—Ä–µ–≤–æ–≥–∞/–∞–∑–∞—Ä—Ç/–∫–æ–Ω—Ç—Ä–æ–ª—å?")
        elif step == "m_state":
            # –†–µ–∑—é–º–µ ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –∫ TOTE (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞)
            set_state(uid, step="tote_goal", data_update={"mer_state": txt})
            bot.send_message(chat_id,
                "–ü–æ–Ω—è–ª. –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–ª—å –ø–æ TOTE.\n–ß—Ç–æ –±—É–¥–µ—Ç *–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —Ü–µ–ª—å—é* –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å–¥–µ–ª–∫–µ? (1 —Ñ—Ä–∞–∑–∞, –Ω–∞–±–ª—é–¥–∞–µ–º–æ)")
        elif step == "tote_goal":
            set_state(uid, step="tote_ops", data_update={"tote_goal": txt})
            bot.send_message(chat_id, "–ö–∞–∫–∏–µ —à–∞–≥–∏ –ø–æ–º–æ–≥—É—Ç —É–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–ª—å? (3 –ø—É–Ω–∫—Ç–∞: —á–µ–∫-–ª–∏—Å—Ç/—Ä–∏—Ç—É–∞–ª/—Ç–∞–π–º–µ—Ä –∏ —Ç.–ø.)")
        elif step == "tote_ops":
            set_state(uid, step="tote_check", data_update={"tote_ops": txt})
            bot.send_message(chat_id, "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ü–µ–ª—å —É–¥–µ—Ä–∂–∞–Ω–∞? (–∫—Ä–∏—Ç–µ—Ä–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3 —Å–¥–µ–ª–∫–∏ –±–µ–∑ —Å–¥–≤–∏–≥–∞ —Å—Ç–æ–ø–∞)")
        elif step == "tote_check":
            set_state(uid, step="tote_exit", data_update={"tote_check": txt})
            bot.send_message(chat_id, "–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –µ—Å–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω ‚Äî —á—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º? –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —á—Ç–æ –º–µ–Ω—è–µ–º?")
        elif step == "tote_exit":
            # —Ñ–∏–Ω–∞–ª –≤–µ—Ç–∫–∏
            set_state(uid, intent="idle", step=None, data_update={"tote_exit": txt})
            bot.send_message(chat_id,
                "–û—Ç–ª–∏—á–Ω–æ. –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –¥–æ–±–∞–≤–∏–º —ç—Ç–æ –≤ –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏ –ø–æ–∑–∂–µ. –ì–æ—Ç–æ–≤ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ.",
                reply_markup=main_menu()
            )
        return

    # –†–µ–∂–∏–º —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
    if step == "refine_problem":
        # –û–±–Ω–æ–≤–ª—è–µ–º ¬´—á–µ—Ä–Ω–æ–≤–∏–∫¬ª –∏ —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
        draft = txt
        set_state(uid, step="confirm_problem", data_update={"draft_problem": draft})
        propose_problem(chat_id, uid, draft)
        return

    # FREE TALK: –≤—ã–≥–æ–≤–æ—Ä ‚Üí –∞–≤—Ç–æ-—Å–∏–Ω—Ç–µ–∑ ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    vent = data.get("vent", [])
    # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å/—É—Ç–æ—á–Ω–µ–Ω–∏–µ ‚Äî –æ—Ç–≤–µ—Ç–∏–º –∫–æ—Ä–æ—Ç–∫–æ –≤ –∫–æ—É—á-—Å—Ç–∏–ª–µ –∏ –ø–æ–ø—Ä–æ—Å–∏–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    if "?" in txt and (len(txt) <= 140 or not looks_behavioral(txt)):
        reply = llm_short_reply(txt)
        bot.send_message(chat_id, reply)
        bot.send_message(chat_id, "–î–æ–±–∞–≤—å –µ—â—ë –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π: –∫–æ–≥–¥–∞ —ç—Ç–æ —á–∞—â–µ —Å–ª—É—á–∞–µ—Ç—Å—è –∏ —á—Ç–æ —Ç—ã –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –¥–µ–ª–∞–µ—à—å?")
        vent.append(txt)
        set_state(uid, step="free_talk", data_update={"vent": vent})
        return

    vent.append(txt)
    set_state(uid, step="free_talk", data_update={"vent": vent})

    # Done-—É—Å–ª–æ–≤–∏–µ: (–∞) ‚â•2 —Ä–µ–ø–ª–∏–∫ –ò–õ–ò (–±) —è–≤–Ω–∞—è –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞
    if len(vent) >= 2 or looks_behavioral(txt):
        problem = llm_summarize_problem(vent)
        set_state(uid, step="confirm_problem", data_update={"draft_problem": problem})
        propose_problem(chat_id, uid, problem)
        return

    # –ò–Ω–∞—á–µ ‚Äî –º—è–≥–∫–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–≥–æ–≤–æ—Ä
    bot.send_message(chat_id,
        "–ü–æ–Ω–∏–º–∞—é. –†–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë —á—É—Ç—å-—á—É—Ç—å: *–≤ –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏* —ç—Ç–æ —á–∞—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏ *—á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å* –¥–∞–ª—å—à–µ?",
    )

# --------- Fallback: –ø—Ä–æ—á–∏–π —Ç–µ–∫—Å—Ç –≤–Ω–µ –≤–µ—Ç–æ–∫ ----------
@bot.message_handler(content_types=["text"])
def fallback(m):
    bot.send_message(m.chat.id, "–ü—Ä–∏–Ω—è–ª. –ß—Ç–æ–±—ã –±—ã–ª–æ –±—ã—Å—Ç—Ä–µ–µ, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /menu.", reply_markup=main_menu())

# ---------- Flask / Webhook ----------
app = Flask(__name__)

@app.get("/")
def root():
    return "OK", 200

@app.get("/health")
def health():
    return jsonify({"status":"ok","time":datetime.utcnow().isoformat()+"Z"})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    update = request.get_data().decode("utf-8")
    bot.process_new_updates([types.Update.de_json(update)])
    return "ok"

def install_webhook():
    try:
        bot.remove_webhook()
    except Exception:
        pass
    time.sleep(0.5)
    ok = bot.set_webhook(
        url=WEBHOOK_URL,
        secret_token=TG_WEBHOOK_SECRET,
        allowed_updates=["message","callback_query"]
    )
    logging.info(f"Webhook set -> {ok} @ {WEBHOOK_URL}")

if __name__ == "__main__":
    install_webhook()
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
