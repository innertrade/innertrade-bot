# main.py
import os
import json
import logging
from datetime import datetime

from flask import Flask, request, jsonify, abort
from telebot import TeleBot, types
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError
from openai import OpenAI

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("innertrade")

# ----------------- ENV -----------------
TELEGRAM_TOKEN     = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY")
DATABASE_URL       = os.getenv("DATABASE_URL")
PUBLIC_URL         = os.getenv("PUBLIC_URL")
WEBHOOK_PATH       = os.getenv("WEBHOOK_PATH")           # –Ω–∞–ø—Ä–∏–º–µ—Ä: wbhk_9t3x
TG_WEBHOOK_SECRET  = os.getenv("TG_WEBHOOK_SECRET")      # –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Å–µ–∫—Ä–µ—Ç

for key, val in {
    "TELEGRAM_TOKEN": TELEGRAM_TOKEN,
    "OPENAI_API_KEY": OPENAI_API_KEY,
    "PUBLIC_URL": PUBLIC_URL,
    "WEBHOOK_PATH": WEBHOOK_PATH,
    "TG_WEBHOOK_SECRET": TG_WEBHOOK_SECRET
}.items():
    if not val:
        raise RuntimeError(f"{key} missing")

# ----------------- OPENAI -----------------
client = OpenAI(api_key=OPENAI_API_KEY)

def gpt_reply(system_prompt: str, user_prompt: str) -> str:
    """–ö–æ—Ä–æ—Ç–∫–∏–π, —Ç—ë–ø–ª—ã–π –æ—Ç–≤–µ—Ç, 1 —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –±–µ–∑ ¬´–ª–µ–∫—Ü–∏–π¬ª."""
    try:
        rsp = client.responses.create(
            model="gpt-4o-mini",
            input=[
                {
                    "role": "system",
                    "content": system_prompt
                },
                {
                    "role": "user",
                    "content": user_prompt
                }
            ],
            max_output_tokens=220,
            temperature=0.3
        )
        return (rsp.output_text or "").strip()
    except Exception as e:
        log.warning(f"OpenAI error: {e}")
        return "–°–ª—ã—à–∞–ª —Ç–µ–±—è. –ú–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ –ø–æ–π—Ç–∏ –ø–æ —à–∞–≥–∞–º."

# ----------------- DB -----------------
engine = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True, pool_recycle=300)
        with engine.begin() as conn:
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS user_state (
                user_id      BIGINT PRIMARY KEY,
                intent       TEXT,
                step         TEXT,
                data         JSONB,
                updated_at   TIMESTAMPTZ DEFAULT now()
            );
            """))
        log.info("DB connected & user_state ready")
    except OperationalError as e:
        log.warning(f"DB not available: {e}")
        engine = None
else:
    log.info("DATABASE_URL not set ‚Äî running without DB")

def get_state(uid: int) -> dict:
    st = {"intent": "greet", "step": None, "data": {}}
    if not engine:
        return st
    with engine.begin() as conn:
        row = conn.execute(text("SELECT intent, step, data FROM user_state WHERE user_id=:uid"),
                           {"uid": uid}).mappings().first()
        if not row:
            conn.execute(text(
                "INSERT INTO user_state(user_id, intent, step, data) VALUES (:uid, :i, :s, '{}'::jsonb)"),
                {"uid": uid, "i": st["intent"], "s": st["step"]})
            return st
        st["intent"] = row["intent"]
        st["step"]   = row["step"]
        st["data"]   = row["data"] or {}
        return st

def save_state(uid: int, intent: str | None = None, step: str | None = None, data_patch: dict | None = None):
    if not engine:
        return
    st = get_state(uid)
    if intent is not None:
        st["intent"] = intent
    if step is not None or step is None:
        st["step"] = step
    if data_patch:
        # –ª—ë–≥–∫–∞—è –º–µ—Ä–¥–∂-–ª–æ–≥–∏–∫–∞
        base = st.get("data") or {}
        base.update(data_patch)
        st["data"] = base
    with engine.begin() as conn:
        conn.execute(text("""
        INSERT INTO user_state (user_id, intent, step, data, updated_at)
        VALUES (:uid, :intent, :step, COALESCE(:data,'{}'::jsonb), now())
        ON CONFLICT (user_id) DO UPDATE
        SET intent=EXCLUDED.intent,
            step=EXCLUDED.step,
            data=EXCLUDED.data,
            updated_at=now()
        """), {"uid": uid, "intent": st["intent"], "step": st["step"], "data": json.dumps(st["data"])})

# ----------------- TELEGRAM -----------------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

def address_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    kb.row("—Ç—ã", "–≤—ã")
    return kb

BOT_NAME = "Kai"

def coach_system_prompt(address: str) -> str:
    # –∞–¥—Ä–µ—Å: "—Ç—ã" | "–≤—ã"
    polite = "–Ω–∞ —Ç—ã" if address == "—Ç—ã" else "–Ω–∞ –≤—ã"
    return (
        f"–¢—ã —Ç—ë–ø–ª—ã–π, —Å–ø–æ–∫–æ–π–Ω—ã–π –∫–æ—É—á –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É, –æ–±—â–∞–µ—à—å—Å—è {polite}. "
        "–¶–µ–ª—å ‚Äî –º—è–≥–∫–æ –≤—ã—Å–ª—É—à–∞—Ç—å, –∑–∞–¥–∞—Ç—å 1 —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–µ—Ä–Ω—É—Ç—å –∫ —à–∞–≥–∞–º. "
        "–ù–µ —á–∏—Ç–∞–π –ª–µ–∫—Ü–∏–∏. –ö–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –º–∞–∫—Å–∏–º—É–º 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. "
        "–ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–ø—Ä–æ—Å–∏–ª ¬´–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç¬ª, –æ—Ç–≤–µ—Ç—å: ¬´–Ø Kai¬ª. "
        "–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏ —Å –æ—à–∏–±–∫–æ–π ‚Äî —É—Ç–æ—á–Ω–∏ –ø—Ä–∏–º–µ—Ä –∏ —Ç—Ä–∏–≥–≥–µ—Ä, "
        "–Ω–æ –Ω–µ –¥–∞–≤–∏ –∏ –Ω–µ —Å–ø–µ—à–∏ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ. –ù–∏–∫–∞–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥–∏–∫, –ø–æ–∫–∞ –Ω–µ —Å–ø—Ä–æ—Å—è—Ç."
    )

# ----------------- –î–ò–ê–õ–û–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê -----------------

def ensure_address(uid: int, chat_id: int) -> str:
    st = get_state(uid)
    data = st.get("data", {})
    address = data.get("address", None)
    if not address:
        # –ø—Ä–µ–¥–ª–æ–∂–∏–º, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        bot.send_message(chat_id, "–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è ‚Äî *—Ç—ã* –∏–ª–∏ *–≤—ã*? (–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –Ω–∏–∂–µ)", reply_markup=address_kb())
        save_state(uid, data_patch={"address": "—Ç—ã"})  # –¥–µ—Ñ–æ–ª—Ç ‚Äî ¬´—Ç—ã¬ª
        address = "—Ç—ã"
    return address

def increment_counter(uid: int, key: str) -> int:
    st = get_state(uid)
    data = st.get("data", {})
    val = int(data.get(key, 0)) + 1
    save_state(uid, data_patch={key: val})
    return val

def summarize_problem_text(txt: str) -> str:
    # –∫–æ—Ä–æ—Ç–∫–æ–µ ¬´–æ–±–æ–±—â–µ–Ω–∏–µ¬ª –±–µ–∑ –¥–æ—Å–ª–æ–≤–Ω–æ–≥–æ –∫–æ–ø–∏–ø–∞—Å—Ç–∞
    return f"–°—É–º–º–∞—Ä–Ω–æ –≤–∏–∂—É: *–µ—Å—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç—å —Å–æ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º —Å–≤–æ–∏–º –ø—Ä–∞–≤–∏–ª–∞–º* ‚Äî –≤–º–µ—à–∏–≤–∞–µ—à—å—Å—è –≤ —Å–¥–µ–ª–∫—É/—Å–¥–≤–∏–≥–∞–µ—à—å —Å—Ç–æ–ø/—Ñ–∏–∫—Å–∏—Ä—É–µ—à—å —Ä–∞–Ω–æ."

# ----------------- –•–ï–ù–î–õ–ï–†–´ -----------------

@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m):
    uid = m.from_user.id
    save_state(uid, intent="greet", step=None, data_patch={"clarify_count": 0})
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*. "
        "–ú–æ–∂–µ–º —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ. "
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
        reply_markup=main_menu()
    )
    ensure_address(uid, m.chat.id)

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    uid = m.from_user.id
    st = get_state(uid)
    db = "ok" if engine else "no-db"
    payload = {
        "ok": True,
        "time": datetime.utcnow().isoformat(timespec="seconds"),
        "intent": st.get("intent"),
        "step": st.get("step"),
        "db": db
    }
    bot.send_message(m.chat.id, f"```json\n{json.dumps(payload, ensure_ascii=False, indent=2)}\n```", parse_mode="Markdown")

# --- –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ ---

@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def intent_error(m):
    uid = m.from_user.id
    save_state(uid, intent="error", step="ask_problem", data_patch={"clarify_count": 0})
    bot.send_message(
        m.chat.id,
        "–û–∫–µ–π. –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–∞–∫ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ).",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def intent_strategy(m):
    uid = m.from_user.id
    save_state(uid, intent="strategy", step=None)
    bot.send_message(
        m.chat.id,
        "–°–æ–±–µ—Ä—ë–º –¢–° –≤ –¥–≤–∞ —à–∞–≥–∞: 1) –ø–æ–¥—Ö–æ–¥/–¢–§/–≤—Ö–æ–¥; 2) —Å—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥/—Ä–∏—Å–∫. "
        "–ì–æ—Ç–æ–≤? –ù–∞–ø–∏—à–∏, –∫–∞–∫–∏–º —Ä—ã–Ω–∫–æ–º –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è —Å–µ–π—á–∞—Å."
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def intent_passport(m):
    uid = m.from_user.id
    save_state(uid, intent="passport", step=None)
    bot.send_message(m.chat.id, "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞ ‚Äî –Ω–∞—á–Ω—ë–º —Å —Ä—ã–Ω–∫–∞/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤. –ß–µ–º —Ç–æ—Ä–≥—É–µ—à—å —Å–µ–π—á–∞—Å?")

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def intent_week_panel(m):
    uid = m.from_user.id
    save_state(uid, intent="week_panel", step=None)
    bot.send_message(m.chat.id, "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏: –∫–∞–∫–æ–π —Ñ–æ–∫—É—Å –≤–æ–∑—å–º—ë–º –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π? (1 —É–∑–µ–ª)")

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def intent_panic(m):
    uid = m.from_user.id
    save_state(uid, intent="panic", step=None)
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–æ–º\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
        "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä (—á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–±–∏–ª–æ)\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—É"
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def intent_start_help(m):
    uid = m.from_user.id
    save_state(uid, intent="start_help", step=None)
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫: 1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω) 2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ 3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°.\n"
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?"
    )

# --- –£–¢–û–ß–ù–ï–ù–ò–ï ¬´—Ç—ã/–≤—ã¬ª ---
@bot.message_handler(func=lambda msg: msg.text in ["—Ç—ã","–≤—ã"])
def set_address(m):
    uid = m.from_user.id
    save_state(uid, data_patch={"address": m.text.lower()})
    bot.send_message(m.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ. –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª–∏—Ç, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.", reply_markup=main_menu())

# --- –°–í–û–ë–û–î–ù–´–ô –¢–ï–ö–°–¢ –ò –°–¶–ï–ù–ê–†–ò–ò ---

def handle_error_flow(uid: int, chat_id: int, text_in: str):
    st = get_state(uid)
    data = st.get("data", {})
    step = st.get("step")

    if step == "ask_problem":
        # 2 —à–∞–≥–∞ –º—è–≥–∫–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
        cc = increment_counter(uid, "clarify_count")
        address = data.get("address", "—Ç—ã")
        if cc <= 2:
            # –º—è–≥–∫–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPT
            sys = coach_system_prompt(address)
            u = f"–ß–µ–ª–æ–≤–µ–∫ –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É —Ç–∞–∫:\n{text_in}\n–ü–æ–ø—Ä–æ—Å–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É –ø—Ä–∏–º–µ—Ä–∞ –∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞. –û–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ."
            reply = gpt_reply(sys, u)
            # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–º –Ω–∞—à—É ¬´—Å–≤–µ—Ä—Ç–∫—É¬ª
            save_state(uid, data_patch={"last_problem_raw": text_in})
            bot.send_message(chat_id, reply)
            return
        else:
            summary = summarize_problem_text(text_in)
            save_state(uid, step="confirm_problem", data_patch={"problem_summary": summary})
            bot.send_message(chat_id, f"{summary}\n\n–¢–∞–∫ –ø–æ–¥—Ö–æ–¥–∏—Ç? –ï—Å–ª–∏ –¥–∞ ‚Äî –Ω–∞–ø–∏—à–∏ *–¥–∞*. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å/–∏—Å–ø—Ä–∞–≤–∏—Ç—å.")
            return

    if step == "confirm_problem":
        yes = text_in.strip().lower()
        if yes in ("–¥–∞","–∞–≥–∞","–æ–∫","–≤–µ—Ä–Ω–æ","–ø–æ–¥—Ö–æ–¥–∏—Ç"):
            save_state(uid, step="mer_context")
            bot.send_message(chat_id, "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
            return
        else:
            # –µ—â—ë –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ —É—Ç–æ—á–Ω–∏—Ç—å
            save_state(uid, step="ask_problem", data_patch={"clarify_count": 0})
            bot.send_message(chat_id, "–û–∫–µ–π, –¥–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º –µ—â—ë —Ä–∞–∑: –æ–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –ø—Ä–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —Å–¥–µ–ª–∫–µ (–∫–æ—Ä–æ—Ç–∫–æ).")
            return

    # MERCEDES —á—ë—Ç–∫–æ –ø–æ —à–∞–≥–∞–º
    if step == "mer_context":
        save_state(uid, step="mer_emotions", data_patch={"mer_context": text_in})
        bot.send_message(chat_id, "–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")
        return

    if step == "mer_emotions":
        save_state(uid, step="mer_thoughts", data_patch={"mer_emotions": text_in})
        bot.send_message(chat_id, "–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (1‚Äì2 —Ñ—Ä–∞–∑—ã)")
        return

    if step == "mer_thoughts":
        save_state(uid, step="mer_behavior", data_patch={"mer_thoughts": text_in})
        bot.send_message(chat_id, "–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≥–ª–∞–≥–æ–ª–∞–º–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).")
        return

    if step == "mer_behavior":
        save_state(uid, step="new_goal", data_patch={"mer_behavior": text_in})
        bot.send_message(chat_id, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –Ω–æ–≤—É—é —Ü–µ–ª—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º ‚Äî —á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?")
        return

    if step == "new_goal":
        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ TOTE, –Ω–æ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç–æ–¥–∏–∫
        save_state(uid, step="tote_ops", data_patch={"new_goal": text_in})
        bot.send_message(chat_id, "–û–∫. –ö–∞–∫–∏–µ 2‚Äì3 —à–∞–≥–∞ –ø–æ–º–æ–≥—É—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è —ç—Ç–æ–π —Ü–µ–ª–∏ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–∫–∞—Ö?")
        return

    if step == "tote_ops":
        save_state(uid, step=None, intent="idle", data_patch={"tote_ops": text_in})
        bot.send_message(chat_id, "–ü—Ä–∏–Ω—è—Ç–æ. –°–æ—Ö—Ä–∞–Ω–∏–ª–∏. –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å ‚Äî —Å–∫–∞–∂–∏ —Å–ª–æ–≤–æ, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=main_menu())
        return

    # –µ—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ —à–∞–≥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –æ—Ç–∫–∞—Ç–∏–º—Å—è –≤ –º—è–≥–∫–∏–π –¥–∏–∞–ª–æ–≥
    save_state(uid, intent="greet", step=None)
    bot.send_message(chat_id, "–û–∫–µ–π. –ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–≤–æ–±–æ–¥–Ω–æ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é.", reply_markup=main_menu())

@bot.message_handler(content_types=["text"])
def on_text(m):
    uid = m.from_user.id
    txt = (m.text or "").strip()
    st = get_state(uid)
    intent = st.get("intent", "greet")
    step   = st.get("step")
    data   = st.get("data", {}) or {}
    address = ensure_address(uid, m.chat.id)

    low = txt.lower()
    # –ü—Ä–æ—Å—Ç–æ–π FAQ: ¬´–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç¬ª
    if "–∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç" in low or "—Ç–µ–±—è –∑–æ–≤—É—Ç" in low:
        bot.send_message(m.chat.id, f"–Ø {BOT_NAME} üôÇ")
        return

    # –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ ¬´–æ—à–∏–±–∫–∞¬ª ‚Äî –≤–µ–¥—ë–º —Å—Ü–µ–Ω–∞—Ä–∏–π
    if intent == "error":
        handle_error_flow(uid, m.chat.id, txt)
        return

    # –ò–Ω–∞—á–µ ‚Äî –º—è–≥–∫–∏–π ¬´–∫–æ—É—á-—Ä–µ–∂–∏–º¬ª —á–µ—Ä–µ–∑ OpenAI
    sys = coach_system_prompt(address)
    reply = gpt_reply(sys, txt)

    # –Ω–µ –ø—Ä—ã–≥–∞—Ç—å —Å—Ä–∞–∑—É –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: 1‚Äì2 —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ–±–º–µ–Ω–∞ ‚Üí –ø–æ—Ç–æ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å ¬´—Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ —à–∞–≥–∞–º¬ª
    free_cnt = increment_counter(uid, "free_talk_count")
    if free_cnt >= 2 and any(k in low for k in ["–æ—à–∏–±", "–ø—Ä–æ—Å–∞–¥", "–ø—Ä–∞–≤–∏–ª", "—Å—Ç–æ–ø", "—É—Å—Ä–µ–¥–Ω"]):
        reply += "\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å, –º–æ–∂–µ–º –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —ç—Ç–æ –ø–æ —à–∞–≥–∞–º. –ù–∞–ø–∏—à–∏: *—Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏*."
    bot.send_message(m.chat.id, reply)

# –ö–æ—Ä–æ—Ç–∫–∏–π —Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ ¬´—Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏¬ª
@bot.message_handler(func=lambda msg: msg.text and msg.text.strip().lower() in ["—Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏","—Ä–∞–∑–æ–±—Ä–∞—Ç—å –æ—à–∏–±–∫—É","–º–µ—Ä—Å–µ–¥–µ—Å","–¥–∞–≤–∞–π —Ä–∞–∑–±–æ—Ä"])
def start_error_from_free(m):
    return intent_error(m)

# ----------------- FLASK / WEBHOOK -----------------
app = Flask(__name__)

@app.get("/")
def root():
    return "OK"

@app.get("/health")
def health():
    return jsonify({"status": "ok", "time": datetime.utcnow().isoformat()})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    update = request.get_data().decode("utf-8")
    try:
        bot.process_new_updates([types.Update.de_json(update)])
    except Exception as e:
        log.error(f"process update error: {e}")
    return jsonify(ok=True)

@app.get("/status")
def status():
    return jsonify({
        "ok": True,
        "time": datetime.utcnow().isoformat(timespec="seconds")
    })

def setup_webhook():
    # —É–¥–∞–ª—è–µ–º –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π
    try:
        bot.remove_webhook()
    except Exception:
        pass
    url = f"{PUBLIC_URL}/{WEBHOOK_PATH}"
    ok = bot.set_webhook(
        url=url,
        secret_token=TG_WEBHOOK_SECRET,
        allowed_updates=["message","callback_query"],
        max_connections=40
    )
    log.info(f"Webhook set to {url}: {ok}")

if __name__ == "__main__":
    setup_webhook()
    port = int(os.getenv("PORT", "10000"))
    log.info("Starting web server‚Ä¶")
    app.run(host="0.0.0.0", port=port)
