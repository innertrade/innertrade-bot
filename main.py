import os
import json
import logging
from datetime import datetime
from typing import Optional

from flask import Flask, request, jsonify, abort
from telebot import TeleBot, types
from telebot.types import Update
from openai import OpenAI
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("innertrade")

# ----------------- ENV ------------------
TELEGRAM_TOKEN     = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY")
DATABASE_URL       = os.getenv("DATABASE_URL")
PUBLIC_URL         = os.getenv("PUBLIC_URL")  # https://innertrade-bot.onrender.com
WEBHOOK_PATH       = os.getenv("WEBHOOK_PATH", "wbhk_9t3x")
TG_WEBHOOK_SECRET  = os.getenv("TG_WEBHOOK_SECRET")
MODE               = os.getenv("MODE", "webhook")  # webhook | polling

if not TELEGRAM_TOKEN: raise RuntimeError("TELEGRAM_TOKEN missing")
if not OPENAI_API_KEY: raise RuntimeError("OPENAI_API_KEY missing")
if not PUBLIC_URL:     raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")

# ----------------- OPENAI ---------------
client = OpenAI(api_key=OPENAI_API_KEY)

def coach_llm(prompt: str) -> str:
    """
    –ö–æ—Ä–æ—Ç–∫–∞—è ¬´–º—è–≥–∫–∞—è¬ª –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–Ω–µ —Å—Ü–µ–Ω–∞—Ä–∏—è.
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, 1‚Äì2 —Ñ—Ä–∞–∑—ã, –Ω–∞ –¢–´.
    """
    try:
        msg = [
            {"role": "system", "content":
             "–¢—ã ‚Äî —Å–ø–æ–∫–æ–π–Ω—ã–π –∫–æ—É—á –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –Ω–∞ ¬´—Ç—ã¬ª. "
             "–ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é, –ø–æ–¥–¥–µ—Ä–∂–∏ –∏ –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥."},
            {"role": "user", "content": prompt}
        ]
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=msg,
            temperature=0.5,
            max_tokens=120
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.warning(f"LLM error: {e}")
        return "–ü–æ–Ω–∏–º–∞—é. –†–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë —á—É—Ç—å-—á—É—Ç—å ‚Äî —è –ø–æ–º–æ–≥—É —ç—Ç–æ —Å–æ–±—Ä–∞—Ç—å –≤ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É."

# ----------------- DB -------------------
engine = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True)
        with engine.begin() as conn:
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS users (
              user_id BIGINT PRIMARY KEY,
              mode TEXT NOT NULL DEFAULT 'course',
              created_at TIMESTAMPTZ DEFAULT now(),
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS user_state (
              user_id BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
              intent  TEXT,
              step    TEXT,
              data    JSONB,
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
        log.info("DB connected & basic tables exist")
    except OperationalError as e:
        log.warning(f"DB not available yet: {e}")
        engine = None
else:
    log.info("DATABASE_URL not set ‚Äî working without DB")

def db_exec(sql: str, params: dict | None = None):
    if not engine: return
    with engine.begin() as conn:
        conn.execute(text(sql), params or {})

def db_fetchone(sql: str, params: dict | None = None) -> Optional[dict]:
    if not engine: return None
    with engine.begin() as conn:
        row = conn.execute(text(sql), params or {}).mappings().first()
        return dict(row) if row else None

def ensure_user(uid: int):
    if not engine: return
    db_exec("INSERT INTO users(user_id) VALUES (:u) ON CONFLICT DO NOTHING", {"u": uid})

def save_state(uid: int, intent: str, step: Optional[str] = None, data: Optional[dict] = None):
    if not engine: return
    ensure_user(uid)
    db_exec("""
      INSERT INTO user_state(user_id, intent, step, data)
      VALUES (:u, :i, :s, COALESCE(:d, '{}'::jsonb))
      ON CONFLICT (user_id) DO UPDATE
      SET intent = EXCLUDED.intent,
          step   = EXCLUDED.step,
          data   = COALESCE(EXCLUDED.data, user_state.data),
          updated_at = now()
    """, {"u": uid, "i": intent, "s": step, "d": json.dumps(data or {})})

def load_state(uid: int) -> dict:
    row = db_fetchone("SELECT intent, step, data FROM user_state WHERE user_id = :u", {"u": uid}) or {}
    return {
        "intent": row.get("intent"),
        "step": row.get("step"),
        "data": (row.get("data") or {}) if isinstance(row.get("data"), dict) else {}
    }

# ----------------- TELEGRAM -------------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

WELCOME = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*.\n"
    "–ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –∏–ª–∏ –ø–æ–π–¥—ë–º –ø–æ —à–∞–≥–∞–º.\n"
    "–ö–æ–º–∞–Ω–¥—ã: /status /ping"
)

# ------------ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï NLU -------
def is_problem_text(t: str) -> bool:
    t = t.lower()
    keys = ["–æ—à–∏–±", "—Å–ª–∏–≤–∞", "–ø—Ä–æ—Å–∞–¥", "—Ç–µ—Ä—è", "–≤—Ö–æ–∂—É", "–≤—ã—Ö–æ–∂—É", "–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø", "—Å–µ—Ç–∞–ø"]
    return any(k in t for k in keys)

def is_fix_or_average(t: str) -> bool:
    t = t.lower()
    return ("—É—Å—Ä–µ–¥" in t) or ("—Ñ–∏–∫—Å–∏—Ä" in t and "—É–±—ã—Ç" in t)

def vague_phrase(t: str) -> bool:
    t = t.lower()
    return any(k in t for k in ["–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏", "–∏–Ω–æ–≥–¥–∞", "–±—ã–≤–∞–µ—Ç", "—á–∞—Å—Ç–æ", "–∫–æ–≥–¥–∞ –∫–∞–∫"])

def summarize_error_for_user(data: dict) -> str:
    err = data.get("error_text") or "‚Äî"
    ctx = data.get("ctx") or "‚Äî"
    beh = data.get("beh") or "‚Äî"
    emo = data.get("emo") or "‚Äî"
    th  = data.get("th")  or "‚Äî"
    return (
        f"–¢–∞–∫ —è –ø–æ–Ω—è–ª —Ç–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é:\n\n"
        f"‚Ä¢ –û—à–∏–±–∫–∞: *{err}*\n"
        f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {ctx}\n"
        f"‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω–∏–µ: {beh}\n"
        f"‚Ä¢ –≠–º–æ—Ü–∏–∏/–æ—â—É—â–µ–Ω–∏—è: {emo}\n"
        f"‚Ä¢ –ú—ã—Å–ª–∏: {th}\n\n"
        f"–û–∫ –ª–∏ —Ç–∞–∫–æ–µ —Ä–µ–∑—é–º–µ? –ï—Å–ª–∏ –¥–∞ ‚Äî –ø–æ–π–¥—ë–º –∫ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏ (TOTE). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–ø—Ä–∞–≤—å –º–µ–Ω—è –≤ –æ–¥–Ω–æ–º-–¥–≤—É—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö."
    )

# ------------- –ü–û–¢–û–ö: –°–í–û–ë–û–î–ù–´–ô –ß–ê–¢ -----
# –î–∞–¥–∏–º –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è 2‚Äì3 —Ä–µ–ø–ª–∏–∫–∏, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É/–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
FREE_TURNS = {}

def freeflow_next(uid: int) -> int:
    FREE_TURNS[uid] = FREE_TURNS.get(uid, 0) + 1
    return FREE_TURNS[uid]

def freeflow_reset(uid: int):
    FREE_TURNS[uid] = 0

# ------------- –ü–û–¢–û–ö: MERCEDES ----------
M_STEPS = ["error", "ctx", "emo", "th", "beh", "val", "state", "confirm"]

def ask_next_mercedes(uid: int, chat_id: int, data: dict):
    step = data.get("m_step") or "error"

    if step == "error":
        bot.send_message(chat_id,
            "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ *–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞*.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.",
            reply_markup=main_menu())
        return
    if step == "ctx":
        bot.send_message(chat_id, "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
        return
    if step == "emo":
        bot.send_message(chat_id, "–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? –ö–∞–∫ –≤ —Ç–µ–ª–µ? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")
        return
    if step == "th":
        bot.send_message(chat_id, "–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ü–∏—Ç–∞—Ç—ã)")
        return
    if step == "beh":
        bot.send_message(chat_id, "–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≥–æ–ª–∞–º–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).")
        return
    if step == "val":
        bot.send_message(chat_id, "–£–ë–ï–ñ–î–ï–ù–ò–Ø/–¶–ï–ù–ù–û–°–¢–ò. –ü–æ—á–µ–º—É *–∫–∞–∂–µ—Ç—Å—è*, —á—Ç–æ –Ω–∞–¥–æ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫? (1‚Äì2 –º—ã—Å–ª–∏)")
        return
    if step == "state":
        bot.send_message(chat_id, "–ë–ê–ó–û–í–û–ï –°–û–°–¢–û–Ø–ù–ò–ï. –í –∫–∞–∫–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ç—ã –æ–±—ã—á–Ω–æ –≤—Ö–æ–¥–∏—à—å? (—Ç—Ä–µ–≤–æ–≥–∞, —Å–ø–µ—à–∫–∞, –∫–æ–Ω—Ç—Ä–æ–ª—å –∏ —Ç.–ø.)")
        return
    if step == "confirm":
        bot.send_message(chat_id, summarize_error_for_user(data))
        return

def mercedes_store_and_advance(uid: int, chat_id: int, text_answer: str):
    st = load_state(uid)
    d  = st.get("data", {}) or {}
    step = d.get("m_step") or "error"

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç—ã–π ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É
    if vague_phrase(text_answer) and step in {"error","ctx"}:
        bot.send_message(chat_id, "–ß—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: *–∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –¥–Ω–∏/—Å–æ–±—ã—Ç–∏—è*? 1‚Äì2 –ø—Ä–∏–º–µ—Ä–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ —à–∞–≥–∞–º
    if step == "error":
        d["error_text"] = text_answer.strip()
        d["m_step"] = "ctx"
    elif step == "ctx":
        d["ctx"] = text_answer.strip()
        d["m_step"] = "emo"
    elif step == "emo":
        d["emo"] = text_answer.strip()
        d["m_step"] = "th"
    elif step == "th":
        d["th"] = text_answer.strip()
        d["m_step"] = "beh"
    elif step == "beh":
        d["beh"] = text_answer.strip()
        d["m_step"] = "val"
    elif step == "val":
        d["val"] = text_answer.strip()
        d["m_step"] = "state"
    elif step == "state":
        d["state"] = text_answer.strip()
        d["m_step"] = "confirm"
    elif step == "confirm":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–∞–≤–∏–ª —Ä–µ–∑—é–º–µ ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∞–≤–∫—É –∫–∞–∫ —É—Ç–æ—á–Ω–µ–Ω–∏–µ error_text
        d["error_text"] = text_answer.strip()
        d["m_step"] = "confirm"

    save_state(uid, intent="mercedes", step=d["m_step"], data=d)
    ask_next_mercedes(uid, chat_id, d)

# ------------- –ü–û–¢–û–ö: TOTE --------------
def start_tote(uid: int, chat_id: int):
    st = load_state(uid)
    d  = st.get("data", {}) or {}
    d["t_step"] = "t1"
    save_state(uid, intent="tote", step="t1", data=d)
    bot.send_message(chat_id,
        "TOTE ‚Äî —Ü–µ–ª—å –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞.\n\n"
        "*T1 ‚Äî –¶–µ–ª—å (–±—É–¥—É—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)*: —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –≤ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏.\n"
        "–ü—Ä–∏–º–µ—Ä: ¬´–í 3 –±–ª–∏–∂–∞–π—à–∏—Ö —Å–¥–µ–ª–∫–∞—Ö –Ω–µ –¥–≤–∏–≥–∞—é —Å—Ç–æ–ø/—Ç–µ–π–∫ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª.")
def tote_store_and_advance(uid: int, chat_id: int, text_answer: str):
    st = load_state(uid); d = st.get("data", {}) or {}; step = d.get("t_step") or "t1"
    if step == "t1":
        d["t_goal"] = text_answer.strip()
        d["t_step"] = "o"
        bot.send_message(chat_id, "*O ‚Äî –û–ø–µ—Ä–∞—Ü–∏–∏ (—à–∞–≥–∏)*: –ø–µ—Ä–µ—á–∏—Å–ª–∏ 2‚Äì4 –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –¥–µ—Ä–∂–∞—Ç—å —Ü–µ–ª—å (—á–µ–∫-–ª–∏—Å—Ç, —Ç–∞–π–º–µ—Ä, –ø–∞—É–∑–∞).")
    elif step == "o":
        d["t_ops"] = text_answer.strip()
        d["t_step"] = "t2"
        bot.send_message(chat_id, "*T2 ‚Äî –ü—Ä–æ–≤–µ—Ä–∫–∞*: –∫–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ —Å–æ–±–ª—é–¥–∞–µ—à—å —Ü–µ–ª—å? (–∫—Ä–∏—Ç–µ—Ä–∏–π/—Å—á—ë—Ç—á–∏–∫)")
    elif step == "t2":
        d["t_check"] = text_answer.strip()
        d["t_step"] = "e"
        bot.send_message(chat_id, "*E ‚Äî –í—ã—Ö–æ–¥*: –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî —á—Ç–æ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –∫ –∫–∞–∫–æ–º—É —à–∞–≥—É –≤–µ—Ä–Ω—ë—à—å—Å—è?")
    elif step == "e":
        d["t_exit"] = text_answer.strip()
        save_state(uid, intent="done_l1", step=None, data=d)
        bot.send_message(chat_id,
            "–ì–æ—Ç–æ–≤–æ! –ú—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ —Ü–µ–ª—å –∏ —à–∞–≥–∏. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∞—Ä—Ö–µ—Ç–∏–ø–∞–º?",
            reply_markup=main_menu())
        return
    save_state(uid, intent="tote", step=d["t_step"], data=d)

# ---- –ü–û–¢–û–ö: –§–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å vs –£—Å—Ä–µ–¥–Ω—è—Ç—å ---
def start_fix_vs_avg(uid: int, chat_id: int):
    st = load_state(uid); d = st.get("data", {}) or {}
    d["fv_step"] = "q1"
    save_state(uid, intent="fix_or_avg", step="q1", data=d)
    bot.send_message(chat_id,
        "–ü–æ–Ω—è–ª –ø—Ä–æ –ø—Ä–æ—Å–∞–¥–∫—É. –ë—ã—Å—Ç—Ä–æ –ø—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ 5 –ø—É–Ω–∫—Ç–∞–º (–¥–∞/–Ω–µ—Ç/–∫–æ—Ä–æ—Ç–∫–æ):\n\n"
        "1) *–£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø–∏—Å–∞–Ω–æ* –≤ —Ç–≤–æ–µ–π –¢–° (–ø—Ä–∞–≤–∏–ª–∞, –ª–∏–º–∏—Ç, —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞)?")

def fix_vs_avg_store(uid: int, chat_id: int, txt: str):
    st = load_state(uid); d = st.get("data", {}) or {}; step = d.get("fv_step","q1")
    ans = txt.strip().lower()

    def next_q(s: str, q: str):
        d["fv_step"] = s
        save_state(uid, intent="fix_or_avg", step=s, data=d)
        bot.send_message(chat_id, q)

    if step == "q1":
        d["fv_has_rule"] = ans
        return next_q("q2", "2) –¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫ *–≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è* –≤ —Ç–≤–æ–∏ –ª–∏–º–∏—Ç—ã (—Ä–∏—Å–∫/—Å–¥–µ–ª–∫—É, –¥–Ω–µ–≤–Ω–æ–π/–Ω–µ–¥–µ–ª—å–Ω—ã–π)?")
    if step == "q2":
        d["fv_risk_ok"] = ans
        return next_q("q3", "3) –ù–µ –Ω–∞—Ä—É—à–∞–µ—Ç—Å—è *–º–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞* –ø–æ —Å—á—ë—Ç—É?")
    if step == "q3":
        d["fv_dd_ok"] = ans
        return next_q("q4", "4) –ï—Å—Ç—å *—Ä—ã–Ω–æ—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã* —É—Å—Ä–µ–¥–Ω—è—Ç—å—Å—è (–ø–ª–∞–Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å, —Å–∏–≥–Ω–∞–ª, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å), –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´—Å—Ç—Ä–∞—Ö¬ª?")
    if step == "q4":
        d["fv_market_ok"] = ans
        return next_q("q5", "5) –ï—Å–ª–∏ —É—Å—Ä–µ–¥–Ω–∏—à—å—Å—è –∏ –Ω–µ –ø–æ–π–¥—ë—Ç ‚Äî *–ø–ª–∞–Ω –≤—ã—Ö–æ–¥–∞* –ø–æ–Ω—è—Ç–µ–Ω? (–≥–¥–µ —Å—Ç–æ–ø, —á—Ç–æ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π)")
    if step == "q5":
        d["fv_exit_plan"] = ans

        # –†–µ—à–µ–Ω–∏–µ
        has_rule  = d.get("fv_has_rule","–Ω–µ—Ç").startswith("–¥")
        risk_ok   = d.get("fv_risk_ok","–Ω–µ—Ç").startswith("–¥")
        dd_ok     = d.get("fv_dd_ok","–Ω–µ—Ç").startswith("–¥")
        market_ok = d.get("fv_market_ok","–Ω–µ—Ç").startswith("–¥")
        exit_ok   = d.get("fv_exit_plan","–Ω–µ—Ç").startswith("–¥")

        if has_rule and risk_ok and dd_ok and market_ok and exit_ok:
            msg = ("–°—É–¥—è –ø–æ –æ—Ç–≤–µ—Ç–∞–º, —É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ *–≤ —Ä–∞–º–∫–∞—Ö –¢–°* –¥–æ–ø—É—Å—Ç–∏–º–æ.\n"
                   "üëâ –î–µ–π—Å—Ç–≤—É–µ–º –ø–æ –ø–ª–∞–Ω—É: *–º–∞–ª–æ–π –¥–æ–ª–µ–π*, –ø–æ —Å–∏–≥–Ω–∞–ª—É, —Å—Ç–æ–ø –∏ –ª–∏–º–∏—Ç—ã ‚Äî –∂—ë—Å—Ç–∫–æ.")
        else:
            msg = ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Äî *—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å* (–∏–ª–∏ —Å–æ–∫—Ä–∞—â–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é).\n"
                   "–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ª–æ–≤–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è (–ø—Ä–∞–≤–∏–ª–∞/—Ä–∏—Å–∫/–ø—Ä–æ—Å–∞–¥–∫–∞/—Å–∏–≥–Ω–∞–ª/–ø–ª–∞–Ω –≤—ã—Ö–æ–¥–∞).")

        save_state(uid, intent="fix_or_avg_done", step=None, data=d)
        bot.send_message(chat_id, msg, reply_markup=main_menu())
        return

# ------------- –ö–ù–û–ü–ö–ò / –ö–û–ú–ê–ù–î–´ ---------
@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m):
    freeflow_reset(m.from_user.id)
    save_state(m.from_user.id, intent="idle", step=None, data={"free":0})
    ensure_user(m.from_user.id)
    bot.send_message(m.chat.id, WELCOME, reply_markup=main_menu())

@bot.message_handler(commands=["ping"])
def cmd_ping(m): bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    st = load_state(m.from_user.id)
    bot.send_message(m.chat.id,
        f"–°—Ç–∞—Ç—É—Å: –±–æ—Ç –∂–∏–≤–æ–π ‚úÖ\n"
        f"intent: {st.get('intent')}\nstep: {st.get('step')}\nupdated: {datetime.utcnow().isoformat()}Z",
        reply_markup=main_menu())

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def btn_error(m):
    freeflow_reset(m.from_user.id)
    d = {"m_step":"error"}
    save_state(m.from_user.id, intent="mercedes", step="error", data=d)
    ask_next_mercedes(m.from_user.id, m.chat.id, d)

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def btn_panic(m):
    save_state(m.from_user.id, intent="panic", step=None)
    bot.send_message(m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–æ–º\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
        "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä (—á—Ç–æ –≤—ã–±–∏–ª–æ)\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def btn_strategy(m):
    save_state(m.from_user.id, intent="strategy", step=None)
    bot.send_message(m.chat.id,
        "–û–∫, —Å–æ–±–∏—Ä–∞–µ–º –¢–° –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É:\n1) –¶–µ–ª–∏\n2) –°—Ç–∏–ª—å\n3) –†—ã–Ω–∫–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n4) –í—Ö–æ–¥/–í—ã—Ö–æ–¥\n5) –†–∏—Å–∫\n6) –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n7) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def btn_passport(m):
    save_state(m.from_user.id, intent="passport", step=None)
    bot.send_message(m.chat.id, "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. 1/6) –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å?", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def btn_week(m):
    save_state(m.from_user.id, intent="week_panel", step=None)
    bot.send_message(m.chat.id,
        "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏:\n‚Ä¢ –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n‚Ä¢ –ü–ª–∞–Ω (3 —à–∞–≥–∞)\n‚Ä¢ –õ–∏–º–∏—Ç—ã\n‚Ä¢ –†–∏—Ç—É–∞–ª—ã\n‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏",
        reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def btn_start_help(m):
    save_state(m.from_user.id, intent="start_help", step=None)
    bot.send_message(m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω)\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°\n–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?",
        reply_markup=main_menu())

# ------------- –†–û–£–¢–ï–† –¢–ï–ö–°–¢–ê ------------
@bot.message_handler(content_types=["text"])
def on_text(m):
    uid = m.from_user.id
    txt = (m.text or "").strip()

    st = load_state(uid)
    intent = st.get("intent")
    step   = st.get("step")
    data   = st.get("data") or {}

    # –ï—Å–ª–∏ –º—ã –≤ MERCEDES-–ø–æ—Ç–æ–∫–µ
    if intent == "mercedes":
        return mercedes_store_and_advance(uid, m.chat.id, txt)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ ‚Üí —Å—Ç–∞—Ä—Ç TOTE
    if intent == "mercedes" and step == "confirm":
        # (–ø–æ –ª–æ–≥–∏–∫–µ mercedes_store_and_advance)
        pass

    # –ï—Å–ª–∏ –º—ã –≤ TOTE
    if intent == "tote":
        return tote_store_and_advance(uid, m.chat.id, txt)

    # –ï—Å–ª–∏ –º—ã –≤ fix vs average
    if intent == "fix_or_avg":
        return fix_vs_avg_store(uid, m.chat.id, txt)

    # –°–ø–µ—Ü-–¥–µ—Ç–µ–∫—Ç–æ—Ä ¬´—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É—Å—Ä–µ–¥–Ω—è—Ç—å¬ª
    if is_fix_or_average(txt):
        start_fix_vs_avg(uid, m.chat.id)
        return

    # –î–µ—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ ‚Üí MERCEDES
    if "üöë" in txt or "–æ—à–∏–±" in txt.lower():
        d = {"m_step":"error"}
        save_state(uid, intent="mercedes", step="error", data=d)
        ask_next_mercedes(uid, m.chat.id, d)
        return

    # –°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç (–º—è–≥–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ + done-—É—Å–ª–æ–≤–∏–µ)
    turns = freeflow_next(uid)
    if turns <= 2 and not is_problem_text(txt):
        # –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–º
        reply = coach_llm(txt)
        bot.send_message(m.chat.id, reply, reply_markup=main_menu())
        return

    # –ü–æ—Å–ª–µ –ø–∞—Ä—ã —Ä–µ–ø–ª–∏–∫ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É
    if is_problem_text(txt):
        # –∑–∞—è–∫–æ—Ä–∏–º –∫–∞–∫ –æ—à–∏–±–∫—É –∏ —Å—Ä–∞–∑—É —Å–ø—Ä–æ—Å–∏–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É
        d = {"m_step":"error", "error_text": txt}
        save_state(uid, intent="mercedes", step="ctx", data=d)
        bot.send_message(m.chat.id, "–ü–æ–Ω—è–ª. –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª —Ç–∞–∫: *{}*".format(txt))
        ask_next_mercedes(uid, m.chat.id, {"m_step":"ctx"})
        return

    # –ò–Ω–∞—á–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ª—ë–≥–∫–∏–π ¬´–≤–æ–∑–≤—Ä–∞—Ç¬ª –∫ –¥–µ–ª—É
    reply = coach_llm(txt) + "\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏, *—á—Ç–æ –∏–º–µ–Ω–Ω–æ* —Å–µ–π—á–∞—Å –±–æ–ª–∏—Ç –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ, –∏ —Ä–∞–∑–±–µ—Ä—ë–º –ø–æ —à–∞–≥–∞–º."
    bot.send_message(m.chat.id, reply, reply_markup=main_menu())

# ------------- FLASK (WEBHOOK) ----------
app = Flask(__name__)

@app.get("/health")
def health():
    return jsonify({"status":"ok","time": datetime.utcnow().isoformat()+"Z"})

# Webhook endpoint
@app.post(f"/{WEBHOOK_PATH}")
def tg_webhook():
    if TG_WEBHOOK_SECRET:
        if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
            abort(401)
    # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–ª–∞
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    try:
        upd = Update.de_json(request.get_data(as_text=True))
        bot.process_new_updates([upd])
    except Exception as e:
        log.exception(f"process update error: {e}")
    return "ok"

# ------------- ENTRYPOINT ----------------
def start_polling():
    try:
        bot.remove_webhook()
    except Exception:
        pass
    log.info("Starting polling‚Ä¶")
    bot.infinity_polling(timeout=30, long_polling_timeout=30, skip_pending=True)

if __name__ == "__main__":
    if MODE == "polling":
        import threading
        t = threading.Thread(target=start_polling, daemon=True)
        t.start()
    port = int(os.getenv("PORT", "10000"))
    log.info(f"Web server on :{port}, mode={MODE}, webhook=/{WEBHOOK_PATH}")
    app.run(host="0.0.0.0", port=port)
