# ===== main.py (Innertrade mentor bot) =====
import os
import logging
from flask import Flask
import telebot
from telebot import types
from openai import OpenAI

# ---------- ENV ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", "10000"))

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Env")
if not OPENAI_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Env")

# ---------- LOGGING ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ---------- GPT ----------
client = OpenAI(api_key=OPENAI_KEY)

# –•—Ä–∞–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
history = {}  # uid -> [{"role":"system"/"user"/"assistant","content":"..."}]

SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ Innertrade. "
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –±—ã—Å—Ç—Ä–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–µ—Å—Ç–∏ –µ–≥–æ –ø–æ –∫–æ—Ä–æ—Ç–∫–∏–º —à–∞–≥–∞–º. "
    "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ, –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –±–ª–æ–∫–∞–º–∏, —Å –±—É–ª–ª–µ—Ç–∞–º–∏ –∏ –º–∏–Ω–∏-—á–µ–∫–ª–∏—Å—Ç–∞–º–∏. "
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–º—ë—Ç –∫–Ω–æ–ø–∫—É-–∏–Ω—Ç–µ–Ω—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–π –∫–∞–∫ —Å—Ü–µ–Ω–∞—Ä–∏–π: –∑–∞–¥–∞–π 1‚Äì2 —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞, "
    "–¥–∞–π –≥–æ—Ç–æ–≤—ã–π —à–∞–≥ –∏ –º–∏–∫—Ä–æ—Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏. –ù–µ —É—Ö–æ–¥–∏ –≤ –¥–ª–∏–Ω–Ω—ã–µ –ª–µ–∫—Ü–∏–∏."
)

def get_msgs(uid):
    msgs = history.setdefault(uid, [])
    # –¥–æ–±–∞–≤–∏–º System –æ–¥–∏–Ω —Ä–∞–∑
    if not msgs or msgs[0].get("role") != "system":
        msgs.insert(0, {"role": "system", "content": SYSTEM_PROMPT})
    return msgs

def ask_gpt(uid, text):
    msgs = get_msgs(uid)
    msgs.append({"role": "user", "content": text})
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.5,
        messages=msgs
    )
    reply = (resp.choices[0].message.content or "").strip()
    msgs.append({"role": "assistant", "content": reply})
    return reply

# ---------- BOT ----------
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# –°–Ω—è—Ç—å –≤–µ–±—Ö—É–∫ (–Ω–∞ –≤—Å—è–∫–∏–π)
try:
    bot.remove_webhook()
    logging.info("Webhook removed (ok)")
except Exception as e:
    logging.warning(f"Webhook remove warn: {e}")

# ---- –ö–õ–ê–í–ò–ê–¢–£–†–´ ----
USE_EXTENDED_MENU = True  # False = 3 –∫–Ω–æ–ø–∫–∏, True = 8 –∫–Ω–æ–ø–æ–∫

INTENTS_MIN = [
    "üÜò –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞",
    "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
    "üó£ –ü–æ–≥–æ–≤–æ—Ä–∏–º",
]

INTENTS_EXTENDED = [
    "üÜò –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞",
    "üõ† –ú–∏–Ω–∏-—Ä–∞–∑–±–æ—Ä (Mercedes)",
    "üèó –°–æ–±—Ä–∞—Ç—å/–ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –¢–°",
    "‚ùì –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å",
    "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: ¬´–ø–æ–ø–ª—ã–ª¬ª",
    "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–Ω–µ–¥–µ–ª—è)",
    "ü™™ –ü–∞—Å–ø–æ—Ä—Ç/–ø—Ä–æ—Ñ–∏–ª—å",
    "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
]

def build_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    intents = INTENTS_EXTENDED if USE_EXTENDED_MENU else INTENTS_MIN
    # —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –ø–æ 2‚Äì3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    row = []
    for i, label in enumerate(intents, 1):
        row.append(types.KeyboardButton(label))
        if len(row) == 3:
            kb.row(*row)
            row = []
    if row:
        kb.row(*row)
    # –Ω–∏–∂–Ω–∏–π —Ä—è–¥: —Å–µ—Ä–≤–∏—Å
    kb.row(types.KeyboardButton("üîÑ –°–±—Ä–æ—Å"), types.KeyboardButton("üß≠ –ú–µ–Ω—é"))
    return kb

def send_long(chat_id, text):
    MAX = 3500
    for i in range(0, len(text), MAX):
        bot.send_message(chat_id, text[i:i+MAX])

# ---- –ú–ê–ü–ü–ò–ù–ì –ò–ù–¢–ï–ù–¢–û–í -> –ü–û–î–°–ö–ê–ó–û–ö –î–õ–Ø GPT ----
def intent_seed(user_text):
    mapping = {
        "üÜò –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞":
            "INTENT=ERROR_START. –°–ø—Ä–æ—Å–∏ –∫—Ä–∞—Ç–∫–æ –æ–± –æ—à–∏–±–∫–µ –≤ 1‚Äì2 –≤–æ–ø—Ä–æ—Å–∞—Ö. "
            "–î–∞–π –º–∏–Ω–∏-—á–µ–∫–ª–∏—Å—Ç —Ñ–∏–∫—Å–∞—Ü–∏–∏: '—á—Ç–æ –¥–µ–ª–∞—é/—á—Ç–æ –¥—É–º–∞—é/—á—Ç–æ —á—É–≤—Å—Ç–≤—É—é'.",

        "üõ† –ú–∏–Ω–∏-—Ä–∞–∑–±–æ—Ä (Mercedes)":
            "INTENT=MERCEDES_MICRO. –ü—Ä–æ–≤–µ–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–≥–æ–Ω —á–µ—Ä–µ–∑ MERCEDES (–∫–æ–Ω—Ç–µ–∫—Å—Ç, –º—ã—Å–ª–∏, —ç–º–æ—Ü–∏–∏, –ø–æ–≤–µ–¥–µ–Ω–∏–µ, —É–±–µ–∂–¥–µ–Ω–∏—è). "
            "–ó–∞–≤–µ—Ä—à–∏ 1 —Ñ—Ä–∞–∑–æ–π-–æ—Å–æ–∑–Ω–∞–Ω–∏–µ–º –∏ 1 —à–∞–≥–æ–º TOTE –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é —Å–µ—Å—Å–∏—é.",

        "üèó –°–æ–±—Ä–∞—Ç—å/–ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –¢–°":
            "INTENT=BUILD_TS. –£—Ç–æ—á–Ω–∏ —Å—Ç–∏–ª—å/—Ç–∞–π–º—Ñ—Ä–µ–π–º/—Ä—ã–Ω–æ–∫. –î–∞–π –∫–∞—Ä–∫–∞—Å: –≤—Ö–æ–¥-—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ-–≤—ã—Ö–æ–¥-—Ä–∏—Å–∫. "
            "–ü–æ–ø—Ä–æ—Å–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å 3 –ø–æ–ª—è —Å–µ–π—á–∞—Å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫.",

        "‚ùì –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å":
            "INTENT=START_HELP. –ü—Ä–µ–¥–ª–æ–∂–∏ 3 –ø—É—Ç–∏: (–∞) –±—ã—Å—Ç—Ä—ã–π –º–∏–Ω–∏-—Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏, (–±) —ç–∫—Å–ø—Ä–µ—Å—Å-–∫–∞—Ä–∫–∞—Å –¢–°, (–≤) –∫–∞—Ä—Ç–∞ —Ü–µ–ª–µ–π –Ω–∞ –Ω–µ–¥–µ–ª—é. "
            "–ü–æ–º–æ–≥–∏ –≤—ã–±—Ä–∞—Ç—å 1 –ø—É—Ç—å, –∑–∞—Ç–µ–º –∑–∞–¥–∞–π 1 —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏ –¥–∞–π 1 –º–∞–ª–µ–Ω—å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",

        "üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: ¬´–ø–æ–ø–ª—ã–ª¬ª":
            "INTENT=CRISIS. –î–∞–π –ø—Ä–æ—Ç–æ–∫–æ–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: —Ç–∞–π–º-–∞—É—Ç 3 –º–∏–Ω, –∑–∞–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª, –¥—ã—Ö–∞–Ω–∏–µ 4-7-8, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–∏–º–∏—Ç—ã –¥–Ω—è. "
            "–ü–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ ‚Äî –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–æ–∑–Ω–∞–Ω–∏–µ –∏ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é.",

        "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å (–Ω–µ–¥–µ–ª—è)":
            "INTENT=WEEKLY_PANEL. –ü–æ–ø—Ä–æ—Å–∏ 3 —Ñ–∞–∫—Ç–∞: —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å/—á—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å/1 –ø—Ä–∏—á–∏–Ω–∞. "
            "–°—Ñ–æ—Ä–º–∏—Ä—É–π —Ñ–æ–∫—É—Å-—É–∑–µ–ª –Ω–∞ –Ω–µ–¥–µ–ª—é –∏ 2 —Ä–∏—Ç—É–∞–ª–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ò—Ç–æ–≥ ‚Äî –º–∏–Ω–∏-–ø–ª–∞–Ω –≤ 3 —à–∞–≥–∞—Ö.",

        "ü™™ –ü–∞—Å–ø–æ—Ä—Ç/–ø—Ä–æ—Ñ–∏–ª—å":
            "INTENT=PASSPORT. –°–ø—Ä–æ—Å–∏ –∫—Ä–∞—Ç–∫–æ: —Ä—ã–Ω–æ–∫, —Å—Ç–∏–ª—å, –¢–§, —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É, –ª–∏–º–∏—Ç –¥–Ω—è, –≥–ª–∞–≤–Ω–∞—è –æ—à–∏–±–∫–∞. "
            "–í–µ—Ä–Ω–∏ –∞–∫–∫—É—Ä–∞—Ç–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É-–ø–∞—Å–ø–æ—Ä—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.",

        "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
            "INTENT=MATERIALS. –ü—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—é: –ú1-—É—Ä–æ–∫1 (Mercedes+TOTE), –ú1-—É—Ä–æ–∫2 (–∞—Ä—Ö–µ—Ç–∏–ø—ã), –ú1-—É—Ä–æ–∫3 (—É–±–µ–∂–¥–µ–Ω–∏—è), "
            "–ú2-—É—Ä–æ–∫1 (—á—Ç–æ —Ç–∞–∫–æ–µ –¢–°), –ú2-—É—Ä–æ–∫2 (–≤—Ö–æ–¥—ã), –ú2-—É—Ä–æ–∫3 (—Ä–∏—Å–∫/–≤—ã—Ö–æ–¥), –ú2-—É—Ä–æ–∫4 (—Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è). "
            "–°–ø—Ä–æ—Å–∏, —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å –∫—Ä–∞—Ç–∫–æ."
    }
    # –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´–ú–µ–Ω—é¬ª/¬´–°–±—Ä–æ—Å¬ª
    if user_text in ("üß≠ –ú–µ–Ω—é", "üîÑ –°–±—Ä–æ—Å"):
        return None
    # –∏–Ω–∞—á–µ ‚Äî –ª–∏–±–æ intent, –ª–∏–±–æ —Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    return mapping.get(user_text, f"FREE_CHAT. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç: {user_text}")

# ---------- HANDLERS ----------
@bot.message_handler(commands=['start'])
def cmd_start(m):
    uid = m.from_user.id
    # —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ + system
    history[uid] = [{"role":"system","content":SYSTEM_PROMPT}]
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ <b>Innertrade</b>.\n"
        "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É-–∏–Ω—Ç–µ–Ω—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.\n–ö–æ–º–∞–Ω–¥—ã: /menu /reset /ping",
        reply_markup=build_kb()
    )

@bot.message_handler(commands=['menu'])
def cmd_menu(m):
    bot.send_message(m.chat.id, "üß≠ –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ–Ω—Ç:", reply_markup=build_kb())

@bot.message_handler(commands=['reset'])
def cmd_reset(m):
    uid = m.from_user.id
    history[uid] = [{"role":"system","content":SYSTEM_PROMPT}]
    bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.", reply_markup=build_kb())

@bot.message_handler(commands=['ping'])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

# –ö–Ω–æ–ø–∫–∏/—Ç–µ–∫—Å—Ç
@bot.message_handler(func=lambda x: True)
def on_text(m):
    uid = m.from_user.id
    incoming = (m.text or "").strip()

    if incoming == "üß≠ –ú–µ–Ω—é":
        bot.send_message(m.chat.id, "üß≠ –ú–µ–Ω—é:", reply_markup=build_kb())
        return
    if incoming == "üîÑ –°–±—Ä–æ—Å":
        history[uid] = [{"role":"system","content":SYSTEM_PROMPT}]
        bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.", reply_markup=build_kb())
        return

    seed = intent_seed(incoming)
    try:
        reply = ask_gpt(uid, seed if seed else incoming)
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"

    send_long(m.chat.id, reply)

# ---------- KEEPALIVE (Render/health) ----------
app = Flask(__name__)

@app.route("/")
def home():
    return "Innertrade mentor is alive."

@app.route("/health")
def health():
    return "pong"

if __name__ == "__main__":
    logging.info("Starting keepalive web server‚Ä¶")
    # –∑–∞–ø—É—Å–∫ Flask + polling –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö –Ω–µ –Ω—É–∂–µ–Ω ‚Äî telebot —Å–∞–º –≤Thread; Flask –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏—Ç –ø–æ—Ä—Ç
    import threading
    def run_bot():
        logging.info("Starting polling‚Ä¶")
        bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
    threading.Thread(target=run_bot, daemon=True).start()
    app.run(host="0.0.0.0", port=PORT)
