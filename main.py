# main.py
import os, json, logging, time, datetime as dt
from flask import Flask, request, jsonify, abort
from telebot import TeleBot, types
from openai import OpenAI
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("innertrade")

# -------------------- ENV ---------------------
TELEGRAM_TOKEN      = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY      = os.getenv("OPENAI_API_KEY")
DATABASE_URL        = os.getenv("DATABASE_URL")
PUBLIC_URL          = os.getenv("PUBLIC_URL")            # https://innertrade-bot.onrender.com
WEBHOOK_PATH        = os.getenv("WEBHOOK_PATH", "wbhk_9t3x")
TG_WEBHOOK_SECRET   = os.getenv("TG_WEBHOOK_SECRET")     # –ª—é–±–æ–π –¥–ª–∏–Ω–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π
ALLOW_SET_WEBHOOK   = os.getenv("ALLOW_SET_WEBHOOK", "1") in ("1", "true", "True")
MODEL_SMALL         = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

if not TELEGRAM_TOKEN:    raise RuntimeError("TELEGRAM_TOKEN missing")
if not OPENAI_API_KEY:    raise RuntimeError("OPENAI_API_KEY missing")
if not PUBLIC_URL:        raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")
if not TG_WEBHOOK_SECRET: raise RuntimeError("TG_WEBHOOK_SECRET missing")

# -------------------- OPENAI ------------------
oa = OpenAI(api_key=OPENAI_API_KEY)

def gpt_short(system, user, max_tokens=300, temperature=0.2):
    try:
        resp = oa.chat.completions.create(
            model=MODEL_SMALL,
            messages=[{"role":"system","content":system},{"role":"user","content":user}],
            temperature=temperature,
            max_tokens=max_tokens,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.warning(f"OpenAI error: {e}")
        return None

# -------------------- DB ----------------------
engine = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True)
        with engine.begin() as conn:
            # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ö–µ–º–∞
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS users(
              user_id BIGINT PRIMARY KEY,
              name TEXT,
              username TEXT,
              address TEXT,              -- 'tu' | 'vy'
              mode TEXT NOT NULL DEFAULT 'course',
              created_at TIMESTAMPTZ DEFAULT now(),
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            CREATE TABLE IF NOT EXISTS user_state(
              user_id BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
              intent TEXT,
              step   TEXT,
              data   JSONB,
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            CREATE TABLE IF NOT EXISTS errors(
              id BIGSERIAL PRIMARY KEY,
              user_id BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
              error_text TEXT NOT NULL,
              pattern_behavior TEXT,
              pattern_emotion  TEXT,
              pattern_thought  TEXT,
              positive_goal    TEXT,
              tote_goal  TEXT,
              tote_ops   TEXT,
              tote_check TEXT,
              tote_exit  TEXT,
              created_at TIMESTAMPTZ DEFAULT now()
            );
            """))
            log.info("DB connected & migrated")
    except OperationalError as e:
        log.warning(f"DB not available yet: {e}")
        engine = None
else:
    log.info("DATABASE_URL not set ‚Äî running without DB (stateless)")

def db_exec(sql, params=None, fetch=False, one=False):
    if not engine:
        return None
    with engine.begin() as conn:
        res = conn.execute(text(sql), params or {})
        if fetch:
            rows = res.mappings().all()
            return rows[0] if (one and rows) else rows

def upsert_user(u):
    if not engine: return
    db_exec("""
    INSERT INTO users(user_id,name,username)
    VALUES (:id,:name,:username)
    ON CONFLICT (user_id) DO UPDATE
      SET name=EXCLUDED.name, username=EXCLUDED.username, updated_at=now()
    """, {"id": u.id, "name": f"{getattr(u,'first_name', '')} {getattr(u,'last_name','')}".strip(),
          "username": getattr(u,'username',None)})

def get_state(uid):
    if not engine: return {"intent":"greet","step":"ask_form","data":{}}
    row = db_exec("SELECT intent, step, data FROM user_state WHERE user_id=:uid",
                  {"uid": uid}, fetch=True, one=True)
    if row:
        return {"intent": row["intent"], "step": row["step"], "data": row["data"] or {}}
    return {"intent":"greet","step":"ask_form","data":{}}

def save_state(uid, intent=None, step=None, data_patch=None):
    if not engine: return
    st = get_state(uid)
    if data_patch:
        st["data"] = {**(st.get("data") or {}), **data_patch}
    if intent: st["intent"]=intent
    if step:   st["step"]=step
    db_exec("""
    INSERT INTO user_state(user_id,intent,step,data)
    VALUES (:uid,:intent,:step,:data)
    ON CONFLICT (user_id) DO UPDATE
      SET intent=:intent, step=:step, data=:data, updated_at=now()
    """, {"uid": uid, "intent": st["intent"], "step": st["step"],
          "data": json.dumps(st["data"])})

def insert_error(uid, payload):
    if not engine: return
    db_exec("""
      INSERT INTO errors(user_id,error_text,pattern_behavior,pattern_emotion,pattern_thought,
                         positive_goal,tote_goal,tote_ops,tote_check,tote_exit)
      VALUES (:uid,:e,:pb,:pe,:pt,:pg,:tg,:to,:tc,:te)
    """, { "uid": uid,
           "e": payload.get("error_text"),
           "pb":payload.get("pattern_behavior"),
           "pe":payload.get("pattern_emotion"),
           "pt":payload.get("pattern_thought"),
           "pg":payload.get("positive_goal"),
           "tg":payload.get("tote_goal"),
           "to":payload.get("tote_ops"),
           "tc":payload.get("tote_check"),
           "te":payload.get("tote_exit") })

# -------------------- TG BOT ------------------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

def addr_label(uid):
    st = get_state(uid)
    return "—Ç—ã" if (st["data"].get("address")=="tu") else ("–≤—ã" if st["data"].get("address")=="vy" else None)

def greet_text(name, addr):
    hello = f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!" if name else "üëã –ü—Ä–∏–≤–µ—Ç!"
    tail = "–ú–æ–∂–µ–º —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ. –ò–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ."
    return f"{hello} {tail}"

# -------------------- DIALOG HELPERS ----------
def ask_address(chat_id, uid):
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("—Ç—ã", callback_data="addr_tu"),
           types.InlineKeyboardButton("–≤—ã", callback_data="addr_vy"))
    bot.send_message(chat_id, "–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–±—â–∞—Ç—å—Å—è ‚Äî *—Ç—ã* –∏–ª–∏ *–≤—ã*?", reply_markup=kb)
    save_state(uid, intent="greet", step="ask_address")

def propose_error_summary(uid, user_text):
    """–ú—è–≥–∫–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã GPT'–æ–º (—É—Ä–æ–≤–µ–Ω—å –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞), —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º."""
    system = ("–¢—ã –∫–æ—É—á –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –°—É–º–º–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—É –≤ 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è "
              "–Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞, –±–µ–∑ –º–æ—Ä–∞–ª–∏. –†—É—Å—Å–∫–∏–π —è–∑—ã–∫.")
    draft = gpt_short(system, user_text, max_tokens=120) or user_text.strip()
    return draft

def ask_mercedes_block(chat_id, uid, block):
    labels = {
        "context":"–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
        "emotion":"–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)",
        "thought":"–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ —Ç–æ–≥–¥–∞? (1‚Äì2 —Ñ—Ä–∞–∑—ã, —Ü–∏—Ç–∞—Ç–∞–º–∏)",
        "behavior":"–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ –¥–µ–ª–∞–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ? (–≥–ª–∞–≥–æ–ª–∞–º–∏, 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
    }
    bot.send_message(chat_id, labels[block], reply_markup=main_menu())
    save_state(uid, step=f"mer_{block}")

def build_status(uid):
    st = get_state(uid)
    return {
        "ok": True,
        "time": dt.datetime.utcnow().replace(microsecond=0).isoformat()+"Z",
        "intent": st["intent"],
        "step": st["step"],
        "db": "ok" if engine else "no-db"
    }

# -------------------- COMMANDS ----------------
@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    status = build_status(m.from_user.id)
    bot.send_message(m.chat.id, "```\n"+json.dumps(status, ensure_ascii=False, indent=2)+"\n```", parse_mode="Markdown")

@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m):
    upsert_user(m.from_user)
    save_state(m.from_user.id, intent="greet", step="ask_form", data_patch={})
    # —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä "—Ç—ã/–≤—ã" –æ–¥–∏–Ω —Ä–∞–∑, –∑–∞—Ç–µ–º ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–π –≤—Ö–æ–¥
    addr = addr_label(m.from_user.id)
    bot.send_message(m.chat.id, greet_text(m.from_user.first_name, addr), reply_markup=main_menu())
    if not addr:
        ask_address(m.chat.id, m.from_user.id)

# -------------------- INLINE (—Ç—ã/–≤—ã) ----------
@bot.callback_query_handler(func=lambda c: c.data in ("addr_tu","addr_vy"))
def cb_address(c):
    uid = c.from_user.id
    choice = "tu" if c.data=="addr_tu" else "vy"
    save_state(uid, data_patch={"address": choice})
    bot.answer_callback_query(c.id, "–û–∫")
    bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=None)
    bot.send_message(c.message.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ. –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª–∏—Ç, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.", reply_markup=main_menu())
    save_state(uid, intent="greet", step="free_talk")

# -------------------- BUTTON INTENTS ----------
@bot.message_handler(func=lambda msg: msg.text=="üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def intent_error_btn(m): return intent_error(m)

def intent_error(m):
    uid = m.from_user.id
    save_state(uid, intent="error", step="ask_error", data_patch={"err_buffer":[]})
    bot.send_message(m.chat.id,
        "–û–ø–∏—à–∏ —Å–≤–æ—é —Ç–µ–∫—É—â—É—é —Ç—Ä—É–¥–Ω–æ—Å—Ç—å 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ (–∫–∞–∫ —Ç—ã —ç—Ç–æ –¥–µ–ª–∞–µ—à—å –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏).", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text=="üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def intent_strategy(m):
    save_state(m.from_user.id, "strategy", step="intro")
    bot.send_message(m.chat.id,
        "–û–∫, —Å–æ–±–µ—Ä—ë–º –¢–° –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É:\n1) –ü–æ–¥—Ö–æ–¥/–¢–§/–≤—Ö–æ–¥\n2) –°—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥/—Ä–∏—Å–∫\n–ì–æ—Ç–æ–≤?", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text=="üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def intent_passport(m):
    save_state(m.from_user.id, "passport", step="intro")
    bot.send_message(m.chat.id,"–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. –ù–∞—á–Ω—ë–º —Å —Ä—ã–Ω–∫–æ–≤/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤?", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text=="üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def intent_week_panel(m):
    save_state(m.from_user.id, "week_panel", step="intro")
    bot.send_message(m.chat.id,"–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏: —Ñ–æ–∫—É—Å, 1‚Äì2 —Ü–µ–ª–∏, –ª–∏–º–∏—Ç—ã, –∫–æ—Ä–æ—Ç–∫–∏–µ —á–µ–∫-–∏–Ω—ã. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text=="üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def intent_panic(m):
    save_state(m.from_user.id, "panic", step="protocol")
    bot.send_message(m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text=="ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def intent_start_help(m):
    save_state(m.from_user.id, "start_help", step="intro")
    bot.send_message(m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω)\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°\n–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?",
        reply_markup=main_menu())

# -------------------- CORE DIALOG -------------
@bot.message_handler(content_types=["text"])
def any_text(m):
    uid = m.from_user.id
    upsert_user(m.from_user)
    st = get_state(uid)
    text_in = (m.text or "").strip()

    # –±—ã—Å—Ç—Ä—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ —Å–ª–æ–≤–∞–º
    low = text_in.lower()
    if st["intent"]=="greet" and st["step"] in ("ask_form","free_talk"):
        # —Å–≤–æ–±–æ–¥–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ: –µ—Å–ª–∏ —è–≤–Ω–æ –ø—Ä–æ—Å–∏—Ç "—Ä–∞–∑–±–æ—Ä", —Å—Ç–∞—Ä—Ç—É–µ–º –æ—à–∏–±–∫—É
        if "—Ä–∞–∑–±–æ—Ä" in low or "–æ—à–∏–±–∫" in low:
            return intent_error(m)
        # –∏–Ω–∞—á–µ ‚Äî –º—è–≥–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, 1 —Ä–µ–ø–ª–∏–∫–∞ + –≤–æ–ø—Ä–æ—Å-–æ—Ü–µ–Ω–∫–∞ –±–æ–ª–∏
        reply = gpt_short(
            "–¢—ã —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –∫–æ—É—á. –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, 1‚Äì2 —Ñ—Ä–∞–∑—ã, –±–µ–∑ —Å–æ–≤–µ—Ç–æ–≤, —Å –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ —Å—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞. –†—É—Å—Å–∫–∏–π.",
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç: {text_in}",
            max_tokens=120, temperature=0.4
        ) or "–ü–æ–Ω–∏–º–∞—é. –ú–æ–∂–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å —ç—Ç–æ –ø–æ —à–∞–≥–∞–º. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –±–æ–ª–∏—Ç —Å–µ–π—á–∞—Å?"
        bot.send_message(m.chat.id, reply, reply_markup=main_menu())
        save_state(uid, step="free_talk")
        return

    # –í–µ—Ç–≤—å "–£ –º–µ–Ω—è –æ—à–∏–±–∫–∞"
    if st["intent"]=="error":
        data = st.get("data", {}) or {}
        buf = data.get("err_buffer", [])

        if st["step"]=="ask_error":
            # –ö–æ–ø–∏–º 1‚Äì2 –ø–æ–¥—Ö–æ–¥–∞, –∑–∞—Ç–µ–º GPT –¥–∞—ë—Ç –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
            buf.append(text_in)
            save_state(uid, step="clarify_1", data_patch={"err_buffer":buf})
            if len(buf) == 1:
                bot.send_message(m.chat.id, "–ü–æ–Ω—è–ª. –ï—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏ –µ—â—ë –æ–¥–Ω—É –¥–µ—Ç–∞–ª—å. –ò–ª–∏ —Å–∫–∞–∂–∏ ¬´–≥–æ—Ç–æ–≤–æ¬ª.", reply_markup=main_menu())
                return
            # –µ—Å—Ç—å 2 –ø–æ–¥—Ö–æ–¥–∞ ‚Üí –¥–µ–ª–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
            draft = propose_error_summary(uid, "\n".join(buf))
            save_state(uid, step="confirm_error", data_patch={"err_draft": draft})
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("–î–∞", callback_data="err_ok"),
                   types.InlineKeyboardButton("–ù–µ —Å–æ–≤—Å–µ–º", callback_data="err_more"))
            bot.send_message(m.chat.id, f"–ó–∞—Ñ–∏–∫—Å–∏—Ä—É—é —Ç–∞–∫:\n> {draft}\n–ü–æ–¥—Ö–æ–¥–∏—Ç?", reply_markup=kb)
            return

        if st["step"]=="clarify_1":
            if low in ("–≥–æ—Ç–æ–≤","–≥–æ—Ç–æ–≤–æ","–¥–∞","–æ–∫","—Ö–≤–∞—Ç–∏—Ç"):
                draft = propose_error_summary(uid, "\n".join(buf))
                save_state(uid, step="confirm_error", data_patch={"err_draft": draft})
                kb = types.InlineKeyboardMarkup()
                kb.add(types.InlineKeyboardButton("–î–∞", callback_data="err_ok"),
                       types.InlineKeyboardButton("–ù–µ —Å–æ–≤—Å–µ–º", callback_data="err_more"))
                bot.send_message(m.chat.id, f"–ó–∞—Ñ–∏–∫—Å–∏—Ä—É—é —Ç–∞–∫:\n> {draft}\n–ü–æ–¥—Ö–æ–¥–∏—Ç?", reply_markup=kb)
                return
            # –¥–æ–±–∞–≤–ª—è–µ–º –µ—â—ë –¥–µ—Ç–∞–ª—å –∏ —Å–Ω–æ–≤–∞ —Ä–µ–∑—é–º–∏—Ä—É–µ–º
            buf.append(text_in)
            draft = propose_error_summary(uid, "\n".join(buf))
            save_state(uid, step="confirm_error", data_patch={"err_buffer":buf,"err_draft":draft})
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("–î–∞", callback_data="err_ok"),
                   types.InlineKeyboardButton("–ù–µ —Å–æ–≤—Å–µ–º", callback_data="err_more"))
            bot.send_message(m.chat.id, f"–ó–∞—Ñ–∏–∫—Å–∏—Ä—É—é —Ç–∞–∫:\n> {draft}\n–ü–æ–¥—Ö–æ–¥–∏—Ç?", reply_markup=kb)
            return

        if st["step"]=="mer_context":
            save_state(uid, data_patch={"mer_context": text_in})
            return ask_mercedes_block(m.chat.id, uid, "emotion")
        if st["step"]=="mer_emotion":
            save_state(uid, data_patch={"mer_emotion": text_in})
            return ask_mercedes_block(m.chat.id, uid, "thought")
        if st["step"]=="mer_thought":
            save_state(uid, data_patch={"mer_thought": text_in})
            return ask_mercedes_block(m.chat.id, uid, "behavior")
        if st["step"]=="mer_behavior":
            save_state(uid, data_patch={"mer_behavior": text_in})
            # –†–µ–∑—é–º–µ MERCEDES ‚Üí –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —Ü–µ–ª–∏
            d = get_state(uid)["data"]
            summary = (f"–û–∫, –≤–∏–∂—É –ø–∞—Ç—Ç–µ—Ä–Ω.\n"
                       f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {d.get('mer_context','‚Äî')}\n"
                       f"–≠–º–æ—Ü–∏–∏: {d.get('mer_emotion','‚Äî')}\n"
                       f"–ú—ã—Å–ª–∏: {d.get('mer_thought','‚Äî')}\n"
                       f"–ü–æ–≤–µ–¥–µ–Ω–∏–µ: {d.get('mer_behavior','‚Äî')}\n")
            bot.send_message(m.chat.id, summary)
            bot.send_message(m.chat.id, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º: *—á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?*")
            save_state(uid, step="ask_goal")
            return

        if st["step"]=="ask_goal":
            save_state(uid, data_patch={"positive_goal": text_in})
            bot.send_message(m.chat.id, "–ö–∞–∫–∏–µ 2‚Äì3 —à–∞–≥–∞ –ø–æ–º–æ–≥—É—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è —ç—Ç–æ–π —Ü–µ–ª–∏ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–∫–∞—Ö? (—Å–ø–∏—Å–∫–æ–º)")
            save_state(uid, step="ask_ops")
            return

        if st["step"]=="ask_ops":
            # —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è: –ø–∏—à–µ–º –∑–∞–ø–∏—Å—å –≤ errors
            d = get_state(uid)["data"]
            payload = {
                "error_text": d.get("err_draft") or "‚Äî",
                "pattern_behavior": d.get("mer_behavior"),
                "pattern_emotion":  d.get("mer_emotion"),
                "pattern_thought":  d.get("mer_thought"),
                "positive_goal":    d.get("positive_goal"),
                "tote_goal":        d.get("positive_goal"),
                "tote_ops":         text_in,
                "tote_check":       "–í—ã–ø–æ–ª–Ω–∏–ª –ª–∏ —è —à–∞–≥–∏ –∏ –æ—Å—Ç–∞–ª—Å—è –≤ –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –ø–ª–∞–Ω–∞?",
                "tote_exit":        "–î–∞ ‚Äî –≤—ã—Ö–æ–∂—É; –ù–µ—Ç ‚Äî –≤–Ω–æ—à—É –ø—Ä–∞–≤–∫—É –∏ –ø–æ–≤—Ç–æ—Ä—è—é"
            }
            insert_error(uid, payload)
            bot.send_message(m.chat.id, "–ì–æ—Ç–æ–≤–æ. –°–æ—Ö—Ä–∞–Ω–∏–ª —Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏ –∏ —Ü–µ–ª—å. –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤ —É–¥–æ–±–Ω–æ–º —Ç–µ–º–ø–µ.", reply_markup=main_menu())
            save_state(uid, intent="idle", step="done")
            return

    # –§–æ–ª–±—ç–∫
    bot.send_message(m.chat.id, "–ü—Ä–∏–Ω—è–ª. –ú–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –∑–¥–µ—Å—å –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu())

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –æ—à–∏–±–∫–∏
@bot.callback_query_handler(func=lambda c: c.data in ("err_ok","err_more"))
def cb_err_confirm(c):
    uid = c.from_user.id
    st = get_state(uid)
    if c.data=="err_ok":
        bot.answer_callback_query(c.id, "–û–∫, –∏–¥—ë–º –¥–∞–ª—å—à–µ")
        bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=None)
        ask_mercedes_block(c.message.chat.id, uid, "context")
        save_state(uid, step="mer_context")
    else:
        bot.answer_callback_query(c.id, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π, —á—Ç–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å/–¥–æ–±–∞–≤–∏—Ç—å")
        bot.edit_message_reply_markup(c.message.chat.id, c.message.message_id, reply_markup=None)
        save_state(uid, step="clarify_1")

# -------------------- FLASK -------------------
app = Flask(__name__)

@app.get("/")
def root():
    return "OK"

@app.get("/health")
def health():
    return jsonify({"status":"ok","time": dt.datetime.utcnow().isoformat()})

@app.get("/status")
def http_status():
    # HTTP-—Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ (–Ω–µ –ø—É—Ç–∞—Ç—å —Å /status –≤ —á–∞—Ç–µ)
    return jsonify(build_status(0))

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    # –¢–µ–ª–µ–≥—Ä–∞–º –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å 200 –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ
    try:
        update = types.Update.de_json(request.get_json(force=True))
        bot.process_new_updates([update])
    except Exception as e:
        log.exception(f"webhook error: {e}")
    return "OK", 200

def ensure_webhook():
    if not ALLOW_SET_WEBHOOK: 
        log.info("Auto setWebhook disabled")
        return
    import requests
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook"
    data = {
        "url": f"{PUBLIC_URL}/{WEBHOOK_PATH}",
        "secret_token": TG_WEBHOOK_SECRET,
        "allowed_updates": json.dumps(["message","callback_query"]),
        "drop_pending_updates": True
    }
    r = requests.post(url, data=data, timeout=10)
    try:
        jr = r.json()
    except Exception:
        jr = {"text": r.text}
    log.info(f"setWebhook -> {jr}")

if __name__ == "__main__":
    # –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        ensure_webhook()
    except Exception as e:
        log.warning(f"setWebhook failed: {e}")

    port = int(os.getenv("PORT", "10000"))
    log.info(f"Starting web server on :{port}")
    app.run(host="0.0.0.0", port=port)
