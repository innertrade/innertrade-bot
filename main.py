# main.py
import os, json, logging, time
from datetime import datetime
from typing import Optional, Dict, Any

from flask import Flask, request, abort, jsonify
from telebot import TeleBot, types
from telebot.types import Update

from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError, OperationalError

from openai import OpenAI

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("innertrade")

# ---------- ENV ----------
TELEGRAM_TOKEN     = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY")
DATABASE_URL       = os.getenv("DATABASE_URL")
PUBLIC_URL         = os.getenv("PUBLIC_URL")
WEBHOOK_PATH       = os.getenv("WEBHOOK_PATH")  # –Ω–∞–ø—Ä. wbhk_9t3x
TG_WEBHOOK_SECRET  = os.getenv("TG_WEBHOOK_SECRET")
OPENAI_MODEL       = os.getenv("OPENAI_MODEL", "gpt-4o-mini")

for k, v in {
    "TELEGRAM_TOKEN": TELEGRAM_TOKEN,
    "OPENAI_API_KEY": OPENAI_API_KEY,
    "DATABASE_URL": DATABASE_URL,
    "PUBLIC_URL": PUBLIC_URL,
    "WEBHOOK_PATH": WEBHOOK_PATH,
    "TG_WEBHOOK_SECRET": TG_WEBHOOK_SECRET,
}.items():
    if not v:
        raise RuntimeError(f"{k} is missing")

# ---------- OPENAI ----------
client = OpenAI(api_key=OPENAI_API_KEY)

def gpt_coach(system: str, user: str) -> str:
    """
    –ö–æ—Ä–æ—Ç–∫–∏–π ¬´–∫–æ—É—á-–æ—Ç–≤–µ—Ç¬ª —á—Ç–æ–±—ã –º—è–≥–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –æ—Ñ—Ñ—Ç–æ–ø –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞ —à–∞–≥.
    """
    try:
        resp = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role":"system","content": system},
                {"role":"user","content": user}
            ],
            temperature=0.4,
            max_tokens=300,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.warning(f"OpenAI fallback: {e}")
        # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç
        return "–ü–æ–Ω—è–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ö–æ—Ä–æ—Ç–∫–æ –æ—Ç–≤–µ—á—É –∏ –≤–µ—Ä–Ω—ë–º—Å—è –∫ —à–∞–≥—É, —á—Ç–æ–±—ã –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å—Å—è."

# ---------- DB ----------
engine = create_engine(
    DATABASE_URL,
    pool_pre_ping=True,
    pool_recycle=180,
    pool_size=5,
    max_overflow=5,
)

def db_ok() -> bool:
    try:
        with engine.connect() as c:
            c.execute(text("SELECT 1"))
        return True
    except Exception as e:
        log.error(f"DB check failed: {e}")
        return False

def ensure_user(uid: int):
    with engine.begin() as c:
        c.execute(text("""
            INSERT INTO users(user_id) VALUES (:uid)
            ON CONFLICT (user_id) DO NOTHING
        """), {"uid": uid})

def get_state(uid: int) -> Dict[str, Any]:
    with engine.begin() as c:
        r = c.execute(text("SELECT intent, step, COALESCE(data,'{}'::jsonb) AS data FROM user_state WHERE user_id=:u"), {"u": uid}).mappings().first()
        if not r:
            c.execute(text("""
                INSERT INTO user_state(user_id, intent, step, data)
                VALUES (:u, 'idle', NULL, '{}'::jsonb)
                ON CONFLICT (user_id) DO NOTHING
            """), {"u": uid})
            return {"intent":"idle","step":None,"data":{}}
        return {"intent": r["intent"], "step": r["step"], "data": r["data"]}

def set_state(uid: int, intent: str, step: Optional[str], data: Optional[Dict[str,Any]] = None):
    with engine.begin() as c:
        c.execute(text("""
            INSERT INTO user_state(user_id, intent, step, data)
            VALUES (:u, :i, :s, COALESCE(:d, '{}'::jsonb))
            ON CONFLICT (user_id) DO UPDATE
            SET intent=EXCLUDED.intent,
                step=EXCLUDED.step,
                data=EXCLUDED.data,
                updated_at=now()
        """), {"u": uid, "i": intent, "s": step, "d": json.dumps(data or {})})

def upsert_error_row(uid: int, row_id: Optional[int], fields: Dict[str, Any]) -> int:
    """
    –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ errors. –í–æ–∑–≤—Ä–∞—â–∞–µ–º id.
    """
    with engine.begin() as c:
        if row_id:
            sets = ", ".join([f"{k}=:{k}" for k in fields.keys()])
            params = {"id": row_id, **fields}
            c.execute(text(f"UPDATE errors SET {sets} WHERE id=:id"), params)
            return row_id
        else:
            cols = ", ".join(fields.keys())
            vals = ", ".join([f":{k}" for k in fields.keys()])
            params = {"uid": uid, **fields}
            r = c.execute(text(f"""
                INSERT INTO errors(user_id, {cols}) VALUES (:uid, {vals})
                RETURNING id
            """), params).first()
            return int(r[0])

# ---------- TELEGRAM ----------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    kb.row("üìä –°—Ç–∞—Ç—É—Å")
    return kb

# ------- –í–∞–ª–∏–¥–∞—Ü–∏—è/–ø—Ä–∞–≤–∏–ª–∞ —É—Ä–æ–∫–∞ 1 -------
BEHAVIOR_VERBS = [
    "–≤—Ö–æ–∂—É","–∑–∞—Ö–æ–∂—É","–ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—é—Å—å","—É—Å—Ä–µ–¥–Ω—è—é—Å—å","–¥–≤–∏–≥–∞—é","–ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞—é",
    "–∑–∞–∫—Ä—ã–≤–∞—é","—Ñ–∏–∫—Å–∏—Ä—É—é","–¥–æ–±–∞–≤–ª—è—é","–ø—Ä–æ–ø—É—Å–∫–∞—é","–ø–µ—Ä–µ—Å–∏–∂–∏–≤–∞—é","–≤—ã—Å—Ç–∞–≤–ª—è—é"
]
VAGUE_MARKERS = ["–∏–Ω–æ–≥–¥–∞","–±—ã–≤–∞–µ—Ç","–≤ –∫–∞–∫–∏–µ-—Ç–æ –¥–Ω–∏","–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏","–∫–∞–∫-—Ç–æ","—á—Ç–æ-—Ç–æ","—á–∞—Å—Ç–æ"]

def looks_like_behavior(text: str) -> bool:
    t = text.lower()
    if len(t.split()) < 3:
        return False
    if any(v in t for v in BEHAVIOR_VERBS):
        return True
    return False

def looks_vague(text: str) -> bool:
    t = text.lower()
    return any(v in t for v in VAGUE_MARKERS)

def ask_next_mercedes_step(step: str, chat_id: int):
    prompts = {
        "ctx": "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç –æ—à–∏–±–∫–µ? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
        "emo": "–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? –ö–∞–∫ –æ—â—É—â–∞–µ—Ç—Å—è –≤ —Ç–µ–ª–µ? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)",
        "thoughts": "–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (—Ü–∏—Ç–∞—Ç–∞–º–∏, 1‚Äì2 —Ñ—Ä–∞–∑—ã)",
        "behavior": "–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ —Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≥–ª–∞–≥–æ–ª–∞–º–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).",
    }
    bot.send_message(chat_id, prompts[step], reply_markup=main_menu())

def mercedes_done(data: Dict[str, Any]) -> bool:
    # done: –µ—Å—Ç—å error_text + —Ç—Ä–∏ —Å–≤—è–∑–∫–∏: context/emotions/thoughts/behavior
    need = ["error_text","mer_ctx","mer_emo","mer_th","mer_beh"]
    return all(k in data and data[k] for k in need)

# ------- –ö–æ–º–∞–Ω–¥—ã -------
@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m):
    uid = m.from_user.id
    ensure_user(uid)
    set_state(uid, "idle", None, {})
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*.\n–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /status /ping",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(m): bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    uid = m.from_user.id
    st = get_state(uid)
    # –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
    ok = "ok" if db_ok() else "fail"
    bot.send_message(
        m.chat.id,
        f"üìä *–°—Ç–∞—Ç—É—Å*\n"
        f"DB: {ok}\n"
        f"Intent: `{st['intent']}`\n"
        f"Step: `{st['step']}`",
        reply_markup=main_menu()
    )

# ------- –ò–Ω—Ç–µ–Ω—Ç—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é -------
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def intent_error(m):
    uid = m.from_user.id
    ensure_user(uid)
    set_state(uid, "lesson1_error", "ask_error", {"flow":"l1","current_error_id": None})
    bot.send_message(
        m.chat.id,
        "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ *–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞*.\n"
        "–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def intent_strategy(m):
    uid = m.from_user.id
    set_state(uid, "strategy", None, {})
    bot.send_message(
        m.chat.id,
        "–û–∫–µ–π, —Å–æ–±–µ—Ä—ë–º –¢–° –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É:\n"
        "1) –¶–µ–ª–∏\n2) –°—Ç–∏–ª—å\n3) –†—ã–Ω–∫–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n4) –ü—Ä–∞–≤–∏–ª–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞\n5) –†–∏—Å–∫\n6) –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n7) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def intent_passport(m):
    uid = m.from_user.id
    set_state(uid, "passport", None, {})
    bot.send_message(
        m.chat.id,
        "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. 1/6) –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å?",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def intent_week_panel(m):
    uid = m.from_user.id
    set_state(uid, "week_panel", None, {})
    bot.send_message(
        m.chat.id,
        "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏:\n‚Ä¢ –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n‚Ä¢ –ü–ª–∞–Ω (3 —à–∞–≥–∞)\n‚Ä¢ –õ–∏–º–∏—Ç—ã\n‚Ä¢ –†–∏—Ç—É–∞–ª—ã\n‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def intent_panic(m):
    uid = m.from_user.id
    set_state(uid, "panic", None, {})
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
        "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä (—á—Ç–æ –≤—ã–±–∏–ª–æ)\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def intent_start_help(m):
    uid = m.from_user.id
    set_state(uid, "start_help", None, {})
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω)\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°\n"
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º ‚Äî –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏?",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìä –°—Ç–∞—Ç—É—Å")
def intent_status_btn(m): return cmd_status(m)

# ------- –î–∏–∞–ª–æ–≥ —É—Ä–æ–∫–∞ 1 (MERCEDES ‚Üí TOTE) -------
def coach_and_reask(chat_id: int, user_text: str, reask: str):
    coach = gpt_coach(
        "–¢—ã –∫–æ—É—á: –æ—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ-–¥–æ–±—Ä–æ–º—É, –ø–æ–¥–¥–µ—Ä–∂–∏ –≤–æ–ø—Ä–æ—Å, –Ω–æ –≤–µ—Ä–Ω–∏ –∫ —à–∞–≥—É. –†—É—Å—Å–∫–∏–π —è–∑—ã–∫.",
        f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞: ¬´{user_text}¬ª. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É—Ç–æ—á–Ω—è—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É."
    )
    bot.send_message(chat_id, f"{coach}\n\n{reask}", reply_markup=main_menu())

@bot.message_handler(content_types=["text"])
def flow_router(m):
    uid = m.from_user.id
    st = get_state(uid)
    intent, step, data = st["intent"], st["step"], st["data"]

    # –µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π ‚Äî –º—è–≥–∫–∏–π —Ñ–æ–ª–±—ç–∫
    if intent not in ("lesson1_error",):
        # –Ω–µ –ª–æ–º–∞–µ–º –¥–∏–∞–ª–æ–≥ ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç
        bot.send_message(
            m.chat.id,
            "–ü—Ä–∏–Ω—è–ª. –ß—Ç–æ–±—ã –±—ã–ª–æ –±—ã—Å—Ç—Ä–µ–µ, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /menu.",
            reply_markup=main_menu()
        )
        return

    # ------- –£—Ä–æ–∫ 1 —à–∞–≥–∏ -------
    txt = (m.text or "").strip()

    # A) ask_error (done: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞)
    if step == "ask_error":
        # –ï—Å–ª–∏ —É—á–µ–Ω–∏–∫ –∑–∞–¥–∞—ë—Ç –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å –∫ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–µ
        if txt.endswith("?") or txt.lower().startswith(("–∞ –º–æ–∂–Ω–æ","–º–æ–∂–Ω–æ","–∞ ")):
            return coach_and_reask(
                m.chat.id, txt,
                "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *–æ—à–∏–±–∫—É –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è*: —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã *–¥–µ–ª–∞–µ—à—å* (–≥–ª–∞–≥–æ–ª–æ–º) ‚Äî 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
            )

        if not looks_like_behavior(txt) or looks_vague(txt):
            # –º—è–≥–∫–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ GPT
            return coach_and_reask(
                m.chat.id, txt,
                "–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —á—Ç–æ–±—ã —ç—Ç–æ –±—ã–ª–æ *–Ω–∞–±–ª—é–¥–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ*.\n"
                "–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª."
            )

        # –æ–∫, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Å–æ–∑–¥–∞—ë–º/–æ–±–Ω–æ–≤–ª—è–µ–º errors
        data["error_text"] = txt
        err_id = data.get("current_error_id")
        err_id = upsert_error_row(uid, err_id, {"error_text": txt})
        data["current_error_id"] = err_id

        set_state(uid, "lesson1_error", "ask_mer_ctx", data)
        bot.send_message(m.chat.id, "–û–∫. –ü–æ–π–¥—ë–º –ø–æ MERCEDES –∫—Ä–∞—Ç–∫–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω.")
        ask_next_mercedes_step("ctx", m.chat.id)
        return

    # B) MERCEDES ‚Äî context
    if step == "ask_mer_ctx":
        if txt.endswith("?"):
            return coach_and_reask(m.chat.id, txt, "–û–ø–∏—à–∏ *—Å–∏—Ç—É–∞—Ü–∏—é/—Ä–∞—Å–∫–ª–∞–¥* –¥–æ –æ—à–∏–±–∫–∏ ‚Äî 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
        data["mer_ctx"] = txt
        set_state(uid, "lesson1_error", "ask_mer_emo", data)
        ask_next_mercedes_step("emo", m.chat.id)
        return

    # C) emotions
    if step == "ask_mer_emo":
        if txt.endswith("?"):
            return coach_and_reask(m.chat.id, txt, "–ù–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –ø—Ä–æ —ç–º–æ—Ü–∏–∏/—Ç–µ–ª–µ—Å–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏.")
        data["mer_emo"] = txt
        set_state(uid, "lesson1_error", "ask_mer_th", data)
        ask_next_mercedes_step("thoughts", m.chat.id)
        return

    # D) thoughts
    if step == "ask_mer_th":
        if txt.endswith("?"):
            return coach_and_reask(m.chat.id, txt, "–ó–∞–ø–∏—à–∏ 1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã-–º—ã—Å–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–≤—É—á–∞—Ç –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏.")
        data["mer_th"] = txt
        set_state(uid, "lesson1_error", "ask_mer_beh", data)
        ask_next_mercedes_step("behavior", m.chat.id)
        return

    # E) behavior
    if step == "ask_mer_beh":
        if txt.endswith("?"):
            return coach_and_reask(m.chat.id, txt, "–û–ø–∏—à–∏ *–¥–µ–π—Å—Ç–≤–∏–µ* –≥–ª–∞–≥–æ–ª–∞–º–∏: —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å.")
        data["mer_beh"] = txt

        # DONE –ø–æ Mercedes?
        if not mercedes_done(data):
            # –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
            return coach_and_reask(m.chat.id, txt, "–ï—â—ë —á—É—Ç—å-—á—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω —Ü–µ–ª–∏–∫–æ–º.")

        # –°–æ–±–µ—Ä—ë–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ-–ø–∞—Ç—Ç–µ—Ä–Ω
        pattern = f"–ü–∞—Ç—Ç–µ—Ä–Ω: –∫–æ–Ω—Ç–µ–∫—Å—Ç ¬´{data['mer_ctx']}¬ª ‚Üí —ç–º–æ—Ü–∏–∏ ¬´{data['mer_emo']}¬ª ‚Üí –º—ã—Å–ª–∏ ¬´{data['mer_th']}¬ª ‚Üí –ø–æ–≤–µ–¥–µ–Ω–∏–µ ¬´{data['mer_beh']}¬ª."
        data["pattern"] = pattern

        # –æ–±–Ω–æ–≤–∏–º –∑–∞–ø–∏—Å—å errors
        err_id = data.get("current_error_id")
        upsert_error_row(uid, err_id, {
            "pattern_behavior": data["mer_beh"],
            "pattern_emotion":  data["mer_emo"],
            "pattern_thought":  data["mer_th"],
        })

        set_state(uid, "lesson1_error", "ask_goal_new", data)
        bot.send_message(
            m.chat.id,
            f"–†–µ–∑—é–º–µ:\n{pattern}\n\n–¢–µ–ø–µ—Ä—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º *–Ω–æ–≤—É—é —Ü–µ–ª—å* –≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π —Ñ–æ—Ä–º–µ (–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è)."
        )
        bot.send_message(
            m.chat.id,
            "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–í—Ö–æ–∂—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º —Å–∏–≥–Ω–∞–ª–µ –∏ *–Ω–µ —Ç—Ä–æ–≥–∞—é* —Å—Ç–æ–ø/—Ç–µ–π–∫ –¥–æ —Ä–∞–∑–≤—è–∑–∫–∏¬ª.",
            reply_markup=main_menu()
        )
        return

    # F) –ù–æ–≤–∞—è —Ü–µ–ª—å
    if step == "ask_goal_new":
        if txt.endswith("?"):
            return coach_and_reask(m.chat.id, txt, "–ó–∞–ø–∏—à–∏ —Ü–µ–ª—å –∫–∞–∫ *–∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ* (—á—Ç–æ –¥–µ–ª–∞–µ—à—å/–Ω–µ –¥–µ–ª–∞–µ—à—å).")
        data["goal_new"] = txt

        err_id = data.get("current_error_id")
        upsert_error_row(uid, err_id, {"positive_goal": txt})

        set_state(uid, "lesson1_error", "tote_goal", data)
        bot.send_message(m.chat.id, "–ü–µ—Ä–µ–π–¥—ë–º –∫ *TOTE*. –°–Ω–∞—á–∞–ª–∞ *Test 1*: —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫–æ—Ä–æ—Ç–∫–æ —Ü–µ–ª—å-–∫—Ä–∏—Ç–µ—Ä–∏–π –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 —Å–¥–µ–ª–∫–∏.")
        bot.send_message(m.chat.id, "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–í 3 —Å–ª–µ–¥—É—é—â–∏—Ö —Å–¥–µ–ª–∫–∞—Ö –Ω–µ –¥–≤–∏–≥–∞—é —Å—Ç–æ–ø/—Ç–µ–π–∫ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª.")
        return

    # G) TOTE goal
    if step == "tote_goal":
        data["tote_goal"] = txt
        err_id = data.get("current_error_id")
        upsert_error_row(uid, err_id, {"tote_goal": txt})

        set_state(uid, "lesson1_error", "tote_ops", data)
        bot.send_message(m.chat.id, "–û–ø–µ—Ä–∞—Ü–∏–∏ (*Operate*): –ø–µ—Ä–µ—á–∏—Å–ª–∏ 2‚Äì4 —à–∞–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ü–µ–ª—å (—á–µ–∫-–ª–∏—Å—Ç, –ø–∞—É–∑–∞, —Ç–∞–π–º–µ—Ä –∏ —Ç.–¥.).")
        return

    # H) TOTE ops
    if step == "tote_ops":
        data["tote_ops"] = txt
        err_id = data.get("current_error_id")
        upsert_error_row(uid, err_id, {"tote_ops": txt})

        set_state(uid, "lesson1_error", "tote_check", data)
        bot.send_message(m.chat.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ (*Test 2*): –∫–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ —Ü–µ–ª—å —É–¥–µ—Ä–∂–∞–Ω–∞? (–∫—Ä–∏—Ç–µ—Ä–∏–π ¬´–¥–∞/–Ω–µ—Ç¬ª, –Ω–∞ 3 —Å–¥–µ–ª–∫–∏).")
        return

    # I) TOTE check
    if step == "tote_check":
        data["tote_check"] = txt
        err_id = data.get("current_error_id")
        upsert_error_row(uid, err_id, {"tote_check": txt})

        set_state(uid, "lesson1_error", "tote_exit", data)
        bot.send_message(m.chat.id, "–í—ã—Ö–æ–¥ (*Exit*): —á—Ç–æ –ø–æ–¥–≤–µ–¥—ë—à—å –≤ –∏—Ç–æ–≥–∞—Ö? –ï—Å–ª–∏ ¬´–¥–∞¬ª ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ—à—å —É—Å–ø–µ—Ö. –ï—Å–ª–∏ ¬´–Ω–µ—Ç¬ª ‚Äî —á—Ç–æ –º–µ–Ω—è–µ—à—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ü–∏–∫–ª–µ?")
        return

    # J) TOTE exit -> —Ñ–∏–Ω–∞–ª —É—Ä–æ–∫–∞ 1
    if step == "tote_exit":
        data["tote_exit"] = txt
        err_id = data.get("current_error_id")
        upsert_error_row(uid, err_id, {"tote_exit": txt})

        # –º–∏–Ω–∏-—á–µ–∫–ª–∏—Å—Ç—ã
        checklist_pre = "- –ü—Ä–æ–≤–µ—Ä–∏–ª: —Å–µ—Ç–∞–ø 100%\n- –ü–∞—É–∑–∞ 10‚Äì20 —Å–µ–∫\n- –Ø –≤ —Ä–µ—Å—É—Ä—Å–µ\n- –ü–ª–∞–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç"
        checklist_post = "- –ù–µ –¥–≤–∏–≥–∞–ª —Å—Ç–æ–ø/—Ç–µ–π–∫\n- –í—ã–ø–æ–ª–Ω–∏–ª –ø–ª–∞–Ω\n- –ò—Ç–æ–≥ –∑–∞–ø–∏—Å–∞–Ω"

        upsert_error_row(uid, err_id, {"checklist_pre": checklist_pre, "checklist_post": checklist_post})

        # —Å–±—Ä–æ—Å —à–∞–≥–∞
        set_state(uid, "lesson1_error", None, data)
        bot.send_message(
            m.chat.id,
            "‚úÖ –£—Ä–æ–∫ 1 –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω.\n"
            "–ß–µ–∫-–ª–∏—Å—Ç—ã:\n*–ü–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º*\n" + checklist_pre + "\n\n*–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞*\n" + checklist_post,
            reply_markup=main_menu()
        )
        return

# ---------- FLASK / WEBHOOK ----------
app = Flask(__name__)
START_TS = time.time()
MAX_BODY = 1_000_000  # ~1MB

@app.get("/")
def root():
    return "OK"

@app.get("/health")
def health():
    return jsonify({
        "status":"ok",
        "time": datetime.utcnow().isoformat()+"Z",
        "uptime_sec": int(time.time()-START_TS),
        "db": "ok" if db_ok() else "fail"
    })

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    # —Å–µ–∫—Ä–µ—Ç + –ª–∏–º–∏—Ç —Ç–µ–ª–∞
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > MAX_BODY:
        abort(413)
    raw = request.get_data().decode("utf-8")
    try:
        update = Update.de_json(raw)
    except Exception:
        # TeleBot –æ–∂–∏–¥–∞–µ—Ç dict -> –∏—Å–ø–æ–ª—å–∑—É–µ–º json.loads
        update = Update.de_json(json.loads(raw))
    try:
        bot.process_new_updates([update])
    except Exception as e:
        log.exception(f"process_new_updates error: {e}")
    return "ok"

def install_webhook():
    # –°–Ω–∏–º–µ–º —Å—Ç–∞—Ä—ã–π –∏ –ø–æ—Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π —Å —Å–µ–∫—Ä–µ—Ç–æ–º
    try:
        bot.remove_webhook()
    except Exception as e:
        log.warning(f"remove_webhook warn: {e}")

    url = f"{PUBLIC_URL.rstrip('/')}/{WEBHOOK_PATH}"
    ok = bot.set_webhook(
        url=url,
        secret_token=TG_WEBHOOK_SECRET,
        allowed_updates=["message","callback_query"],
        drop_pending_updates=True,
        max_connections=40
    )
    if ok:
        log.info(f"Webhook set to {url}")
    else:
        log.error("Failed to set webhook")

if __name__ == "__main__":
    install_webhook()
    port = int(os.getenv("PORT", "10000"))
    log.info(f"Starting Flask on 0.0.0.0:{port}")
    app.run(host="0.0.0.0", port=port)
