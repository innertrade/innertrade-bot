# main.py
import os
import logging
from datetime import datetime, date

from flask import Flask
from telebot import TeleBot, types

from openai import OpenAI

from sqlalchemy import (
    create_engine, Integer, String, Date, DateTime, Text,
    Boolean, ForeignKey, select
)
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, Session, relationship

# ========= ENV =========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY     = os.getenv("OPENAI_API_KEY")
DATABASE_URL   = os.getenv("DATABASE_URL")

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets")
if not OPENAI_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets")
if not DATABASE_URL:
    raise RuntimeError("–ù–µ—Ç DATABASE_URL –≤ Secrets")

# ========= LOGS =========
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ========= OPENAI =========
client = OpenAI(api_key=OPENAI_KEY)

# ========= TELEGRAM =========
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# ========= DB =========
class Base(DeclarativeBase):
    pass

class User(Base):
    __tablename__ = "users"
    id: Mapped[int]             = mapped_column(Integer, primary_key=True, autoincrement=True)
    tg_id: Mapped[int]          = mapped_column(Integer, unique=True, index=True)
    username: Mapped[str | None]= mapped_column(String(64), nullable=True)
    first_seen: Mapped[datetime]= mapped_column(DateTime, default=datetime.utcnow)

    passport: Mapped["Passport | None"] = relationship(back_populates="user", uselist=False, cascade="all, delete-orphan")
    weekly:   Mapped[list["WeeklyPanel"]] = relationship(back_populates="user", cascade="all, delete-orphan")
    progress: Mapped[list["ProgressLog"]] = relationship(back_populates="user", cascade="all, delete-orphan")

class Passport(Base):
    __tablename__ = "passport"
    id: Mapped[int]      = mapped_column(Integer, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    # –ø–æ–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä; —Ä–∞—Å—à–∏—Ä–∏–º –ø–æ–∑–∂–µ)
    market: Mapped[str | None]     = mapped_column(String(120))
    style: Mapped[str | None]      = mapped_column(String(120))
    timeframe: Mapped[str | None]  = mapped_column(String(120))
    risk_rules: Mapped[str | None] = mapped_column(Text)
    notes: Mapped[str | None]      = mapped_column(Text)

    user: Mapped["User"] = relationship(back_populates="passport")

class WeeklyPanel(Base):
    __tablename__ = "weekly_panel"
    id: Mapped[int]      = mapped_column(Integer, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    week_start: Mapped[date] = mapped_column(Date)  # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    focus_node: Mapped[str]  = mapped_column(String(200))     # —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ (—É–∑–µ–ª/—Ç–µ–º–∞)
    plan: Mapped[str | None] = mapped_column(Text)            # –∫–ª—é—á–µ–≤—ã–µ —à–∞–≥–∏
    limits: Mapped[str | None]= mapped_column(Text)           # –ª–∏–º–∏—Ç—ã/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    retrospective: Mapped[str | None]= mapped_column(Text)    # –∫–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ

    user: Mapped["User"] = relationship(back_populates="weekly")

class ProgressLog(Base):
    __tablename__ = "progress_log"
    id: Mapped[int]      = mapped_column(Integer, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    day: Mapped[date]    = mapped_column(Date, index=True, default=date.today)
    done: Mapped[str | None]   = mapped_column(Text)        # —á—Ç–æ —Å–¥–µ–ª–∞–ª
    changes: Mapped[str | None]= mapped_column(Text)        # –∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω—ë—Å
    blockers: Mapped[str | None]= mapped_column(Text)       # —á—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç
    created_at: Mapped[datetime]= mapped_column(DateTime, default=datetime.utcnow)

    user: Mapped["User"] = relationship(back_populates="progress")

class State(Base):
    """
    –¢–∞–±–ª–∏—Ü–∞ ¬´—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞¬ª ‚Äî —Ö—Ä–∞–Ω–∏—Ç, –≤ –∫–∞–∫–æ–º —à–∞–≥–µ —Å–µ–π—á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    __tablename__ = "state"
    id: Mapped[int]      = mapped_column(Integer, primary_key=True, autoincrement=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("users.id"))
    flow: Mapped[str]    = mapped_column(String(40))   # 'passport' | 'weekly' | 'progress' | 'none'
    step: Mapped[int]    = mapped_column(Integer, default=0)
    payload: Mapped[str | None] = mapped_column(Text)  # –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –º–µ–∂–¥—É —à–∞–≥–∞–º–∏

engine = create_engine(DATABASE_URL, pool_pre_ping=True)
Base.metadata.create_all(engine)

# ========= HELPERS =========
def get_or_create_user(sess: Session, tg_id: int, username: str | None) -> User:
    user = sess.scalar(select(User).where(User.tg_id == tg_id))
    if not user:
        user = User(tg_id=tg_id, username=username)
        sess.add(user)
        sess.commit()
    return user

def set_state(sess: Session, user_id: int, flow: str, step: int = 0, payload: str | None = None):
    st = sess.scalar(select(State).where(State.user_id == user_id))
    if not st:
        st = State(user_id=user_id, flow=flow, step=step, payload=payload)
        sess.add(st)
    else:
        st.flow = flow
        st.step = step
        st.payload = payload
    sess.commit()

def clear_state(sess: Session, user_id: int):
    st = sess.scalar(select(State).where(State.user_id == user_id))
    if st:
        sess.delete(st)
        sess.commit()

def get_state(sess: Session, user_id: int) -> State | None:
    return sess.scalar(select(State).where(State.user_id == user_id))

def main_menu() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞"), types.KeyboardButton("üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"))
    kb.row(types.KeyboardButton("üóì –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏"), types.KeyboardButton("üßæ –ü–∞—Å–ø–æ—Ä—Ç"))
    kb.row(types.KeyboardButton("üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), types.KeyboardButton("üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"))
    kb.row(types.KeyboardButton("üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º"), types.KeyboardButton("üîÑ –°–±—Ä–æ—Å"))
    return kb

def send(chat_id: int, text: str):
    bot.send_message(chat_id, text, reply_markup=main_menu())

# ========= START / PING / RESET =========
@bot.message_handler(commands=['start'])
def cmd_start(m):
    with Session(engine) as sess:
        user = get_or_create_user(sess, m.from_user.id, m.from_user.username)
        clear_state(sess, user.id)
    send(m.chat.id,
         "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade.\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /ping /reset")

@bot.message_handler(commands=['ping'])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=['reset'])
def cmd_reset(m):
    with Session(engine) as sess:
        user = get_or_create_user(sess, m.from_user.id, m.from_user.username)
        clear_state(sess, user.id)
    send(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

# ========= INTENTS (–∫–Ω–æ–ø–∫–∏) =========
@bot.message_handler(func=lambda x: x.text in {
    "üßæ –ü–∞—Å–ø–æ—Ä—Ç", "üóì –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏", "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
    "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
    "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º", "üîÑ –°–±—Ä–æ—Å"
})
def on_menu(m):
    txt = m.text or ""
    uid = m.from_user.id

    if txt == "üîÑ –°–±—Ä–æ—Å":
        return cmd_reset(m)

    if txt == "üßæ –ü–∞—Å–ø–æ—Ä—Ç":
            # —Å—Ç–∞—Ä—Ç—É–µ–º –ø–∞—Å–ø–æ—Ä—Ç: –∑–∞–¥–∞—ë–º 1-–π –≤–æ–ø—Ä–æ—Å
            with Session(engine) as sess:
                user = get_or_create_user(sess, uid, m.from_user.username)
                set_state(sess, user.id, flow="passport", step=1)
            bot.send_message(m.chat.id, "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞.\n1/6) –ù–∞ –∫–∞–∫–æ–º —Ä—ã–Ω–∫–µ/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å? (–ø—Ä–∏–º–µ—Ä: –∞–∫—Ü–∏–∏ –°–®–ê, EURUSD, BTC, —Ñ—å—é—á–µ—Ä—Å—ã‚Ä¶)",
                             reply_markup=types.ReplyKeyboardRemove())
            return

    if txt == "üóì –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏":
        with Session(engine) as sess:
            user = get_or_create_user(sess, uid, m.from_user.username)
            set_state(sess, user.id, flow="weekly", step=1)
        bot.send_message(m.chat.id,
                         "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏. 1/4) –ö–∞–∫–æ–π —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏? (—É–∑–µ–ª/—Ç–µ–º–∞, –Ω–∞–ø—Ä.: ¬´–≤—Ö–æ–¥—ã –ø–æ –ø–ª–∞–Ω—É¬ª, ¬´—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ¬ª, ¬´MERCEDES –ø—Ä–∏ –æ—à–∏–±–∫–µ¬ª)",
                         reply_markup=types.ReplyKeyboardRemove())
        return

    if txt == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å":
        with Session(engine) as sess:
            user = get_or_create_user(sess, uid, m.from_user.username)
            set_state(sess, user.id, flow="progress", step=1)
        bot.send_message(m.chat.id,
                         "–î–Ω–µ–≤–Ω–æ–π —á–µ–∫-–∏–Ω. 1/3) –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å–¥–µ–ª–∞–ª –ø–æ Innertrade?",
                         reply_markup=types.ReplyKeyboardRemove())
        return

    # –û—Å—Ç–∞–ª—å–Ω–æ–µ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –≤ GPT (—Å–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã –¥–æ–ø–∏–ª–∏–º –ø–æ–∑–∂–µ)
    if txt == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞":
        bot.send_message(m.chat.id,
                         "–û–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –æ—à–∏–±–∫—É: —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –Ω–∞ –∫–∞–∫–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ/—Ç–∞–π–º—Ñ—Ä–µ–π–º–µ –∏ —á–µ–º –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å. –Ø –ø–æ–º–æ–≥—É —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å —Ä–∞–∑–±–æ—Ä –ø–æ MERCEDES.")
        return
    if txt == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é":
        bot.send_message(m.chat.id,
                         "–û–∫, –Ω–∞—á–Ω—ë–º –Ω–∞–±—Ä–æ—Å–æ–∫ –¢–°. –ù–∞–ø–∏—à–∏: —Ç–≤–æ–π —Ä—ã–Ω–æ–∫, —Ä–∞–±–æ—á–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã –∏ —á—Ç–æ —Å—á–∏—Ç–∞–µ—à—å —Å–≤–æ–∏–º ¬´–∫—Ä–∞–µ–º¬ª (edge).")
        return
    if txt == "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã":
        bot.send_message(m.chat.id,
                         "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —Å–∫–æ—Ä–æ –ø–æ–¥—à—å—é –≤ –º–µ–Ω—é (—Ç–µ–æ—Ä–∏—è MERCEDES/TOTE, —á–µ–∫-–ª–∏—Å—Ç—ã, —à–∞–±–ª–æ–Ω—ã).")
        return
    if txt == "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º":
        bot.send_message(m.chat.id, "–Ø –∑–¥–µ—Å—å. –° —á–µ–º –∏–º–µ–Ω–Ω–æ –ø–æ–º–æ—á—å?")
        return

# ========= TEXT FLOW HANDLER =========
@bot.message_handler(func=lambda _: True)
def on_text(m):
    text = (m.text or "").strip()
    uid  = m.from_user.id

    with Session(engine) as sess:
        user = get_or_create_user(sess, uid, m.from_user.username)
        st = get_state(sess, user.id)

        if st and st.flow == "passport":
            return handle_passport_step(m, sess, user, st, text)
        if st and st.flow == "weekly":
            return handle_weekly_step(m, sess, user, st, text)
        if st and st.flow == "progress":
            return handle_progress_step(m, sess, user, st, text)

    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π GPT-–æ—Ç–≤–µ—Ç (–æ–±—â–∏–π –ø–æ–º–æ—â–Ω–∏–∫)
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.4,
            messages=[
                {"role":"system","content":"–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É Innertrade. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–ø–æ–º–∏–Ω–∞–µ—Ç –æ—à–∏–±–∫–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞, –º—è–≥–∫–æ –Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ —Ä–∞–∑–±–æ—Ä—É MERCEDES/TOTE."},
                {"role":"user","content": text}
            ]
        )
        reply = (resp.choices[0].message.content or "").strip()
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send(m.chat.id, reply)

# ========= PASSPORT FLOW =========
def handle_passport_step(m, sess: Session, user: User, st: State, text: str):
    # —Å–æ–±–∏—Ä–∞–µ–º –ø–æ —à–∞–≥–∞–º 6 –æ—Ç–≤–µ—Ç–æ–≤
    if st.step == 1:
        set_state(sess, user.id, "passport", 2, payload=text)
        return bot.send_message(m.chat.id, "2/6) –¢–≤–æ–π —Å—Ç–∏–ª—å/–ø–æ–¥—Ö–æ–¥ (—Å–∫–∞–ª—å–ø–∏–Ω–≥, –¥–µ–π—Ç—Ä–µ–π–¥–∏–Ω–≥, —Å–≤–∏–Ω–≥‚Ä¶)?")
    if st.step == 2:
        payload = st.payload or ""
        payload += f"\nmarket: {text}"
        set_state(sess, user.id, "passport", 3, payload=payload)
        return bot.send_message(m.chat.id, "3/6) –†–∞–±–æ—á–∏–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã?")
    if st.step == 3:
        payload = st.payload or ""
        payload += f"\nstyle: {text}"
        set_state(sess, user.id, "passport", 4, payload=payload)
        return bot.send_message(m.chat.id, "4/6) –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ä–∏—Å–∫–∞ (—Å—Ç–æ–ø, % –Ω–∞ —Å–¥–µ–ª–∫—É‚Ä¶)?")
    if st.step == 4:
        payload = st.payload or ""
        payload += f"\ntimeframe: {text}"
        set_state(sess, user.id, "passport", 5, payload=payload)
        return bot.send_message(m.chat.id, "5/6) –û—Å–æ–±—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∑–∞–ø—Ä–µ—Ç—ã, —Å–∏–≥–Ω–∞–ª—ã —Ç—Ä–µ–≤–æ–≥–∏)?")
    if st.step == 5:
        payload = (st.payload or "") + f"\nrisk_rules: {text}"
        set_state(sess, user.id, "passport", 6, payload=payload)
        return bot.send_message(m.chat.id, "6/6) –õ—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏?")
    if st.step == 6:
        payload = (st.payload or "") + f"\nnotes: {text}"

        # —Ä–∞–∑–±–æ—Ä payload –≤ dict
        data = {"market":None,"style":None,"timeframe":None,"risk_rules":None,"notes":None}
        for line in payload.splitlines():
            if ":" in line:
                k,v = line.split(":",1)
                k=k.strip(); v=v.strip()
                if k in data: data[k]=v

        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å
        pas = sess.scalar(select(Passport).where(Passport.user_id == user.id))
        if not pas:
            pas = Passport(user_id=user.id, **data)
            sess.add(pas)
        else:
            pas.market = data["market"]
            pas.style  = data["style"]
            pas.timeframe = data["timeframe"]
            pas.risk_rules= data["risk_rules"]
            pas.notes = data["notes"]
        sess.commit()
        clear_state(sess, user.id)
        return send(m.chat.id, "‚úÖ –ü–∞—Å–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.\n–í–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é.")

# ========= WEEKLY PANEL FLOW =========
def monday_of(dt: date) -> date:
    return dt if dt.weekday()==0 else (dt.fromisocalendar(dt.isocalendar().year, dt.isocalendar().week, 1))

def handle_weekly_step(m, sess: Session, user: User, st: State, text: str):
    if st.step == 1:
        set_state(sess, user.id, "weekly", 2, payload=f"focus:{text}")
        return bot.send_message(m.chat.id, "2/4) –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é (3‚Äì5 –∫–æ—Ä–æ—Ç–∫–∏—Ö —à–∞–≥–æ–≤):")
    if st.step == 2:
        payload = (st.payload or "") + f"\nplan:{text}"
        set_state(sess, user.id, "weekly", 3, payload=payload)
        return bot.send_message(m.chat.id, "3/4) –õ–∏–º–∏—Ç—ã/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–≤—Ä–µ–º—è, —Ä–∏—Å–∫, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫):")
    if st.step == 3:
        payload = (st.payload or "") + f"\nlimits:{text}"
        set_state(sess, user.id, "weekly", 4, payload=payload)
        return bot.send_message(m.chat.id, "4/4) –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–∞ –ø—Ä–æ—à–ª–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞ (—á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ/–Ω–µ—Ç):")
    if st.step == 4:
        payload = (st.payload or "") + f"\nretro:{text}"
        # —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        data = {"focus_node":"","plan":"","limits":"","retrospective":""}
        for line in payload.splitlines():
            if ":" in line:
                k,v = line.split(":",1)
                k=k.strip(); v=v.strip()
                if k=="focus": data["focus_node"]=v
                if k=="plan":  data["plan"]=v
                if k=="limits":data["limits"]=v
                if k=="retro": data["retrospective"]=v

        week = monday_of(date.today())
        # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
        wp = sess.scalar(select(WeeklyPanel).where(WeeklyPanel.user_id==user.id, WeeklyPanel.week_start==week))
        if not wp:
            wp = WeeklyPanel(user_id=user.id, week_start=week, **data)
            sess.add(wp)
        else:
            wp.focus_node = data["focus_node"]
            wp.plan = data["plan"]
            wp.limits = data["limits"]
            wp.retrospective = data["retrospective"]
        sess.commit()
        clear_state(sess, user.id)
        return send(m.chat.id, "‚úÖ –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –£–¥–∞—á–Ω–æ–π –Ω–µ–¥–µ–ª–∏!")

# ========= PROGRESS FLOW =========
def handle_progress_step(m, sess: Session, user: User, st: State, text: str):
    if st.step == 1:
        set_state(sess, user.id, "progress", 2, payload=f"done:{text}")
        return bot.send_message(m.chat.id, "2/3) –ö–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–Ω—ë—Å (–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—É—Ä—Å–∞/–±–æ—Ç–∞/–¢–°)?")
    if st.step == 2:
        payload = (st.payload or "") + f"\nchanges:{text}"
        set_state(sess, user.id, "progress", 3, payload=payload)
        return bot.send_message(m.chat.id, "3/3) –ß—Ç–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç/–º–µ—à–∞–µ—Ç?")
    if st.step == 3:
        payload = (st.payload or "") + f"\nblockers:{text}"
        data = {"done":"","changes":"","blockers":""}
        for line in payload.splitlines():
            if ":" in line:
                k,v = line.split(":",1)
                k=k.strip(); v=v.strip()
                if k in data: data[k]=v

        # –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–µ–Ω—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
        today = date.today()
        pl = sess.scalar(select(ProgressLog).where(ProgressLog.user_id==user.id, ProgressLog.day==today))
        if not pl:
            pl = ProgressLog(user_id=user.id, day=today, **data)
            sess.add(pl)
        else:
            pl.done = data["done"]; pl.changes = data["changes"]; pl.blockers = data["blockers"]
        sess.commit()
        clear_state(sess, user.id)
        return send(m.chat.id, "‚úÖ –î–Ω–µ–≤–Ω–æ–π —á–µ–∫-–∏–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –°–ø–∞—Å–∏–±–æ!")

# ========= KEEPALIVE =========
app = Flask(__name__)

@app.get("/")
def home():
    return "Innertrade bot is up"

@app.get("/health")
def health():
    return "pong"

if __name__ == "__main__":
    # –≤–∞–∂–Ω–æ: –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å reply_to_message_id, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´—Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å¬ª
    logging.info("Starting keepalive web server‚Ä¶")
    from threading import Thread
    def run_app():
        app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
    Thread(target=run_app, daemon=True).start()

    logging.info("Starting polling‚Ä¶")
    bot.remove_webhook()
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
