import os
import logging
from datetime import datetime
from flask import Flask
import telebot
from telebot import types
from openai import OpenAI

# ====== ENV ======
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY     = os.getenv("OPENAI_API_KEY")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets")
if not OPENAI_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets")

# ====== OpenAI (–Ω–æ–≤—ã–π SDK) ======
client = OpenAI(api_key=OPENAI_KEY)

# ====== –õ–æ–≥–∏ ======
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("innertrade")

# ====== Flask keepalive ======
app = Flask(__name__)

@app.get("/")
def root():
    return "Innertrade bot OK"

@app.get("/health")
def health():
    return "pong"

# ====== Telegram bot ======
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–Ω–∏–º–µ–º –≤–µ–±—Ö—É–∫ (–º—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ polling)
try:
    bot.remove_webhook()
    log.info("Webhook removed (ok)")
except Exception as e:
    log.warning(f"Webhook remove warn: {e}")

# –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ –≤ RAM (–ø–µ—Ä—Å–∏—Å—Ç –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∫—Ä—É—Ç–∏–º –∫ –ë–î)
history = {}  # uid -> [{"role": "...", "content": "..."}]

def ask_gpt(uid: int, text: str) -> str:
    msgs = history.setdefault(uid, [])
    msgs.append({"role": "user", "content": text})

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.4,
        messages=[
            # –õ—ë–≥–∫–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞—Ä–∫–∞—Å, —á—Ç–æ–±—ã GPT –¥–µ—Ä–∂–∞–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
            {"role": "system", "content":
             "–¢—ã –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade. –ö–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é, \
–≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–π, –ø–æ–º–æ–≥–∞–π, –Ω–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç—ã –ø—Ä–æ –µ–≥–æ —Å–¥–µ–ª–∫–∏."}
        ] + msgs
    )
    reply = (resp.choices[0].message.content or "").strip()
    msgs.append({"role": "assistant", "content": reply})
    return reply

def send_long(chat_id, text, reply_to=None):
    MAX = 3500
    for i in range(0, len(text), MAX):
        bot.send_message(chat_id, text[i:i+MAX], reply_to_message_id=reply_to if i == 0 else None)

def main_keyboard():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("–û—à–∏–±–∫–∞"), types.KeyboardButton("–°—Ç—Ä–∞—Ç–µ–≥–∏—è"), types.KeyboardButton("–ü–æ–≥–æ–≤–æ—Ä–∏–º"))
    kb.row(types.KeyboardButton("–ü–∞—Å–ø–æ—Ä—Ç"), types.KeyboardButton("–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏"))
    kb.row(types.KeyboardButton("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"), types.KeyboardButton("–ü—Ä–æ–≥—Ä–µ—Å—Å"), types.KeyboardButton("–°–±—Ä–æ—Å"))
    return kb

# ====== /start ======
@bot.message_handler(commands=['start'])
def cmd_start(m):
    uid = m.from_user.id
    history[uid] = []
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade.\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=main_keyboard()
    )

# ====== /ping ======
@bot.message_handler(commands=['ping'])
def cmd_ping(m):
    bot.reply_to(m, "pong")

# ====== /reset ======
@bot.message_handler(commands=['reset'])
def cmd_reset(m):
    history[m.from_user.id] = []
    bot.reply_to(m, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.", reply_markup=main_keyboard())

# ====== –•–µ–ª–ø–µ—Ä—ã-–æ—Ç–≤–µ—Ç—ã –Ω–∞ –∂—ë—Å—Ç–∫–∏–µ –∫–Ω–æ–ø–∫–∏ ======
def reply_passport_intro() -> str:
    return (
        "<b>–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞</b>\n"
        "–û—Ç–≤–µ—Ç—å –ø–æ –ø—É–Ω–∫—Ç–∞–º, –º–æ–∂–Ω–æ —Å–ø–∏—Å–∫–æ–º 1‚Äì6:\n\n"
        "1) –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å?\n"
        "2) –¢–∞–π–º—Ñ—Ä–µ–π–º—ã (—Ä–∞–±–æ—á–∏–π / —Å—Ç–∞—Ä—à–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç)?\n"
        "3) –ë–∞–∑–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ (—Ç—Ä–µ–Ω–¥/—Å—Ä–µ–¥–Ω–∏–π/–∫–æ–Ω—Ç—Ä—Ç—Ä–µ–Ω–¥), —Å—Ç–∏–ª—å (–¥–µ–π—Ç—Ä–µ–π–¥/—Å–≤–∏–Ω–≥)?\n"
        "4) –†–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å (—Ä–∏—Å–∫–∏ –Ω–∞ —Å–¥–µ–ª–∫—É/–¥–µ–Ω—å, –ø—Ä–æ—Å–∞–¥–∫–∞-–ª–∏–º–∏—Ç—ã)?\n"
        "5) –ö–ª—é—á–µ–≤—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã —Å—Ç—Ä–µ—Å—Å–∞ (—Ç–≤–æ–∏ ¬´—Å–∏–≥–Ω–∞–ª—ã —Ç—Ä–µ–≤–æ–≥–∏¬ª)?\n"
        "6) –†–∏—Ç—É–∞–ª—ã –¥–æ/–≤–æ –≤—Ä–µ–º—è/–ø–æ—Å–ª–µ —Å–µ—Å—Å–∏–∏ (–∫–æ—Ä–æ—Ç–∫–æ)."
    )

def reply_week_panel_template() -> str:
    today = datetime.utcnow().strftime('%d.%m')
    return (
        f"<b>–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏</b> (–Ω–µ–¥–µ–ª—è –æ—Ç {today})\n"
        "–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ 1‚Äì5:\n\n"
        "1) <b>–§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ (—É–∑–µ–ª)</b>: –æ–¥–Ω–∞ —Ç–µ–º–∞/–æ—à–∏–±–∫–∞/–Ω–∞–≤—ã–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–Ω–µ –ø–µ—Ä–µ—Å–∏–∂–∏–≤–∞—Ç—å —Å—Ç–æ–ø¬ª).\n"
        "2) <b>–õ–∏–º–∏—Ç—ã</b>: —Ä–∏—Å–∫ –Ω–∞ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é, –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–æ–ø, –º–∞–∫—Å. —á–∏—Å–ª–æ —Å–¥–µ–ª–æ–∫.\n"
        "3) <b>–†–∏—Ç—É–∞–ª—ã</b>: —á–µ–∫ –≤—Ö–æ–¥–∞, –¥—ã—Ö–∞–Ω–∏–µ, –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å—Ç–æ–ø–∞, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä.\n"
        "4) <b>–ü–ª–∞–Ω</b>: 2‚Äì4 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é (—á—Ç–æ –∏ –∫–æ–≥–¥–∞ –¥–µ–ª–∞–µ—à—å).\n"
        "5) <b>–ú–∏–Ω–∏-—Ä–µ—Ç—Ä–æ</b> (–≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏): 3 —Ñ–∞–∫—Ç–∞ ‚Üí 1 –≤—ã–≤–æ–¥ ‚Üí 1 —É–ª—É—á—à–µ–Ω–∏–µ.\n\n"
        "–ì–æ—Ç–æ–≤? –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç—ã –ø–æ–¥—Ä—è–¥ (1‚Äì5)."
    )

def reply_error_intro() -> str:
    return (
        "<b>–†–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏ (–º–∏–Ω–∏-MERCEDES + TOTE)</b>\n"
        "–û—Ç–ø—Ä–∞–≤—å 1‚Äì6:\n"
        "1) –°–∏—Ç—É–∞—Ü–∏—è/–∫–æ–Ω—Ç–µ–∫—Å—Ç (—á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?)\n"
        "2) –ú—ã—Å–ª–∏/–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ (M)\n"
        "3) –≠–º–æ—Ü–∏–∏/—Ñ–∏–∑–∏–æ–ª–æ–≥–∏—è (E)\n"
        "4) –†–µ–∞–∫—Ü–∏–∏/–¥–µ–π—Å—Ç–≤–∏—è (R/C)\n"
        "5) –†–µ–∑—É–ª—å—Ç–∞—Ç (S)\n"
        "6) TOTE: —Ü–µ–ª—å ‚Üí —Ç–µ—Å—Ç ‚Üí –æ–ø–µ—Ä–∞—Ü–∏—è ‚Üí –≤—ã—Ö–æ–¥ (—á—Ç–æ –º–µ–Ω—è–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑?)"
    )

def reply_strategy_intro() -> str:
    return (
        "<b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è/–¢–°</b>\n"
        "–î–∞–≤–∞–π –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤—É:\n"
        "1) –ü–æ–¥—Ö–æ–¥ –∏ —Ä—ã–Ω–æ–∫ (—á—Ç–æ, –≥–¥–µ, –∫–æ–≥–¥–∞)\n"
        "2) –í—Ö–æ–¥: —É—Å–ª–æ–≤–∏—è/—Å–∏–≥–Ω–∞–ª—ã\n"
        "3) –°—Ç–æ–ø –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n"
        "4) –í—ã—Ö–æ–¥/—Ç–∞—Ä–≥–µ—Ç—ã\n"
        "5) –†–∏—Å–∫ (–Ω–∞ —Å–¥–µ–ª–∫—É/–¥–µ–Ω—å)\n"
        "–û—Ç–≤–µ—Ç—å 1‚Äì5 ‚Äî —Å–¥–µ–ª–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¢–°."
    )

def reply_materials_hint() -> str:
    return (
        "<b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã Innertrade</b>\n"
        "‚Ä¢ MERCEDES –∏ TOTE ‚Äî –∫—Ä–∞—Ç–∫–∞—è —Ç–µ–æ—Ä–∏—è\n"
        "‚Ä¢ –ê—Ä—Ö–µ—Ç–∏–ø—ã/—Ä–æ–ª–∏ —Ç—Ä–µ–π–¥–µ—Ä–∞ ‚Äî —Ç–∞–±–ª–∏—Ü–∞\n"
        "‚Ä¢ –°–±–æ—Ä–∫–∞ –¢–°: –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä + —á–µ–∫-–ª–∏—Å—Ç—ã\n"
        "‚Ä¢ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç: —É—Ä–æ–≤–Ω–∏ –∏ –ª–∏–º–∏—Ç—ã\n"
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å: ¬´mercedes¬ª, ¬´tote¬ª, ¬´–∞—Ä—Ö–µ—Ç–∏–ø—ã¬ª, ¬´–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¢–°¬ª, ¬´—Ä–∏—Å–∫¬ª."
    )

def reply_progress_hint() -> str:
    return (
        "<b>–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å</b>\n"
        "–ú–æ–≥—É –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ —É–∂–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ —Å–µ—Å—Å–∏—é (–æ—à–∏–±–∫–∏/—à–∞–±–ª–æ–Ω—ã/–ø–ª–∞–Ω—ã).\n"
        "–ù–∞–ø–∏—à–∏: ¬´–ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å¬ª –∏–ª–∏ —É—Ç–æ—á–Ω–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–≤–µ—Å—Ç–∏."
    )

# ====== –ö–Ω–æ–ø–∫–∏ (—Å—Ç—Ä–æ–≥–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç—É) ======
BUTTONS = {
    "–û—à–∏–±–∫–∞": "ERROR",
    "–°—Ç—Ä–∞—Ç–µ–≥–∏—è": "STRAT",
    "–ü–æ–≥–æ–≤–æ—Ä–∏–º": "CHAT",
    "–ü–∞—Å–ø–æ—Ä—Ç": "PASSPORT",
    "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏": "WEEK",
    "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": "MATS",
    "–ü—Ä–æ–≥—Ä–µ—Å—Å": "PROGRESS",
    "–°–±—Ä–æ—Å": "RESET_BTN",
}

@bot.message_handler(func=lambda m: (m.text or "").strip() in BUTTONS.keys())
def on_buttons(m):
    uid = m.from_user.id
    text = (m.text or "").strip()
    kind = BUTTONS[text]
    log.info(f"Button pressed: {text} ‚Üí {kind}")

    if kind == "RESET_BTN":
        history[uid] = []
        bot.reply_to(m, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=main_keyboard())
        return

    if kind == "PASSPORT":
        send_long(m.chat.id, reply_passport_intro(), reply_to=m.message_id)
        return

    if kind == "WEEK":
        send_long(m.chat.id, reply_week_panel_template(), reply_to=m.message_id)
        return

    if kind == "ERROR":
        send_long(m.chat.id, reply_error_intro(), reply_to=m.message_id)
        return

    if kind == "STRAT":
        send_long(m.chat.id, reply_strategy_intro(), reply_to=m.message_id)
        return

    if kind == "MATS":
        send_long(m.chat.id, reply_materials_hint(), reply_to=m.message_id)
        return

    if kind == "PROGRESS":
        send_long(m.chat.id, reply_progress_hint(), reply_to=m.message_id)
        return

    # Fallback ‚Äì –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ
    try:
        reply = ask_gpt(uid, text)
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply, reply_to=m.message_id)

# ====== –õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç ‚Üí GPT ======
@bot.message_handler(func=lambda _: True)
def on_text(m):
    uid = m.from_user.id
    try:
        reply = ask_gpt(uid, m.text or "")
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    # –ë–µ–∑ ¬´reply_to¬ª, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ ¬´–æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è¬ª
    send_long(m.chat.id, reply)

if __name__ == "__main__":
    log.info("Starting keepalive web server‚Ä¶")
    # Render –±—É–¥–µ—Ç –∑–≤–∞—Ç—å /health –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏; Flask —Å–ª—É—à–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    import threading
    def run_flask():
        app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")), debug=False)
    threading.Thread(target=run_flask, daemon=True).start()

    log.info("Starting polling‚Ä¶")
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
