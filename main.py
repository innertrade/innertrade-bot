import os
import logging
import re
from flask import Flask, jsonify
from telebot import TeleBot, types
from openai import OpenAI
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ---------- ENV ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL   = os.getenv("DATABASE_URL")

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets")
if not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets")

# ---------- OPENAI ----------
client = OpenAI(api_key=OPENAI_API_KEY)

# ---------- DB (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----------
engine = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True)
        with engine.connect() as conn:
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS user_state (
                user_id BIGINT PRIMARY KEY,
                intent TEXT,
                data JSONB
            );
            """))
        logging.info("DB connected & migrated")
    except OperationalError as e:
        logging.warning(f"DB not available yet: {e}")
        engine = None
else:
    logging.info("DATABASE_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ë–î")

def save_state(user_id: int, intent: str, data: dict | None = None):
    if not engine:
        return
    with engine.begin() as conn:
        conn.execute(text("""
            INSERT INTO user_state (user_id, intent, data)
            VALUES (:uid, :intent, COALESCE(:data, '{}'::jsonb))
            ON CONFLICT (user_id) DO UPDATE
            SET intent = EXCLUDED.intent,
                data   = EXCLUDED.data
        """), {"uid": user_id, "intent": intent, "data": data})

# ---------- –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê ----------
EMOJI_RE = re.compile(r"[\u2600-\u27BF\U0001F300-\U0001FAFF\uFE0F]")  # —ç–º–æ–¥–∑–∏ + var selector

def norm(s: str) -> str:
    if not s:
        return ""
    s = EMOJI_RE.sub("", s)          # —É–±—Ä–∞—Ç—å —ç–º–æ–¥–∑–∏/–≤–∞—Ä–∏–∞–Ω—Ç-—Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    s = s.replace("—ë", "–µ")
    s = s.strip().lower()
    return s

# –ö–∞—Ä—Ç–∞ –∏–Ω—Ç–µ–Ω—Ç–æ–≤: –∫–ª—é—á–∏ ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ—Ä–∞–∑ –±–µ–∑ —ç–º–æ–¥–∑–∏
INTENT_ALIASES = {
    "error": [
        "—É –º–µ–Ω—è –æ—à–∏–±–∫–∞", "–æ—à–∏–±–∫–∞", "—Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏", "mercedes", "–º–µ—Ä—Å–µ–¥–µ—Å", "mercedes tote", "tote"
    ],
    "strategy": [
        "—Ö–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é", "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è", "—Å–æ–±—Ä–∞—Ç—å —Ç—Å", "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Ç—Å"
    ],
    "passport": [
        "–ø–∞—Å–ø–æ—Ä—Ç", "–ø–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞", "–ø—Ä–æ—Ñ–∏–ª—å", "–∞–Ω–∫–µ—Ç–∞"
    ],
    "week_panel": [
        "–ø–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏", "–Ω–µ–¥–µ–ª—è", "—Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏", "weekly"
    ],
    "panic": [
        "—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "–ø–æ–ø–ª—ã–ª", "–ø–∞–Ω–∏–∫–∞", "—Å—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª"
    ],
    "start_help": [
        "–Ω–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å", "—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å", "–Ω–∞—á–∞—Ç—å", "–ø–æ–º–æ–≥–∏ –Ω–∞—á–∞—Ç—å"
    ],
}

def detect_intent(txt: str) -> str | None:
    t = norm(txt)
    for intent, variants in INTENT_ALIASES.items():
        for v in variants:
            if t == v or t.startswith(v):
                return intent
    return None

# ---------- TELEGRAM ----------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

@bot.message_handler(commands=["start", "menu", "reset"])
def cmd_start(m):
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*.\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=main_menu()
    )
    save_state(m.from_user.id, intent="idle")

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

# ---------- –•–ï–ù–î–õ–ï–†–´ –° –Ø–í–ù–´–ú–ò –ö–ù–û–ü–ö–ê–ú–ò (–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π) ----------
@bot.message_handler(func=lambda msg: norm(msg.text) in [norm("–£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")])
def intent_error_btn(m): return intent_error(m)

@bot.message_handler(func=lambda msg: norm(msg.text) in [norm("–•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")])
def intent_strategy_btn(m): return intent_strategy(m)

@bot.message_handler(func=lambda msg: norm(msg.text) in [norm("–ü–∞—Å–ø–æ—Ä—Ç")])
def intent_passport_btn(m): return intent_passport(m)

@bot.message_handler(func=lambda msg: norm(msg.text) in [norm("–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")])
def intent_week_panel_btn(m): return intent_week_panel(m)

@bot.message_handler(func=lambda msg: norm(msg.text) in [norm("–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")])
def intent_panic_btn(m): return intent_panic(m)

@bot.message_handler(func=lambda msg: norm(msg.text) in [norm("–ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")])
def intent_start_help_btn(m): return intent_start_help(m)

# ---------- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ò–ù–¢–ï–ù–¢–û–í ----------
def intent_error(m):
    save_state(m.from_user.id, "error")
    bot.send_message(
        m.chat.id,
        "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º —á–µ—Ä–µ–∑ *MERCEDES + TOTE*.\n\n"
        "*M* –ú–æ—Ç–∏–≤–∞—Ü–∏—è?\n*E* –≠–º–æ—Ü–∏–∏?\n*R* –†–µ–∑—É–ª—å—Ç–∞—Ç?\n*C* –ö–æ–Ω—Ç–µ–∫—Å—Ç?\n*E* –≠—Ñ—Ñ–µ–∫—Ç?\n*D* –î–µ–π—Å—Ç–≤–∏—è?\n*S* –°—Ç—Ä–∞—Ç–µ–≥–∏—è?\n\n"
        "*T* Test ‚Äî —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫?\n*O* Operate ‚Äî —á—Ç–æ —Å–¥–µ–ª–∞–ª?\n*T* Test ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç?\n*E* Evolve ‚Äî —á—Ç–æ –∏–∑–º–µ–Ω–∏—à—å?",
        reply_markup=main_menu()
    )

def intent_strategy(m):
    save_state(m.from_user.id, "strategy")
    bot.send_message(
        m.chat.id,
        "–û–∫, —Å–æ–±–∏—Ä–∞–µ–º –¢–° –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É:\n"
        "1) –¶–µ–ª–∏\n2) –°—Ç–∏–ª—å (–¥–Ω–µ–≤–Ω–æ–π/—Å–≤–∏–Ω–≥/–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π)\n"
        "3) –†—ã–Ω–∫–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n4) –ü—Ä–∞–≤–∏–ª–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞\n"
        "5) –†–∏—Å–∫ (%, —Å—Ç–æ–ø)\n6) –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n7) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏—Å—Ç–æ—Ä–∏—è/–¥–µ–º–æ)",
        reply_markup=main_menu()
    )

def intent_passport(m):
    save_state(m.from_user.id, "passport")
    bot.send_message(
        m.chat.id,
        "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. 1/6) –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å?",
        reply_markup=main_menu()
    )

def intent_week_panel(m):
    save_state(m.from_user.id, "week_panel")
    bot.send_message(
        m.chat.id,
        "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏:\n‚Ä¢ –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n‚Ä¢ –ü–ª–∞–Ω (3 —à–∞–≥–∞)\n‚Ä¢ –õ–∏–º–∏—Ç—ã\n‚Ä¢ –†–∏—Ç—É–∞–ª—ã\n‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏",
        reply_markup=main_menu()
    )

def intent_panic(m):
    save_state(m.from_user.id, "panic")
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–æ–º\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
        "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä (—á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–±–∏–ª–æ)\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )

def intent_start_help(m):
    save_state(m.from_user.id, "start_help")
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω)\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°\n"
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º ‚Äî –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏?",
        reply_markup=main_menu()
    )

# ---------- ROUTER –ü–û –¢–ï–ö–°–¢–£ ----------
@bot.message_handler(content_types=["text"])
def router(m):
    # –ª–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    logging.info(f"Got text: {repr(m.text)} from {m.from_user.id}")
    intent = detect_intent(m.text or "")
    if intent == "error":        return intent_error(m)
    if intent == "strategy":     return intent_strategy(m)
    if intent == "passport":     return intent_passport(m)
    if intent == "week_panel":   return intent_week_panel(m)
    if intent == "panic":        return intent_panic(m)
    if intent == "start_help":   return intent_start_help(m)

    # —Ñ–æ–ª–±—ç–∫
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–Ω—è–ª. –ß—Ç–æ–±—ã –±—ã–ª–æ –±—ã—Å—Ç—Ä–µ–µ, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /menu.",
        reply_markup=main_menu()
    )

# ---------- KEEPALIVE –¥–ª—è Render ----------
app = Flask(__name__)

@app.route("/")
def root():
    return "OK v5"

@app.route("/health")
def health():
    return jsonify({"status": "ok"})

def start_polling():
    try:
        bot.remove_webhook()
        logging.info("Webhook removed (ok)")
    except Exception as e:
        logging.warning(f"Webhook remove warn: {e}")
    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(timeout=30, long_polling_timeout=30, skip_pending=True)

if __name__ == "__main__":
    import threading
    t = threading.Thread(target=start_polling, daemon=True)
    t.start()
    port = int(os.getenv("PORT", "10000"))
    logging.info("Starting keepalive web server‚Ä¶")
    app.run(host="0.0.0.0", port=port)
