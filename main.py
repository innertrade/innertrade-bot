import os
import logging
import telebot
from telebot import types
from openai import OpenAI
from flask import Flask
from threading import Thread

# ====== –ö–ª—é—á–∏ –∏–∑ Secrets ======
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets")
if not OPENAI_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets")

# OpenAI client (–Ω–æ–≤—ã–π SDK)
client = OpenAI(api_key=OPENAI_KEY)

# ====== –õ–æ–≥–∏ ======
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# ====== –°–Ω—è—Ç—å webhook –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ======
try:
    bot.remove_webhook()
    logging.info("Webhook removed (ok)")
except Exception as e:
    logging.warning(f"Webhook remove warn: {e}")

# ====== –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ ======
history = {}   # uid -> [{"role":"user"/"assistant","content":"..."}]
HARD_LIMIT = 24

def _trim(msgs):
    if len(msgs) > HARD_LIMIT:
        del msgs[:-HARD_LIMIT]

def ask_gpt(uid: int, text: str) -> str:
    msgs = history.setdefault(uid, [])
    msgs.append({"role": "user", "content": text})
    _trim(msgs)
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.5,
            messages=msgs
        )
        reply = (resp.choices[0].message.content or "").strip()
    except Exception as e:
        logging.exception("OpenAI error")
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    msgs.append({"role": "assistant", "content": reply})
    _trim(msgs)
    return reply

def send_long(chat_id: int, text: str):
    MAX = 3500
    for i in range(0, len(text), MAX):
        bot.send_message(chat_id, text[i:i+MAX])

# ====== –ö–æ–º–∞–Ω–¥—ã ======
@bot.message_handler(commands=['start'])
def cmd_start(m):
    uid = m.from_user.id
    history[uid] = []
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("–ú–æ–¥—É–ª—å 1"), types.KeyboardButton("–ú–æ–¥—É–ª—å 2"))
    kb.row(types.KeyboardButton("–ß–µ–∫-–ª–∏—Å—Ç"), types.KeyboardButton("–§–∏–∫—Å–∞—Ü–∏—è"), types.KeyboardButton("–°–±—Ä–æ—Å"))
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade.\n"
        "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=kb
    )
    return

@bot.message_handler(commands=['ping'])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong ‚úÖ")
    return  # –∫–ª—é—á–µ–≤–æ–µ: –Ω–µ –¥–∞—ë–º –ø—Ä–æ–π—Ç–∏ –≤ –æ–±—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä

@bot.message_handler(commands=['reset'])
def cmd_reset(m):
    history[m.from_user.id] = []
    bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")
    return

# ====== –ö–Ω–æ–ø–∫–∏ ======
@bot.message_handler(func=lambda x: x.text in {"–ú–æ–¥—É–ª—å 1","–ú–æ–¥—É–ª—å 2","–ß–µ–∫-–ª–∏—Å—Ç","–§–∏–∫—Å–∞—Ü–∏—è","–°–±—Ä–æ—Å"})
def on_buttons(m):
    uid = m.from_user.id
    t = (m.text or "").strip()
    if t == "–°–±—Ä–æ—Å":
        history[uid] = []
        bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞–∂–º–∏ ¬´–ú–æ–¥—É–ª—å 1¬ª –∏–ª–∏ ¬´–ú–æ–¥—É–ª—å 2¬ª.")
        return
    alias = {"–ú–æ–¥—É–ª—å 1":"–ì–æ—Ç–æ–≤", "–ú–æ–¥—É–ª—å 2":"–¢–°", "–ß–µ–∫-–ª–∏—Å—Ç":"—á–µ–∫–ª–∏—Å—Ç", "–§–∏–∫—Å–∞—Ü–∏—è":"—Ñ–∏–∫—Å–∞—Ü–∏—è"}
    reply = ask_gpt(uid, alias.get(t, t))
    send_long(m.chat.id, reply)
    return

# ====== –õ—é–±–æ–π —Ç–µ–∫—Å—Ç (—Ç–æ–ª—å–∫–æ –ù–ï –∫–æ–º–∞–Ω–¥—ã) ======
@bot.message_handler(content_types=['text'], func=lambda m: (m.text or "") and not (m.text or "").startswith("/"))
def on_text(m):
    uid = m.from_user.id
    reply = ask_gpt(uid, m.text or "")
    send_long(m.chat.id, reply)

# ====== Keep-alive —Å–µ—Ä–≤–µ—Ä ======
app = Flask(__name__)

@app.get("/")
def root():
    return "OK", 200

@app.get("/health")
def health():
    return "pong", 200

def run_server():
    port = int(os.getenv("PORT", 8000))
    app.run(host="0.0.0.0", port=port)

# ====== –ó–∞–ø—É—Å–∫ ======
if __name__ == "__main__":
    logging.info("Starting keepalive web server‚Ä¶")
    Thread(target=run_server, daemon=True).start()

    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
