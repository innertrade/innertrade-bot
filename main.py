# main.py
import os
import logging
from datetime import datetime

from flask import Flask
from telebot import TeleBot, types

from openai import OpenAI
from sqlalchemy import (
    create_engine, text, String, Integer, DateTime, JSON
)
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, Session

# ========= ENV =========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")  # Neon/Render

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets")
if not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets")
if not DATABASE_URL:
    raise RuntimeError("–ù–µ—Ç DATABASE_URL –≤ Secrets")

# –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ URL –ë–î –∫ –¥—Ä–∞–π–≤–µ—Ä—É psycopg3
# Neon –¥–∞—ë—Ç postgresql://...; –¥–ª—è SQLAlchemy + psycopg –Ω—É–∂–µ–Ω postgresql+psycopg://...
def normalize_db_url(url: str) -> str:
    u = url.strip()
    if u.startswith("postgres://"):
        u = "postgresql://" + u[len("postgres://"):]
    if u.startswith("postgresql://"):
        u = "postgresql+psycopg://" + u[len("postgresql://"):]
    return u

DATABASE_URL = normalize_db_url(DATABASE_URL)

# ========= LOGS =========
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("innertrade")

# ========= OPENAI =========
client = OpenAI(api_key=OPENAI_API_KEY)

# ========= DB (SQLAlchemy 2.x + psycopg3) =========
class Base(DeclarativeBase):
    pass

class UserPassport(Base):
    __tablename__ = "user_passport"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    tg_id: Mapped[int] = mapped_column(index=True)
    profile: Mapped[dict] = mapped_column(JSON, default=dict)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)

class WeekPanel(Base):
    __tablename__ = "week_panel"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    tg_id: Mapped[int] = mapped_column(index=True)
    week_key: Mapped[str] = mapped_column(String(16))  # –Ω–∞–ø—Ä–∏–º–µ—Ä 2025-W34
    focus: Mapped[str] = mapped_column(String(255), default="")
    plan: Mapped[dict] = mapped_column(JSON, default=dict)
    limits: Mapped[dict] = mapped_column(JSON, default=dict)
    retro: Mapped[dict] = mapped_column(JSON, default=dict)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)

class ErrorLog(Base):
    __tablename__ = "error_log"
    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    tg_id: Mapped[int] = mapped_column(index=True)
    payload: Mapped[dict] = mapped_column(JSON, default=dict)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)

engine = create_engine(
    DATABASE_URL,
    pool_pre_ping=True,
    pool_size=5,
    max_overflow=5,
    future=True,
)

with engine.begin() as conn:
    Base.metadata.create_all(conn)
    log.info("DB: tables ensured")

# ========= TELEGRAM BOT =========
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# –Ω–∞ –≤—Å—è–∫–∏–π ‚Äî —Å–Ω—è—Ç—å webhook
try:
    bot.remove_webhook()
except Exception as e:
    log.warning(f"Webhook remove warn: {e}")

# –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ –≤ –û–ó–£ (–ø–æ–≤–µ—Ä—Ö –ë–î; –ë–î –ø–æ–π–¥—ë—Ç –ø–æ–¥ –ø–∞—Å–ø–æ—Ä—Ç/–ø–∞–Ω–µ–ª—å/–æ—à–∏–±–∫–∏)
history: dict[int, list[dict]] = {}

SYSTEM_PROMPT = (
    "–¢—ã –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ —Ç—Ä–µ–π–¥–µ—Ä–∞ Innertrade. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, "
    "–∏—Å–ø–æ–ª—å–∑—É–π —à–∞–≥–∏ –∏ —á–µ–∫-–ª–∏—Å—Ç—ã, –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ. "
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é ‚Äî –≤–µ–¥–∏ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é."
)

def ask_gpt(uid: int, text: str) -> str:
    msgs = history.setdefault(uid, [])
    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –Ω–∞—á–∞–ª–µ –¥–∏–∞–ª–æ–≥–∞
    if not msgs or msgs[0].get("role") != "system":
        msgs.insert(0, {"role": "system", "content": SYSTEM_PROMPT})
    msgs.append({"role": "user", "content": text})

    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.5,
        messages=msgs,
    )
    reply = (resp.choices[0].message.content or "").strip()
    msgs.append({"role": "assistant", "content": reply})
    return reply

def send_long(chat_id: int, text: str):
    MAX = 3500
    for i in range(0, len(text), MAX):
        bot.send_message(chat_id, text[i:i+MAX])

# ===== –ö–ù–û–ü–ö–ò (–∏–Ω—Ç–µ–Ω—Ç—ã) =====
INTENT_BUTTONS = [
    "‚ùó –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞",
    "üß† –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é",
    "üß≠ –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å",
    "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: —è –ø–æ–ø–ª—ã–ª",
    "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
    "ü™™ –ü–∞—Å–ø–æ—Ä—Ç/–ü—Ä–æ—Ñ–∏–ª—å",
    "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã",
    "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º",
    "üîÑ –°–±—Ä–æ—Å",
]

def main_menu() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(INTENT_BUTTONS[0], INTENT_BUTTONS[1])
    kb.row(INTENT_BUTTONS[2], INTENT_BUTTONS[3])
    kb.row(INTENT_BUTTONS[4], INTENT_BUTTONS[5])
    kb.row(INTENT_BUTTONS[6], INTENT_BUTTONS[7])
    kb.row(INTENT_BUTTONS[8])
    return kb

# ===== START =====
@bot.message_handler(commands=["start"])
def cmd_start(m):
    uid = m.from_user.id
    history[uid] = []  # —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ <b>Innertrade</b>.\n"
        "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["reset"])
def cmd_reset(m):
    history[m.from_user.id] = []
    bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu())

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ =====
@bot.message_handler(func=lambda x: (x.text or "") in INTENT_BUTTONS)
def on_buttons(m):
    uid = m.from_user.id
    t = (m.text or "").strip()

    mapping = {
        "‚ùó –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞": "–î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º –º–∏–Ω–∏-—Ä–∞–∑–±–æ—Ä –ø–æ MERCEDES+TOTE. –û–ø–∏—à–∏ —Å–∏—Ç—É–∞—Ü–∏—é: –≤—Ö–æ–¥/—Å—Ç–æ–ø/—ç–º–æ—Ü–∏–∏/–º—ã—Å–ª–∏.",
        "üß† –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é": "–°–æ–±–µ—Ä—ë–º —Ç–≤–æ—é –¢–°. –†–∞—Å—Å–∫–∞–∂–∏: —Ä—ã–Ω–æ–∫, —Å—Ç–∏–ª—å (—Å–∫–∞–ª—å–ø/–¥–µ–Ω—å/—Å–≤–∏–Ω–≥), —Ç–∞–π–º—Ñ—Ä–µ–π–º, –≤—Ö–æ–¥—ã/—Å—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ.",
        "üß≠ –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å": "–î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø—Ä–æ—Ñ–∏–ª—å. –ö–∞–∫–∏–µ —Ü–µ–ª–∏? –û–ø—ã—Ç? –†–µ—Å—É—Ä—Å/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è? –ó–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂—É –¥–æ—Ä–æ–∂–Ω—É—é –∫–∞—Ä—Ç—É.",
        "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: —è –ø–æ–ø–ª—ã–ª": "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: 1) –°—Ç–æ–ø-—Ç–æ—Ä–≥–æ–≤–ª—è –Ω–∞ 20 –º–∏–Ω—É—Ç. 2) –î—ã—Ö–∞–Ω–∏–µ 4-7-8. 3) –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ? 4) –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
        "üìà –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å": "–ü–æ–∫–∞–∂—É, —á—Ç–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –≤ –ø–∞—Å–ø–æ—Ä—Ç–µ –∏ –ø–∞–Ω–µ–ª–∏ –Ω–µ–¥–µ–ª–∏. –ß–µ–º –¥–æ–ø–æ–ª–Ω–∏–º –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?",
        "ü™™ –ü–∞—Å–ø–æ—Ä—Ç/–ü—Ä–æ—Ñ–∏–ª—å": "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞: —Ü–µ–ª–∏, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –∞–Ω—Ç–∏—Ä–∏—Å–∫–∏, —Ç—Ä–∏–≥–≥–µ—Ä—ã. –ß—Ç–æ –æ–±–Ω–æ–≤–∏–º?",
        "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã: MERCEDES, TOTE, –∞—Ä—Ö–µ—Ç–∏–ø—ã, —á–µ–∫-–ª–∏—Å—Ç—ã –≤—Ö–æ–¥–∞/—Ä–∏—Å–∫–∞, —à–∞–±–ª–æ–Ω –¢–°. –ß—Ç–æ –æ—Ç–∫—Ä—ã—Ç—å?",
        "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º": "–û–∫–µ–π. –ö–∞–∫–∞—è —Ç–µ–º–∞ ‚Äî —Ä—ã–Ω–æ–∫, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, —Ä–∏—Å–∫, –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞?",
        "üîÑ –°–±—Ä–æ—Å": "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.",
    }

    # —Å–ø–µ—Ü-–∫–µ–π—Å "–°–±—Ä–æ—Å"
    if t == "üîÑ –°–±—Ä–æ—Å":
        history[uid] = []
        bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=main_menu())
        return

    try:
        reply = ask_gpt(uid, mapping.get(t, t))
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

# ===== –õ—é–±–æ–π —Ç–µ–∫—Å—Ç (–∫—Ä–æ–º–µ –∫–Ω–æ–ø–æ–∫/–∫–æ–º–∞–Ω–¥) =====
@bot.message_handler(func=lambda m: True)
def on_text(m):
    uid = m.from_user.id
    txt = (m.text or "").strip()

    # —á—Ç–æ–±—ã /ping —Ç–µ–∫—Å—Ç–æ–º –Ω–µ —É–≤–æ–¥–∏–ª –≤ GPT –ø–æ—Ç–æ–∫–∏
    if txt.lower() == "ping":
        bot.send_message(m.chat.id, "pong")
        return

    try:
        reply = ask_gpt(uid, txt)
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

# ========= KEEPALIVE (Flask) =========
app = Flask(__name__)

@app.get("/")
def root():
    return "Innertrade bot is alive"

@app.get("/health")
def health():
    return "pong"

# ========= RUN =========
if __name__ == "__main__":
    log.info("Starting keepalive web server‚Ä¶")
    # Flask –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ –ø–æ–¥–Ω–∏–º–µ—Ç UptimeRobot health-endpoint
    from threading import Thread
    Thread(target=lambda: app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000"))), daemon=True).start()

    log.info("Starting polling‚Ä¶")
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
