import os
import logging
from flask import Flask
import telebot
from telebot import types
from openai import OpenAI

# ====== ENV ======
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets")
if not OPENAI_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets")

client = OpenAI(api_key=OPENAI_KEY)

# ====== LOGS ======
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# —Å–Ω—è—Ç—å –≤–µ–±—Ö—É–∫ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
try:
    bot.remove_webhook()
    logging.info("Webhook removed (ok)")
except Exception as e:
    logging.warning(f"Webhook remove warn: {e}")

# ====== SIMPLE KEEPALIVE WEB ======
app = Flask(__name__)

@app.route("/")
def home():
    return "Innertrade bot is alive"

@app.route("/health")
def health():
    return "pong"

# ====== MEMORY ======
history = {}  # uid -> list of messages
week_flow_stage = {}  # uid -> current step of weekly panel [1..5]
week_flow_data = {}   # uid -> dict collected answers

def ask_gpt(uid, text):
    msgs = history.setdefault(uid, [])
    msgs.append({"role": "user", "content": text})
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.5,
        messages=msgs
    )
    reply = (resp.choices[0].message.content or "").strip()
    msgs.append({"role": "assistant", "content": reply})
    return reply

def send_long(chat_id, text):
    MAX = 3500
    for i in range(0, len(text), MAX):
        bot.send_message(chat_id, text[i:i+MAX])

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("–û—à–∏–±–∫–∞"), types.KeyboardButton("–°—Ç—Ä–∞—Ç–µ–≥–∏—è"), types.KeyboardButton("–ü–æ–≥–æ–≤–æ—Ä–∏–º"))
    kb.row(types.KeyboardButton("–ü–∞—Å–ø–æ—Ä—Ç"), types.KeyboardButton("–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏"))
    kb.row(types.KeyboardButton("–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"), types.KeyboardButton("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã"))
    kb.row(types.KeyboardButton("–°–±—Ä–æ—Å"))
    return kb

# ====== START/PING/RESET ======
@bot.message_handler(commands=['start'])
def cmd_start(m):
    uid = m.from_user.id
    history[uid] = []
    week_flow_stage.pop(uid, None)
    week_flow_data.pop(uid, None)
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade.\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=['ping'])
def cmd_ping(m):
    bot.reply_to(m, "pong")

@bot.message_handler(commands=['reset'])
def cmd_reset(m):
    uid = m.from_user.id
    history[uid] = []
    week_flow_stage.pop(uid, None)
    week_flow_data.pop(uid, None)
    bot.reply_to(m, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.", reply_markup=main_menu())

# ====== INTENTS: –ü–ê–°–ü–û–†–¢ (—Å—Ç–∞—Ä—Ç) ======
@bot.message_handler(func=lambda x: (x.text or "").strip().lower() == "–ø–∞—Å–ø–æ—Ä—Ç")
def on_passport(m):
    bot.send_message(
        m.chat.id,
        "üìá –ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞.\n1/6) –ù–∞ –∫–∞–∫–æ–º —Ä—ã–Ω–∫–µ/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å? (–ø—Ä–∏–º–µ—Ä: –∞–∫—Ü–∏–∏ –°–®–ê, EURUSD, BTC, —Ñ—å—é—á–µ—Ä—Å—ã‚Ä¶)"
    )

# ====== INTENTS: –ü–ê–ù–ï–õ–¨ –ù–ï–î–ï–õ–ò ======
PANEL_ALIASES = {"–ø–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏", "–ø–∞–Ω–µ–ª—å", "–Ω–µ–¥–µ–ª—è", "–ø–∞–Ω–µ–ª—å–Ω—ã–π –¥–µ–≤–∏"}  # –æ–ø–µ—á–∞—Ç–∫—É —Ç–æ–∂–µ –ª–æ–≤–∏–º

@bot.message_handler(func=lambda x: (x.text or "").strip().lower() in PANEL_ALIASES)
def on_week_panel(m):
    uid = m.from_user.id
    week_flow_stage[uid] = 1
    week_flow_data[uid] = {}
    bot.send_message(
        m.chat.id,
        "üóìÔ∏è –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏.\n–î–∞–≤–∞–π –±—ã—Å—Ç—Ä–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–ª–∞–Ω.\n\n1/5) <b>–§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏</b>: –∫–∞–∫–æ–π –æ–¥–∏–Ω –≥–ª–∞–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å?",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø–æ –ü–∞–Ω–µ–ª–∏ –Ω–µ–¥–µ–ª–∏ ‚Äî –ª–æ–≤–∏–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –ø–æ–∫–∞ –∏–¥—ë—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π
def proceed_week_panel(uid, chat_id, text):
    stage = week_flow_stage.get(uid, 0)
    data = week_flow_data.setdefault(uid, {})

    if stage == 1:
        data["focus"] = text
        week_flow_stage[uid] = 2
        bot.send_message(chat_id, "2/5) <b>–£–∑–µ–ª/–±–æ–ª—å</b>: —á—Ç–æ –º–µ—à–∞–ª–æ —Ä–∞–Ω—å—à–µ? (–æ–¥–Ω–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞)")

    elif stage == 2:
        data["knot"] = text
        week_flow_stage[uid] = 3
        bot.send_message(chat_id, "3/5) <b>–ü–ª–∞–Ω</b>: 3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ (–≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞).")

    elif stage == 3:
        data["plan"] = text
        week_flow_stage[uid] = 4
        bot.send_message(chat_id, "4/5) <b>–õ–∏–º–∏—Ç—ã</b>: —Ä–∏—Å–∫/–ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏/–≤—Ä–µ–º—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤–ª—é? (–∫—Ä–∞—Ç–∫–æ)")

    elif stage == 4:
        data["limits"] = text
        week_flow_stage[uid] = 5
        bot.send_message(chat_id, "5/5) <b>–†–µ—Ç—Ä–æ –ø—Ä–æ—à–ª–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞</b>: —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ/–Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).")

    elif stage == 5:
        data["retro"] = text
        week_flow_stage.pop(uid, None)
        summary = (
            "‚úÖ <b>–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞</b>\n\n"
            f"‚Ä¢ –§–æ–∫—É—Å: {data.get('focus','')}\n"
            f"‚Ä¢ –£–∑–µ–ª/–±–æ–ª—å: {data.get('knot','')}\n"
            f"‚Ä¢ –ü–ª–∞–Ω: {data.get('plan','')}\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç—ã: {data.get('limits','')}\n"
            f"‚Ä¢ –†–µ—Ç—Ä–æ: {data.get('retro','')}\n\n"
            "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å ‚Äî –Ω–∞–ø–∏—à–∏: ¬´—Å–æ—Ö—Ä–∞–Ω–∏ –ø–∞–Ω–µ–ª—å¬ª (–ø–æ–¥–∫–ª—é—á–∏–º –∑–∞–ø–∏—Å—å –≤ –ë–î –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ)."
        )
        bot.send_message(chat_id, summary, reply_markup=main_menu())

# ====== –î–†–£–ì–ò–ï –ö–ù–û–ü–ö–ò (–∑–∞–≥–ª—É—à–∫–∏-–ø–æ–¥—Å–∫–∞–∑–∫–∏) ======
@bot.message_handler(func=lambda x: (x.text or "").strip().lower() == "–æ—à–∏–±–∫–∞")
def on_error(m):
    bot.send_message(
        m.chat.id,
        "‚ö†Ô∏è –û–∫–µ–π, —Ä–∞–∑–±–µ—Ä—ë–º –æ—à–∏–±–∫—É –ø–æ MERCEDES+TOTE.\n"
        "1) –û–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏ –∫–∞–∫–æ–µ –±—ã–ª–æ –¥–µ–π—Å—Ç–≤–∏–µ.",
    )

@bot.message_handler(func=lambda x: (x.text or "").strip().lower() == "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è")
def on_strategy(m):
    bot.send_message(
        m.chat.id,
        "üß© ¬´–°—Ç—Ä–∞—Ç–µ–≥–∏—è¬ª. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å–æ–±—Ä–∞—Ç—å/–ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –¢–°.\n"
        "–ù–∞–ø–∏—à–∏: –Ω–∞ –∫–∞–∫–æ–º —Ä—ã–Ω–∫–µ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å, –∏ –∫–∞–∫–æ–π —Å—Ç–∏–ª—å –±–ª–∏–∂–µ (–∏–Ω—Ç—Ä–∞–¥–µ–π/—Å–≤–∏–Ω–≥/–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω–∞—è)."
    )

@bot.message_handler(func=lambda x: (x.text or "").strip().lower() == "–ø–æ–≥–æ–≤–æ—Ä–∏–º")
def on_talk(m):
    bot.send_message(
        m.chat.id,
        "üí¨ –û —á—ë–º —Ö–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å: –æ —Ä—ã–Ω–∫–µ, –æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ, –æ —Ä–∏—Å–∫–∞—Ö –∏–ª–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–¥–µ–ª–∫–µ?"
    )

@bot.message_handler(func=lambda x: (x.text or "").strip().lower() == "–º–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
def on_progress(m):
    bot.send_message(
        m.chat.id,
        "üìà –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–≤–æ–¥–∫–∞ —Ç–≤–æ–∏—Ö –æ—Ç–º–µ—Ç–æ–∫ (–æ—à–∏–±–∫–∏, —Ä–∏—Ç—É–∞–ª—ã, –ø–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏).\n"
        "–°–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤—ã–¥–∞—á—É –æ—Ç—á—ë—Ç–æ–≤ –∏–∑ –±–∞–∑—ã.",
    )

@bot.message_handler(func=lambda x: (x.text or "").strip().lower() == "–º–∞—Ç–µ—Ä–∏–∞–ª—ã")
def on_materials(m):
    bot.send_message(
        m.chat.id,
        "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã:\n‚Äî MERCEDES, TOTE\n‚Äî –ê—Ä—Ö–µ—Ç–∏–ø—ã –∏ —Ä–æ–ª–∏\n‚Äî –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¢–°\n(–ü–æ–¥–∫–ª—é—á–∏–º –≤—ã–¥–∞—á—É –ø–æ –∫–Ω–æ–ø–∫–∞–º.)",
    )

@bot.message_handler(func=lambda x: (x.text or "").strip().lower() == "—Å–±—Ä–æ—Å")
def on_clear(m):
    uid = m.from_user.id
    history[uid] = []
    week_flow_stage.pop(uid, None)
    week_flow_data.pop(uid, None)
    bot.reply_to(m, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=main_menu())

# ====== CATCH-ALL (–æ—Å—Ç–∞–≤–ª—è–µ–º –í –°–ê–ú–û–ú –ù–ò–ó–£) ======
@bot.message_handler(func=lambda _: True)
def on_text(m):
    uid = m.from_user.id
    txt = (m.text or "").strip()

    # –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è ¬´–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏¬ª ‚Äî –≤–µ–¥—ë–º –¥–∞–ª—å—à–µ
    if week_flow_stage.get(uid):
        proceed_week_panel(uid, m.chat.id, txt)
        return

    # –∏–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT
    try:
        reply = ask_gpt(uid, txt)
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

if __name__ == "__main__":
    logging.info("Starting keepalive web server‚Ä¶")
    import threading
    def run_web():
        app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
    threading.Thread(target=run_web, daemon=True).start()

    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
