# main.py ‚Äî Innertrade Kai Mentor Bot
# –í–µ—Ä—Å–∏—è: 2025-09-22 (coach-struct v4-fixed)

import os
import json
import time
import logging
import threading
import hashlib
import re
from datetime import datetime, timezone, timedelta
from typing import Any, Dict, Optional, List
from difflib import SequenceMatcher
from functools import lru_cache

from flask import Flask, request, abort, jsonify
from sqlalchemy import create_engine, text
from sqlalchemy.pool import QueuePool
import telebot
from telebot import types
from openai import OpenAI

# ========= Version =========
def get_code_version():
    try:
        with open(__file__, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()[:8]
    except Exception:
        return "unknown"

BOT_VERSION = f"2025-09-22-{get_code_version()}"

# ========= ENV =========
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
PUBLIC_URL = os.getenv("PUBLIC_URL", "").strip()
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", "webhook").strip()
TG_SECRET = os.getenv("TG_WEBHOOK_SECRET", "").strip()
DATABASE_URL = os.getenv("DATABASE_URL", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()
OPENAI_MODEL = os.getenv("OPENAI_MODEL", "gpt-4o-mini").strip()
OFFSCRIPT_ENABLED = os.getenv("OFFSCRIPT_ENABLED", "true").lower() == "true"
SET_WEBHOOK_FLAG = os.getenv("SET_WEBHOOK", "false").lower() == "true"
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
MAX_BODY = int(os.getenv("MAX_BODY", "1000000"))
HIST_LIMIT = 12

# –ü–æ–≤–µ–¥–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ / –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
RESUME_THRESHOLD_MIN = int(os.getenv("RESUME_THRESHOLD_MIN", "60"))       # –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ > N –º–∏–Ω –º–æ–ª—á–∞–Ω–∏—è ‚Äî –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–ø—Ä–æ—Å–∏–º ¬´–ø—Ä–æ–¥–æ–ª–∂–∏–º?¬ª
REMIND_AFTER_MIN = int(os.getenv("REMIND_AFTER_MIN", "5"))                # —Ç–∏—Ö–∏–π –ø–∏–Ω–≥ –µ—Å–ª–∏ –º–æ–ª—á–∞—Ç N –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞
REMIND_REPEAT_MIN = int(os.getenv("REMIND_REPEAT_MIN", "60"))             # –Ω–µ –ø–∏–Ω–≥–æ–≤–∞—Ç—å —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ N –º–∏–Ω—É—Ç

if not TELEGRAM_TOKEN or not DATABASE_URL or not PUBLIC_URL or not TG_SECRET:
    raise RuntimeError("ENV variables missing")

# ========= Logging =========
logging.basicConfig(level=LOG_LEVEL, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
log = logging.getLogger("kai-mentor")
log.info(f"Starting bot version: {BOT_VERSION}")

# ========= Intents/Steps =========
INTENT_GREET = "greet"
INTENT_FREE = "free"
INTENT_ERR = "error"

STEP_ASK_STYLE = "ask_style"
STEP_FREE_INTRO = "free_intro"

STEP_ERR_CONFIRM = "err_confirm"   # –Ω–æ–≤–æ–µ: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–±–æ—Ä–æ–º
STEP_ERR_DESCR = "err_describe"

STEP_MER_CTX = "mer_context"
STEP_MER_EMO = "mer_emotions"
STEP_MER_THO = "mer_thoughts"
STEP_MER_BEH = "mer_behavior"

STEP_GOAL = "goal_positive"
STEP_TOTE_OPS = "tote_ops"
STEP_TOTE_TEST = "tote_test"
STEP_TOTE_EXIT = "tote_exit"

MER_ORDER = [STEP_MER_CTX, STEP_MER_EMO, STEP_MER_THO, STEP_MER_BEH]

# ========= OpenAI =========
oai_client = None
openai_status = "disabled"
if OPENAI_API_KEY and OFFSCRIPT_ENABLED:
    try:
        oai_client = OpenAI(api_key=OPENAI_API_KEY)
        oai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": "test"}],
            max_tokens=5
        )
        openai_status = "active"
        log.info("OpenAI ready")
    except Exception as e:
        log.error(f"OpenAI init error: {e}")
        oai_client = None
        openai_status = f"error: {e}"

# ========= DB =========
engine = create_engine(
    DATABASE_URL,
    poolclass=QueuePool,
    pool_size=5,
    max_overflow=10,
    pool_timeout=30,
    pool_recycle=1800,
)

def db_exec(sql: str, params: Optional[Dict[str, Any]] = None):
    with engine.begin() as conn:
        return conn.execute(text(sql), params or {})

def init_db():
    db_exec("""
    CREATE TABLE IF NOT EXISTS user_state(
        user_id BIGINT PRIMARY KEY,
        intent TEXT,
        step TEXT,
        data TEXT,
        updated_at TIMESTAMPTZ DEFAULT now()
    );
    """)
    db_exec("CREATE INDEX IF NOT EXISTS idx_user_state_updated_at ON user_state(updated_at)")
    db_exec("CREATE INDEX IF NOT EXISTS idx_user_state_intent_step ON user_state(intent, step)")
    log.info("DB initialized")

# ========= State =========
def load_state(uid: int) -> Dict[str, Any]:
    row = db_exec("SELECT intent, step, data FROM user_state WHERE user_id=:uid", {"uid": uid}).mappings().first()
    if row:
        data = {}
        if row["data"]:
            try:
                data = json.loads(row["data"])
            except Exception as e:
                log.error("Failed to parse user data: %s", e)
                data = {}
        return {"user_id": uid, "intent": row["intent"] or INTENT_GREET,
                "step": row["step"] or STEP_ASK_STYLE, "data": data}
    # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ —Å–µ—Å—Å–∏–∏
    return {"user_id": uid, "intent": INTENT_GREET, "step": STEP_ASK_STYLE,
            "data": {"history": [], "last_activity_at": _now_iso(), "awaiting_reply": False}}

def save_state(uid: int, intent=None, step=None, data=None) -> Dict[str, Any]:
    cur = load_state(uid)
    intent = intent or cur["intent"]
    step = step or cur["step"]
    new_data = cur["data"].copy()
    if data:
        new_data.update(data)
    # –∞–≤—Ç–æ-–º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    new_data["last_activity_at"] = _now_iso()
    db_exec("""
        INSERT INTO user_state (user_id, intent, step, data, updated_at)
        VALUES (:uid, :intent, :step, :data, now())
        ON CONFLICT (user_id) DO UPDATE
        SET intent=EXCLUDED.intent, step=EXCLUDED.step, data=EXCLUDED.data, updated_at=now()
    """, {"uid": uid, "intent": intent, "step": step, "data": json.dumps(new_data, ensure_ascii=False)})
    return {"user_id": uid, "intent": intent, "step": step, "data": new_data}

# ========= Bot / Flask =========
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML", threaded=False)
app = Flask(__name__)

MAIN_MENU = types.ReplyKeyboardMarkup(resize_keyboard=True)
MAIN_MENU.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
MAIN_MENU.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
MAIN_MENU.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")

STYLE_KB = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
STYLE_KB.row("—Ç—ã", "–≤—ã")

RESUME_KB = types.InlineKeyboardMarkup()
RESUME_KB.row(
    types.InlineKeyboardButton("üîÅ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º", callback_data="resume_flow"),
    types.InlineKeyboardButton("üÜï –ù–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä", callback_data="new_flow")
)

CONFIRM_KB = types.InlineKeyboardMarkup()
CONFIRM_KB.row(
    types.InlineKeyboardButton("–î–∞, –≤–µ—Ä–Ω–æ", callback_data="confirm_problem"),
    types.InlineKeyboardButton("–ù–µ—Ç, —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="refine_problem"),
)

# ========= Pattern Detection =========
RISK_PATTERNS = {
    "remove_stop": ["—É–±–∏—Ä–∞—é —Å—Ç–æ–ø", "—Å–Ω—è–ª —Å—Ç–æ–ø", "–±–µ–∑ —Å—Ç–æ–ø–∞"],
    "move_stop": ["–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø", "–æ—Ç–æ–¥–≤–∏–Ω—É–ª —Å—Ç–æ–ø", "–ø–µ—Ä–µ—Å—Ç–∞–≤–∏–ª —Å—Ç–æ–ø"],
    "early_close": ["–∑–∞–∫—Ä—ã–ª —Ä–∞–Ω–æ", "–≤—ã—à–µ–ª –≤ –Ω–æ–ª—å", "–º–∏–∑–µ—Ä–Ω—ã–π –ø–ª—é—Å", "—Ä–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥"],
    "averaging": ["—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ", "–¥–æ–ª–∏–≤–∞–ª—Å—è –ø—Ä–æ—Ç–∏–≤", "–¥–æ–∫—É–ø–∞–ª –ø—Ä–æ—Ç–∏–≤"],
    "fomo": ["–ø–æ–µ–∑–¥ —É–µ–¥–µ—Ç", "—É–ø—É—Å—Ç–∏–ª", "—É–π–¥—ë—Ç –±–µ–∑ –º–µ–Ω—è", "—Å—Ç—Ä–∞—Ö —É–ø—É—Å—Ç–∏—Ç—å"],
    "rule_breaking": ["–Ω–∞—Ä—É—à–∏–ª –ø–ª–∞–Ω", "–æ—Ç–æ—à—ë–ª –æ—Ç –ø–ª–∞–Ω–∞", "–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–ª –ø–ª–∞–Ω"],
}
EMO_PATTERNS = {
    "self_doubt": ["—Å–æ–º–Ω–µ–≤–∞—é—Å—å", "–Ω–µ —É–≤–µ—Ä–µ–Ω", "—Å—Ç—Ä–µ—Å—Å", "–ø–∞–Ω–∏–∫–∞", "–≤–æ–ª–Ω–µ–Ω–∏–µ"],
    "fear_of_loss": ["—Å—Ç—Ä–∞—Ö –ø–æ—Ç–µ—Ä—å", "–±–æ—é—Å—å —Å—Ç–æ–ø–∞", "–Ω–µ —Ö–æ—á—É –±—ã—Ç—å –æ–±–º–∞–Ω—É—Ç—ã–º"],
    "chaos": ["—Ö–∞–æ—Å", "—Å—É–µ—Ç–∞", "–ø—É—Ç–∞—é—Å—å"],
}

@lru_cache(maxsize=1000)
def detect_trading_patterns_cached(text: str) -> List[str]:
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    tl = (text or "").lower()
    hits = []
    for name, keys in {**RISK_PATTERNS, **EMO_PATTERNS}.items():
        if any(k in tl for k in keys):
            hits.append(name)
    return hits

def detect_trading_patterns(text: str) -> List[str]:
    return detect_trading_patterns_cached(text)

def should_force_structural(text: str) -> bool:
    pats = detect_trading_patterns(text)
    risk = set(pats) & set(RISK_PATTERNS.keys())
    return bool(risk) or ("fear_of_loss" in pats) or ("self_doubt" in pats)

# ========= Helpers =========
BAN_TEMPLATES = [
    "–ø–æ–Ω–∏–º–∞—é", "—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å", "–≤–∞–∂–Ω–æ –ø–æ–Ω—è—Ç—å", "–¥–∞–≤–∞–π —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º", "–±—ã–ª–æ –±—ã –ø–æ–ª–µ–∑–Ω–æ",
    "–ø–æ–ø—Ä–æ–±—É–π", "–∏—Å–ø–æ–ª—å–∑—É–π", "–ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è", "—É—Å—Ç–∞–Ω–æ–≤–∏", "—Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è", "—Å–ª–µ–¥—É–π", "–ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏"
]

def strip_templates(text_in: str) -> str:
    t = text_in or ""
    for ph in BAN_TEMPLATES:
        t = re.sub(rf"(?i)\b{re.escape(ph)}[^.!?]*[.!?]", " ", t)
    t = re.sub(r'\s+', ' ', t).strip(" ,.!?")
    return t

def anti_echo(user_text: str, model_text: str) -> str:
    u = (user_text or "").strip().lower()
    m = (model_text or "").strip()
    if len(u) >= 15 and len(m) >= 15 and SequenceMatcher(None, u, m.lower()).ratio() > 0.7:
        return "–°–∫–∞–∂—É –∏–Ω–∞—á–µ: " + m
    return m

def _now_iso():
    return datetime.now(timezone.utc).isoformat()

def _iso_to_dt(s: Optional[str]) -> Optional[datetime]:
    if not s: return None
    try:
        return datetime.fromisoformat(s.replace("Z", "+00:00"))
    except Exception:
        return None

def mer_prompt_for(step: str) -> str:
    # –º—è–≥–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
    return {
        STEP_MER_CTX: "–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç: –≥–¥–µ –∏ –∫–æ–≥–¥–∞ —ç—Ç–æ –±—ã–ª–æ? –ü–∞—Ä—É —Å–ª–æ–≤.",
        STEP_MER_EMO: "–ß—Ç–æ–±—ã –º–Ω–µ —Ç–æ—á–Ω–µ–µ –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å—Å—è: –∫–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ –≤—Å–ø–ª—ã–ª–∏ –≤ —Ç–æ—Ç –º–æ–º–µ–Ω—Ç? 2‚Äì3 —Å–ª–æ–≤–∞.",
        STEP_MER_THO: "–ö–∞–∫–∏–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –º—ã—Å–ª–∏ –º–µ–ª—å–∫–∞–ª–∏? 2‚Äì3 —Ñ—Ä–∞–∑—ã.",
        STEP_MER_BEH: "–ß—Ç–æ —Ç—ã —Å–¥–µ–ª–∞–ª(–∞) —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏? –ü–æ—à–∞–≥–æ–≤–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ.",
    }.get(step, "–ü—Ä–æ–¥–æ–ª–∂–∏–º.")

def extract_problem_summary(history: List[Dict]) -> str:
    user_msgs = [m["content"] for m in history if m.get("role") == "user"]
    pats: List[str] = []
    for m in user_msgs:
        pats.extend(detect_trading_patterns(m))
    up = sorted(set(pats))
    parts = []
    if "fomo" in up: parts.append("FOMO (—Å—Ç—Ä–∞—Ö —É–ø—É—Å—Ç–∏—Ç—å)")
    if "remove_stop" in up or "move_stop" in up: parts.append("—Ç—Ä–æ–≥–∞–µ—à—å/—Å–Ω–∏–º–∞–µ—à—å —Å—Ç–æ–ø")
    if "early_close" in up: parts.append("—Ä–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥/¬´–≤ –Ω–æ–ª—å¬ª")
    if "averaging" in up: parts.append("—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–∏–≤ –ø–æ–∑–∏—Ü–∏–∏")
    if "fear_of_loss" in up: parts.append("—Å—Ç—Ä–∞—Ö —Å—Ç–æ–ø–∞/–ø–æ—Ç–µ—Ä—å")
    if "self_doubt" in up: parts.append("—Å–æ–º–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞")
    return "–ü–æ—Ö–æ–∂–µ, –∫–ª—é—á–µ–≤–∞—è —Ç–µ–º–∞: " + (", ".join(parts) if parts else "–Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–∏–µ")

# ========= Voice (Whisper) =========
def transcribe_voice(audio_file_path: str) -> Optional[str]:
    if not oai_client:
        log.warning("Whisper: client not available")
        return None
    try:
        with open(audio_file_path, "rb") as audio_file:
            tr = oai_client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                language="ru"
            )
        return getattr(tr, "text", None)
    except Exception as e:
        log.error("Whisper error: %s", e)
        return None

# ========= GPT (strict coach) =========
def gpt_decide(uid: int, text_in: str, st: Dict[str, Any]) -> Dict[str, Any]:
    """–û–¥–∏–Ω —Ç–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å/–º–æ—Å—Ç–∏–∫. –ë–µ–∑ —Å–æ–≤–µ—Ç–æ–≤ –∏ —Å–ø–∏—Å–∫–æ–≤ —Ç–µ—Ö–Ω–∏–∫."""
    fallback = {
        "next_step": st["step"],
        "intent": st["intent"],
        "response_text": "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
        "store": {},
        "is_structural": False
    }
    
    if not oai_client or not OFFSCRIPT_ENABLED:
        log.warning("OpenAI not available")
        return fallback

    style = st["data"].get("style", "—Ç—ã")
    patterns = detect_trading_patterns(text_in)
    patterns_text = ", ".join(patterns) if patterns else "–Ω–µ—Ç"

    system_prompt = f"""
–¢—ã ‚Äî –∫–æ—É—á-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É –ê–ª–µ–∫—Å (–¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ –Ω–∞ ¬´{style}¬ª).
–ù–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å –∏ –Ω–µ –¥–∞—ë—à—å —Å–æ–≤–µ—Ç–æ–≤. –î–≤–∏–≥–∞–µ—à—å —Ä–∞–∑–±–æ—Ä –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–º –º–æ—Å—Ç–∏–∫–æ–º.
–ï—Å–ª–∏ —è–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–µ—Ä–µ–π—Ç–∏ –∫ —á—ë—Ç–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ—Ö–Ω–∏–∫).

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: JSON —Å –ø–æ–ª—è–º–∏:
- next_step
- intent
- response_text  (1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏—Ö –∞–±–∑–∞—Ü–∞, –±–µ–∑ –æ–±—â–∏—Ö —Å–æ–≤–µ—Ç–æ–≤)
- store          (–æ–±—ä–µ–∫—Ç)
- is_structural  (true/false ‚Äî –ø–æ—Ä–∞ –ª–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π —Ä–∞–∑–±–æ—Ä)
–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã: {patterns_text}
""".strip()

    msgs = [{"role": "system", "content": system_prompt}]
    for h in st["data"].get("history", [])[-HIST_LIMIT:]:
        if h.get("role") in ("user", "assistant") and isinstance(h.get("content"), str):
            msgs.append(h)
    msgs.append({"role": "user", "content": text_in})

    try:
        res = oai_client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=msgs,
            temperature=0.3,
            response_format={"type": "json_object"},
        )
        raw = res.choices[0].message.content or "{}"
        dec = json.loads(raw)
        if not isinstance(dec, dict):
            return fallback
        for k in ["next_step", "intent", "response_text", "store", "is_structural"]:
            if k not in dec:
                return fallback

        resp = strip_templates(anti_echo(text_in, dec.get("response_text", ""))).strip()
        if any(b in resp.lower() for b in ["–ø–æ–ø—Ä–æ–±—É–π", "–∏—Å–ø–æ–ª—å–∑—É–π", "–ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è", "—É—Å—Ç–∞–Ω–æ–≤–∏", "—Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è", "—Å–ª–µ–¥—É–π", "–ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏"]) or len(resp) < 12:
            resp = "–û–∫–µ–π. –ù–∞ —ç—Ç–æ–º –∫–µ–π—Å–µ: –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ç—ã –æ—Ç—Å—Ç—É–ø–∏–ª –æ—Ç –ø–ª–∞–Ω–∞ (–≤—Ö–æ–¥/—Å—Ç–æ–ø/–≤—ã—Ö–æ–¥)?"
        dec["response_text"] = resp

        if should_force_structural(text_in):
            dec["is_structural"] = True

        return dec
    except Exception as e:
        log.error("GPT decision error: %s", e)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        fallback["response_text"] = "–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ."
        return fallback

# ========= High-level UX helpers =========
def offer_structural(uid: int, st: Dict[str, Any]):
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–º—É —Ä–∞–∑–±–æ—Ä—É (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ—Ö–Ω–∏–∫)."""
    if st["data"].get("struct_offer_shown"):
        return
    st["data"]["struct_offer_shown"] = True
    summary = extract_problem_summary(st["data"].get("history", []))
    save_state(uid, data=st["data"])
    kb = types.InlineKeyboardMarkup().row(
        types.InlineKeyboardButton("üîÅ –†–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ —à–∞–≥–∞–º", callback_data="start_error_flow"),
        types.InlineKeyboardButton("–ü–æ–∑–∂–µ", callback_data="skip_error_flow")
    )
    bot.send_message(uid, f"{summary}\n\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—à–∞–≥–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä. –ü–æ–µ—Ö–∞–ª–∏?", reply_markup=kb)

def set_awaiting(uid: int, st: Dict[str, Any], awaiting: bool):
    st["data"]["awaiting_reply"] = awaiting
    if awaiting:
        st["data"]["last_prompt_at"] = _now_iso()
    save_state(uid, data=st["data"])

def greet_or_resume(uid: int, st: Dict[str, Any], text_in: str) -> bool:
    """–ï—Å–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ/–¥–æ–ª–≥–∞—è –ø–∞—É–∑–∞ ‚Äî —Å–ø—Ä–æ—Å–∏—Ç—å ¬´–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º?¬ª; –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ä–µ–∑—é–º-–∫–∞—Ä—Ç–æ—á–∫—É."""
    tl = (text_in or "").strip().lower()
    is_greeting = tl in ("–ø—Ä–∏–≤–µ—Ç", "hi", "hello", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "–¥–æ–±—Ä—ã–π –¥–µ–Ω—å", "–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä", "–π–æ", "–∫—É", "—Ö–∞–π") or \
                  tl.startswith("–ø—Ä–∏–≤–µ—Ç ")
    
    # –µ—Å–ª–∏ ¬´–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä¬ª ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤ —á–∏—Å—Ç—ã–π —Ä–∞–∑–±–æ—Ä
    if any(key in tl for key in ["–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä", "—Å –Ω—É–ª—è", "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "start over"]):
        st["data"].pop("mer", None)
        st["data"].pop("tote", None)
        st["data"].pop("error_description", None)
        st["data"]["problem_confirmed"] = False
        save_state(uid, INTENT_ERR, STEP_ERR_DESCR, st["data"])
        bot.send_message(uid, "–û–∫–µ–π, –Ω–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞. –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
        set_awaiting(uid, st, True)
        return True

    # –µ—Å–ª–∏ –±—ã–ª–æ –º–æ–ª—á–∞–Ω–∏–µ –¥–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–∞ ‚Äî –º—è–≥–∫–æ —É—Ç–æ—á–Ω–∏—Ç—å
    last = _iso_to_dt(st["data"].get("last_activity_at"))
    if is_greeting or (last and datetime.now(timezone.utc) - last > timedelta(minutes=RESUME_THRESHOLD_MIN)):
        # –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä ‚Äî —Å–ø—Ä–æ—Å–∏–º
        if st["intent"] == INTENT_ERR and st["step"] not in (STEP_FREE_INTRO, STEP_ASK_STYLE):
            bot.send_message(uid, "–ü—Ä–∏–≤–µ—Ç! –ü–æ—Ö–æ–∂–µ, –º—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑–±–æ—Ä. –ü—Ä–æ–¥–æ–ª–∂–∏–º –∏–ª–∏ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ?", reply_markup=RESUME_KB)
            set_awaiting(uid, st, False)
            return True
    return False

# ========= Handlers =========
@bot.message_handler(commands=["start", "reset"])
def cmd_start(m: types.Message):
    data = {"history": [], "last_activity_at": _now_iso(), "awaiting_reply": False}
    bot.send_message(m.from_user.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —É–¥–æ–±–Ω–µ–µ ‚Äî <b>—Ç—ã</b> –∏–ª–∏ <b>–≤—ã</b>?\n\n"
        "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —á–∏—Å—Ç—ã–π –ª–∏—Å—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: <b>–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä</b>.",
        reply_markup=STYLE_KB)
    save_state(m.from_user.id, INTENT_GREET, STEP_ASK_STYLE, data)

@bot.message_handler(commands=["version", "v"])
def cmd_version(m: types.Message):
    info = (
        f"üîÑ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: {BOT_VERSION}\n"
        f"üìù –•—ç—à –∫–æ–¥–∞: {get_code_version()}\n"
        f"üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now(timezone.utc).isoformat()}\n"
        f"ü§ñ OpenAI: {openai_status}"
    )
    bot.reply_to(m, info)

@bot.message_handler(commands=["menu"])
def cmd_menu(m: types.Message):
    bot.send_message(m.chat.id, "–ú–µ–Ω—é:", reply_markup=MAIN_MENU)

@bot.message_handler(content_types=['voice', 'audio'])
def handle_voice(message: types.Message):
    uid = message.from_user.id
    try:
        file_id = message.voice.file_id if message.content_type == 'voice' else message.audio.file_id
        file_info = bot.get_file(file_id)
        data = bot.download_file(file_info.file_path)
        tmp_name = f"voice_{uid}_{int(time.time())}.ogg"
        with open(tmp_name, "wb") as f:
            f.write(data)
        txt = transcribe_voice(tmp_name)
        try:
            os.remove(tmp_name)
        except Exception:
            pass
        if not txt:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å. –°–∫–∞–∂–∏ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º.")
            return
        handle_text_message(uid, txt, original_message=message)
    except Exception as e:
        log.error("Voice processing error: %s", e)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

@bot.message_handler(content_types=["text"])
def on_text(m: types.Message):
    handle_text_message(m.from_user.id, m.text.strip(), m)

def handle_text_message(uid: int, text_in: str, original_message=None):
    st = load_state(uid)
    log.info("User %s: intent=%s step=%s text='%s'", uid, st["intent"], st["step"], text_in[:200])

    # history (user)
    history = st["data"].get("history", [])
    if len(history) >= HIST_LIMIT:
        history = history[-(HIST_LIMIT-1):]
    history.append({"role": "user", "content": text_in})
    st["data"]["history"] = history

    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ/—Ä–µ–∑—é–º - –í–ê–ñ–ù–û: –µ—Å–ª–∏ –≤–µ—Ä–Ω—É–ª–∏ True, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
    if greet_or_resume(uid, st, text_in):
        return  # ‚Üê –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≤—ã—Ö–æ–¥–∏–º –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ

    # –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è
    if st["intent"] == INTENT_GREET and st["step"] == STEP_ASK_STYLE:
        if text_in.lower() in ("—Ç—ã", "–≤—ã"):
            st["data"]["style"] = text_in.lower()
            save_state(uid, INTENT_FREE, STEP_FREE_INTRO, st["data"])
            bot.send_message(uid,
                f"–ü—Ä–∏–Ω—è—Ç–æ ({text_in}). –ß—Ç–æ —Å–µ–π—á–∞—Å –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ —Ö–æ—á–µ—Ç—Å—è –ø–æ–ø—Ä–∞–≤–∏—Ç—å? "
                "–ï—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –∂–µ–ª–∞–Ω–∏–µ –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä¬ª.",
                reply_markup=MAIN_MENU)
            set_awaiting(uid, st, False)
        else:
            save_state(uid, data=st["data"])
            bot.send_message(uid, "–í—ã–±–µ—Ä–∏ ¬´—Ç—ã¬ª –∏–ª–∏ ¬´–≤—ã¬ª.", reply_markup=STYLE_KB)
        return

    # —è–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å ¬´–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä¬ª - –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–ª—è–µ–º return –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    tl = text_in.lower()
    if any(key in tl for key in ["–Ω–æ–≤—ã–π —Ä–∞–∑–±–æ—Ä", "—Å –Ω—É–ª—è", "–Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "start over"]):
        st["data"].pop("mer", None)
        st["data"].pop("tote", None)
        st["data"].pop("error_description", None)
        st["data"]["problem_confirmed"] = False
        save_state(uid, INTENT_ERR, STEP_ERR_DESCR, st["data"])
        bot.send_message(uid, "–û–∫–µ–π, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
        set_awaiting(uid, st, True)
        return  # ‚Üê –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –≤—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    # –º–µ–Ω—é/–∏–Ω—Ç–µ–Ω—Ç—ã
    if st["intent"] == INTENT_ERR:
        handle_structural(uid, text_in, st)
        return

    # —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–æ—É—á-–ø–æ—Ç–æ–∫
    decision = gpt_decide(uid, text_in, st)
    resp = decision.get("response_text") or "–û–∫–µ–π. –ù–∞ —ç—Ç–æ–º –∫–µ–π—Å–µ: –≥–¥–µ –∏–º–µ–Ω–Ω–æ —Ç—ã –æ—Ç—Å—Ç—É–ø–∏–ª –æ—Ç –ø–ª–∞–Ω–∞ (–≤—Ö–æ–¥/—Å—Ç–æ–ø/–≤—ã—Ö–æ–¥)?"

    # history (assistant)
    history = st["data"].get("history", [])
    if len(history) >= HIST_LIMIT:
        history = history[-(HIST_LIMIT-1):]
    history.append({"role": "assistant", "content": resp})

    merged = st["data"].copy()
    store = decision.get("store", {})
    if isinstance(store, dict):
        merged.update(store)
    merged["history"] = history

    new_intent = decision.get("intent") or st["intent"]
    new_step = decision.get("next_step") or st["step"]
    st_after = save_state(uid, new_intent, new_step, merged)

    if original_message:
        bot.reply_to(original_message, resp, reply_markup=MAIN_MENU)
    else:
        bot.send_message(uid, resp, reply_markup=MAIN_MENU)

    # –æ—Ç–º–µ—Ç–∏–º ¬´–∂–¥—ë–º –æ—Ç–≤–µ—Ç¬ª
    set_awaiting(uid, st_after, True)

    # –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´–ø–æ–π—Ç–∏ –ø–æ —à–∞–≥–∞–º¬ª
    if decision.get("is_structural", False) or should_force_structural(text_in):
        offer_structural(uid, st_after)

# ========= Structural Flow =========
def handle_structural(uid: int, text_in: str, st: Dict[str, Any]):
    # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É
    if st["step"] == STEP_FREE_INTRO or st["step"] == STEP_ERR_CONFIRM:
        # –≤–æ–∑—å–º—ë–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        summary = extract_problem_summary(st["data"].get("history", []))
        bot.send_message(uid, f"–ó–∞—Ñ–∏–∫—Å–∏—Ä—É—é –ø—Ä–æ–±–ª–µ–º—É, —á—Ç–æ–±—ã –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏ –æ–± –æ–¥–Ω–æ–º –∏ —Ç–æ–º –∂–µ:\n\n<b>{summary}</b>\n\n–í–µ—Ä–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª?", reply_markup=CONFIRM_KB)
        save_state(uid, INTENT_ERR, STEP_ERR_CONFIRM, st["data"])
        set_awaiting(uid, st, True)
        return

    # a) –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ (–≤–≤–æ–¥)
    if st["step"] == STEP_ERR_DESCR:
        new_data = st["data"].copy()
        new_data["error_description"] = text_in
        # –º—è–≥–∫–∏–π –º–æ—Å—Ç–∏–∫ –∫ —à–∞–≥–∞–º
        bot.send_message(uid, "–û–∫–µ–π, –¥–≤–∏–≥–∞–µ–º—Å—è –∫–æ—Ä–æ—Ç–∫–∏–º–∏ —à–∞–≥–∞–º–∏ ‚Äî —è —Ä—è–¥–æ–º, —Ç–µ–º–ø –∑–∞–¥–∞—ë—à—å —Ç—ã.")
        save_state(uid, INTENT_ERR, STEP_MER_CTX, new_data)
        bot.send_message(uid, mer_prompt_for(STEP_MER_CTX))
        set_awaiting(uid, st, True)
        return

    # b) —à–∞–≥–∏ (–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–µ—Ö–Ω–∏–∫)
    if st["step"] in MER_ORDER:
        mer = st["data"].get("mer", {})
        mer[st["step"]] = text_in
        new_data = st["data"].copy()
        new_data["mer"] = mer

        idx = MER_ORDER.index(st["step"])
        if idx + 1 < len(MER_ORDER):
            nxt = MER_ORDER[idx + 1]
            save_state(uid, INTENT_ERR, nxt, new_data)
            # –∫–æ—Ä–æ—Ç–∫–∏–π –º–æ—Å—Ç–∏–∫ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
            bot.send_message(uid, "–ü—Ä–∏–Ω—è–ª. –°–ª–µ–¥—É—é—â–∏–π –º–∞–ª–µ–Ω—å–∫–∏–π —à—Ç—Ä–∏—Ö.")
            bot.send_message(uid, mer_prompt_for(nxt))
        else:
            # –º–∏–Ω–∏-—Ñ–∏–∫—Å–∞—Ü–∏—è ¬´–∏—Ç–æ–≥–∞ —á–∞—Å—Ç–∏¬ª
            m = new_data.get("mer", {})
            bot.send_message(uid,
                "–°–æ–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É: –∫–æ–Ω—Ç–µ–∫—Å—Ç, —ç–º–æ—Ü–∏–∏, –º—ã—Å–ª–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è. –¢–µ–ø–µ—Ä—å ‚Äî –∫—É–¥–∞ —Ö–æ—á–µ—à—å –ø—Ä–∏–π—Ç–∏ –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–π —Ä–µ–∞–∫—Ü–∏–∏.")
            save_state(uid, INTENT_ERR, STEP_GOAL, new_data)
            bot.send_message(uid, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å: —á—Ç–æ –¥–µ–ª–∞–µ—à—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?")
        set_awaiting(uid, st, True)
        return

    # c) Goal
    if st["step"] == STEP_GOAL:
        new_data = st["data"].copy()
        new_data["goal"] = text_in
        bot.send_message(uid, "–û–∫–µ–π. –ó–∞–∫—Ä–µ–ø–∏–º –ø—Ä–æ—Å—Ç—ã–º–∏ —à–∞–≥–∞–º–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 —Å–¥–µ–ª–∫–∏.")
        save_state(uid, INTENT_ERR, STEP_TOTE_OPS, new_data)
        bot.send_message(uid, "–ù–∞–∑–æ–≤–∏ 2‚Äì3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ (–∫–æ—Ä–æ—Ç–∫–æ, —Å–ø–∏—Å–∫–æ–º).")
        set_awaiting(uid, st, True)
        return

    # d) –ü—Ä–æ–≤–µ—Ä–∫–∞
    if st["step"] == STEP_TOTE_OPS:
        tote = st["data"].get("tote", {})
        tote["ops"] = text_in
        new_data = st["data"].copy()
        new_data["tote"] = tote
        save_state(uid, INTENT_ERR, STEP_TOTE_TEST, new_data)
        bot.send_message(uid, "–ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –û–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π.")
        set_awaiting(uid, st, True)
        return

    # e) –ß—Ç–æ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ ¬´–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª
    if st["step"] == STEP_TOTE_TEST:
        tote = st["data"].get("tote", {})
        tote["test"] = text_in
        new_data = st["data"].copy()
        new_data["tote"] = tote
        save_state(uid, INTENT_ERR, STEP_TOTE_EXIT, new_data)
        bot.send_message(uid, "–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π —à—Ç—Ä–∏—Ö: —á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∂–µ—Ç ¬´–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª?")
        set_awaiting(uid, st, True)
        return

    # f) –ò—Ç–æ–≥
    if st["step"] == STEP_TOTE_EXIT:
        tote = st["data"].get("tote", {})
        tote["exit"] = text_in
        new_data = st["data"].copy()
        new_data["tote"] = tote

        mer = new_data.get('mer', {})
        summary = [
            "<b>–ò—Ç–æ–≥ —Ä–∞–∑–±–æ—Ä–∞</b>",
            f"–û—à–∏–±–∫–∞: {new_data.get('error_description', '‚Äî')}",
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {mer.get(STEP_MER_CTX, '‚Äî')}",
            f"–≠–º–æ—Ü–∏–∏: {mer.get(STEP_MER_EMO, '‚Äî')}",
            f"–ú—ã—Å–ª–∏: {mer.get(STEP_MER_THO, '‚Äî')}",
            f"–ü–æ–≤–µ–¥–µ–Ω–∏–µ: {mer.get(STEP_MER_BEH, '‚Äî')}",
            f"–¶–µ–ª—å: {new_data.get('goal', '‚Äî')}",
            f"–®–∞–≥–∏: {new_data.get('tote', {}).get('ops', '‚Äî')}",
            f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {new_data.get('tote', {}).get('test', '‚Äî')}",
            f"–ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ: {new_data.get('tote', {}).get('exit', '‚Äî')}",
        ]
        save_state(uid, INTENT_FREE, STEP_FREE_INTRO, new_data)
        bot.send_message(uid, "\n".join(summary), reply_markup=MAIN_MENU)
        bot.send_message(uid, "–ì–æ—Ç–æ–≤ –≤—ã–Ω–µ—Å—Ç–∏ —ç—Ç–æ –≤ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏ –∏–ª–∏ –∏–¥—ë–º –¥–∞–ª—å—à–µ?")
        set_awaiting(uid, st, False)

# ========= Menu handlers =========
MENU_BTNS = {
    "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞": "error",
    "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é": "strategy",
    "üìÑ –ü–∞—Å–ø–æ—Ä—Ç": "passport",
    "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏": "weekpanel",
    "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ": "panic",
    "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å": "start_help",
}

@bot.message_handler(func=lambda m: m.text in MENU_BTNS.keys())
def handle_menu(m: types.Message):
    uid = m.from_user.id
    st = load_state(uid)
    label = m.text
    code = MENU_BTNS[label]

    history = st["data"].get("history", [])
    if len(history) >= HIST_LIMIT:
        history = history[-(HIST_LIMIT-1):]
    history.append({"role": "user", "content": label})
    st["data"]["history"] = history

    if code == "error":
        st["data"]["problem_confirmed"] = False
        save_state(uid, INTENT_ERR, STEP_ERR_CONFIRM, st["data"])
        # –°—Ä–∞–∑—É –ø–æ–ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏
        summary = extract_problem_summary(st["data"].get("history", []))
        bot.send_message(uid, f"–•–æ—á—É —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤–µ—Ä–Ω–æ –ø–æ–Ω—è–ª:\n\n<b>{summary}</b>\n\n–ü–æ–¥—Ö–æ–¥–∏—Ç —Ç–∞–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞?", reply_markup=CONFIRM_KB)
        set_awaiting(uid, st, True)
    elif code == "start_help":
        bot.send_message(uid, "–ü–ª–∞–Ω: 1) –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏, 2) —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏, 3) —Å–∫–µ–ª–µ—Ç –¢–°. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?", reply_markup=MAIN_MENU)
        save_state(uid, data=st["data"])
        set_awaiting(uid, st, False)
    else:
        bot.send_message(uid, "–û–∫. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É—Å–∫–æ—Ä–∏—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏ ¬´üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞¬ª.", reply_markup=MAIN_MENU)
        save_state(uid, data=st["data"])
        set_awaiting(uid, st, False)

# ========= Callbacks =========
@bot.callback_query_handler(func=lambda call: True)
def on_callback(call: types.CallbackQuery):
    uid = call.from_user.id
    data = call.data or ""
    bot.answer_callback_query(call.id, "–û–∫")

    st = load_state(uid)

    if data == "start_error_flow":
        st["data"]["problem_confirmed"] = True
        save_state(uid, INTENT_ERR, STEP_ERR_DESCR, st["data"])
        bot.send_message(uid, "–ù–∞—á–Ω—ë–º —Ä–∞–∑–±–æ—Ä. –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
        set_awaiting(uid, st, True)

    elif data == "skip_error_flow":
        bot.send_message(uid, "–•–æ—Ä–æ—à–æ. –í–µ—Ä–Ω—ë–º—Å—è –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ.", reply_markup=MAIN_MENU)
        set_awaiting(uid, st, False)

    elif data == "confirm_problem":
        st["data"]["problem_confirmed"] = True
        save_state(uid, INTENT_ERR, STEP_ERR_DESCR, st["data"])
        bot.send_message(uid, "–û—Ç–ª–∏—á–Ω–æ. –¢–æ–≥–¥–∞ –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π. –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
        set_awaiting(uid, st, True)

    elif data == "refine_problem":
        save_state(uid, INTENT_ERR, STEP_ERR_CONFIRM, st["data"])
        bot.send_message(uid, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –∫–æ—Ä–æ—Ç–∫–æ ‚Äî –∫–∞–∫ —ç—Ç–æ –∑–≤—É—á–∏—Ç –¥–ª—è —Ç–µ–±—è?")
        set_awaiting(uid, st, True)

    elif data == "resume_flow":
        # –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
        bot.send_message(uid, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å.")
        step = st["step"]
        # –ø–æ–¥—Å–∫–∞–∑–∫–∞ –∏—Å—Ö–æ–¥—è –∏–∑ —à–∞–≥–∞
        if step in MER_ORDER:
            bot.send_message(uid, mer_prompt_for(step))
        elif step == STEP_ERR_DESCR:
            bot.send_message(uid, "–û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
        elif step == STEP_GOAL:
            bot.send_message(uid, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å: —á—Ç–æ –¥–µ–ª–∞–µ—à—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?")
        elif step == STEP_TOTE_OPS:
            bot.send_message(uid, "–ù–∞–∑–æ–≤–∏ 2‚Äì3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ (–∫–æ—Ä–æ—Ç–∫–æ, —Å–ø–∏—Å–∫–æ–º).")
        elif step == STEP_TOTE_TEST:
            bot.send_message(uid, "–ö–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? –û–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π –∫—Ä–∏—Ç–µ—Ä–∏–π.")
        elif step == STEP_TOTE_EXIT:
            bot.send_message(uid, "–ß—Ç–æ —Å–¥–µ–ª–∞–µ—à—å, –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∂–µ—Ç ¬´–Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª?")
        set_awaiting(uid, st, True)

    elif data == "new_flow":
        st["data"].pop("mer", None)
        st["data"].pop("tote", None)
        st["data"].pop("error_description", None)
        st["data"]["problem_confirmed"] = False
        save_state(uid, INTENT_ERR, STEP_ERR_DESCR, st["data"])
        bot.send_message(uid, "–û–∫–µ–π, –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ. –û–ø–∏—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª—É—á–∞–π: —á—Ç–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª –∏ –≥–¥–µ –æ—Ç—Å—Ç—É–ø–∏–ª?")
        set_awaiting(uid, st, True)

# ========= HTTP =========
@app.get("/")
def root():
    return jsonify({"ok": True, "time": _now_iso()})

@app.get("/version")
def version_api():
    return jsonify({"version": BOT_VERSION, "code_hash": get_code_version(), "status": "running", "timestamp": _now_iso()})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_SECRET:
        abort(401)
    if request.content_length and request.content_length > MAX_BODY:
        abort(413, description="Body too large")
    body = request.get_data()
    if not body:
        abort(400, description="Empty body")
    try:
        update = telebot.types.Update.de_json(body.decode("utf-8"))
        if update is None:
            log.error("Failed to parse update")
            abort(400, description="Invalid update")
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        log.error("Webhook processing error: %s", e)
        abort(500)

# ========= Maintenance & gentle reminders =========
def cleanup_old_states(days: int = 30):
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–° - —É–±—Ä–∞–ª make_interval
        result = db_exec(
            "DELETE FROM user_state WHERE updated_at < NOW() - INTERVAL '1 day' * :days", 
            {"days": days}
        )
        log.info("Old user states cleanup done (> %s days). Deleted: %s", days, result.rowcount)
    except Exception as e:
        log.error("Cleanup error: %s", e)

def reminder_tick():
    """–ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É: –µ—Å–ª–∏ –∂–¥—ë–º –æ—Ç–≤–µ—Ç –∏ —Ç–∏—à–∏–Ω–∞ > REMIND_AFTER_MIN ‚Äî –º—è–≥–∫–∏–π –ø–∏–Ω–≥ (–Ω–µ —á–∞—â–µ REMIND_REPEAT_MIN)."""
    while True:
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–° - —É–±—Ä–∞–ª make_interval, –¥–æ–±–∞–≤–∏–ª –±–µ–∑–æ–ø–∞—Å–Ω—ã–π LIKE
            rows = db_exec("""
                SELECT user_id, intent, step, data
                FROM user_state
                WHERE data::text LIKE '%' || :search_term || '%'
                  AND updated_at < NOW() - INTERVAL '1 minute' * :mins
            """, {
                "search_term": '"awaiting_reply": true', 
                "mins": REMIND_AFTER_MIN
            }).mappings().all()
            
            now = datetime.now(timezone.utc)
            reminder_count = 0
            
            for r in rows:
                try:
                    data = json.loads(r["data"]) if r["data"] else {}
                except Exception:
                    data = {}
                    
                last_ping = _iso_to_dt(data.get("reminder_sent_at"))
                if last_ping and (now - last_ping) < timedelta(minutes=REMIND_REPEAT_MIN):
                    continue
                    
                # –æ—Ç–ø—Ä–∞–≤–∏–º –º—è–≥–∫–∏–π –ø–∏–Ω–≥
                try:
                    bot.send_message(r["user_id"], "–ö–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∏–º. –ú–æ–≥—É –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–æ–ø—Ä–æ—Å.")
                    data["reminder_sent_at"] = _now_iso()
                    save_state(r["user_id"], data=data)
                    reminder_count += 1
                except Exception as e:
                    log.error(f"Failed to send reminder to {r['user_id']}: {e}")
                    
            if reminder_count > 0:
                log.info(f"Sent {reminder_count} reminders")
                
        except Exception as e:
            log.error(f"Reminder error: {e}")
        time.sleep(60)

def cleanup_scheduler():
    while True:
        time.sleep(24 * 60 * 60)  # 24 hours
        cleanup_old_states(30)

# ========= Init on import (for gunicorn) =========
try:
    init_db()
    log.info("DB initialized (import)")
except Exception as e:
    log.error("DB init (import) failed: %s", e)

if SET_WEBHOOK_FLAG:
    try:
        bot.remove_webhook()
        time.sleep(1)
        bot.set_webhook(
            url=f"{PUBLIC_URL}/{WEBHOOK_PATH}",
            secret_token=TG_SECRET,
            allowed_updates=["message", "callback_query"]
        )
        log.info("Webhook set to %s/%s", PUBLIC_URL, WEBHOOK_PATH)
    except Exception as e:
        log.error("Webhook setup error: %s", e)

# —Ñ–æ–Ω–æ–≤–∞—è —á–∏—Å—Ç–∫–∞ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å
try:
    threading.Thread(target=cleanup_scheduler, daemon=True).start()
    threading.Thread(target=reminder_tick, daemon=True).start()
    log.info("Background threads started")
except Exception as e:
    log.error("Can't start background threads: %s", e)

# ========= Dev run =========
if __name__ == "__main__":
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)