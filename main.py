# --- PATCH: –º—è–≥–∫–∞—è –ø—Ä–µ—Ñ–∞–∑–∞ + –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Ç–µ–Ω—Ç–∞ "–£ –º–µ–Ω—è –æ—à–∏–±–∫–∞"
from telebot import types
import re
import json
from datetime import datetime

FREE_ROUNDS = 3  # —Å–∫–æ–ª—å–∫–æ —Ä–µ–ø–ª–∏–∫ —Å–æ–±—Ä–∞—Ç—å –¥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
VAGUE_WORDS = ["–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω", "–∏–Ω–æ–≥–¥–∞", "–±—ã–≤–∞–µ—Ç", "–∫–∞–∫–∏–µ-—Ç–æ", "–∫–∞–∫-—Ç–æ", "–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏", "—Ä–µ–¥–∫–æ", "—á–∞—Å—Ç–æ"]

BEHAVIOR_VERBS = [
    "–≤—Ö–æ–∂—É","–≤–æ–π—Ç–∏","–∑–∞–∫—Ä—ã–≤–∞—é","–∑–∞–∫—Ä—ã—Ç—å","–¥–≤–∏–≥–∞—é","–¥–≤–∏–≥–∞—Ç—å","–ø–µ—Ä–µ–Ω–æ—à—É",
    "—É—Å—Ä–µ–¥–Ω—è—é","—É—Å—Ä–µ–¥–Ω–∏—Ç—å","–ø–µ—Ä–µ—Å–∏–∂–∏–≤–∞—é","–ø–µ—Ä–µ—Å–∏–¥–µ—Ç—å","–¥–æ–±–∞–≤–ª—è—é","–¥–æ–±–∞–≤–∏—Ç—å",
    "—Å–Ω–∏–∂–∞—é","—Å–Ω–∏–∑–∏—Ç—å","–ø–æ–≤—ã—à–∞—é","–ø–æ–≤—ã—Å–∏—Ç—å","—É–¥–≤–∞–∏–≤–∞—é","—É–¥–≤–æ–∏—Ç—å","—Ñ–∏–∫—Å–∏—Ä—É—é","–∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å",
    "–Ω–µ —Å—Ç–∞–≤–ª—é","—Å—Ç–∞–≤–ª—é","–º–µ–Ω—è—é","–º–µ–Ω—è—Ç—å","–ø—Ä—ã–≥–∞—é","–ø—Ä—ã–≥–∞—Ç—å","–ª–æ–º–∞—é","–ª–æ–º–∞—Ç—å"
]

def _load_state(user_id: int):
    if not engine:
        return {"intent": None, "data": {}}
    with engine.connect() as conn:
        row = conn.execute(text("SELECT intent, COALESCE(data,'{}'::jsonb) FROM user_state WHERE user_id=:uid"),
                           {"uid": user_id}).fetchone()
        if not row:
            return {"intent": None, "data": {}}
        intent, data = row
        return {"intent": intent, "data": dict(data)}

def _merge_state(user_id: int, **patch):
    st = _load_state(user_id)
    data = st["data"] or {}
    data.update(patch)
    save_state(user_id, st.get("intent") or "idle", data)

def _push_note(user_id: int, note: str):
    st = _load_state(user_id)
    data = st["data"] or {}
    notes = data.get("free_notes", [])
    notes.append(note.strip())
    if len(notes) > 8:
        notes = notes[-8:]
    data["free_notes"] = notes
    save_state(user_id, st.get("intent") or "idle", data)

def _has_behavior(text_: str) -> bool:
    t = text_.lower()
    return any(v in t for v in BEHAVIOR_VERBS)

def _has_vague(text_: str) -> bool:
    t = text_.lower()
    return any(v in t for v in VAGUE_WORDS)

def _propose_summary(notes: list[str]) -> str:
    # –ü—Ä–æ—Å—Ç–∞—è —Å–±–æ—Ä–∫–∞: –∏—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç/—ç–º–æ—Ü–∏–∏/–ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–∏–∫–∞–º; –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ OpenAI.
    joined = " ".join(notes[-5:])
    # —ç–≤—Ä–∏—Å—Ç–∏–∫–∏
    context = ""
    emotions = ""
    behavior = ""
    # –∫–æ–Ω—Ç–µ–∫—Å—Ç
    m_ctx = re.search(r"(–∫–æ–≥–¥–∞|–≤ –¥–Ω–∏|–ø–æ—Å–ª–µ|–ø–µ—Ä–µ–¥|–≤ —Å–∏—Ç—É–∞—Ü)[^\.]{5,80}", joined, flags=re.I)
    if m_ctx: context = m_ctx.group(0)
    # —ç–º–æ—Ü–∏–∏
    m_em = re.search(r"(—Ç—Ä–µ–≤–æ–≥|—Å—Ç—Ä–∞—Ö|–∞–∑–∞—Ä—Ç|–Ω–∞–ø—Ä—è–∂–µ–Ω|–ø–∞–Ω–∏–∫|–¥–∞–≤–ª–µ–Ω)[^\.]{0,40}", joined, flags=re.I)
    if m_em: emotions = m_em.group(0)
    # –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    for v in BEHAVIOR_VERBS:
        if v in joined.lower():
            # –≤–æ–∑—å–º—ë–º 8‚Äì12 —Å–ª–æ–≤ –≤–æ–∫—Ä—É–≥
            m = re.search(rf"(.{{0,60}}{re.escape(v)}.{{0,60}})", joined, flags=re.I)
            if m: behavior = m.group(1)
            break
    behavior = behavior or joined[:120]

    parts = []
    if context:  parts.append(f"–ö–æ–≥–¥–∞ {context.strip().rstrip('.')}")
    if behavior: parts.append(f"—è {behavior.strip().rstrip('.')}")
    if emotions: parts.append(f"(–æ–±—ã—á–Ω–æ —á—É–≤—Å—Ç–≤–∞: {emotions.strip().rstrip('.')})")
    s = " ‚Üí ".join(parts) or joined[:160]
    # –ø–æ–¥—á–∏—Å—Ç–∏–º –ø–æ–≤—Ç–æ—Ä—ã
    s = re.sub(r"\s+", " ", s).strip()
    return s

def _ask_confirm(chat_id: int, summary: str):
    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton("–î–∞, –≤–µ—Ä–Ω–æ", callback_data="sum_yes"),
        types.InlineKeyboardButton("–ù–µ —Å–æ–≤—Å–µ–º", callback_data="sum_no"),
    )
    bot.send_message(
        chat_id,
        f"–ó–∞—Ñ–∏–∫—Å–∏—Ä—É—é —Ç–∞–∫:\n\n‚Äî *{summary}*\n\n–í–µ—Ä–Ω–æ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª?",
        reply_markup=kb
    )

# –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–£ –º–µ–Ω—è –æ—à–∏–±–∫–∞¬ª
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def intent_error_soft(m):
    save_state(m.from_user.id, "error", {"phase": "free", "free_notes": [], "round": 0})
    bot.send_message(
        m.chat.id,
        "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–∞ *—É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞*.\n"
        "–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.",
        reply_markup=main_menu()
    )

# –°–ª—É—à–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑ –≤ —Ñ–∞–∑–µ "free"
@bot.message_handler(func=lambda msg: _load_state(msg.from_user.id).get("intent") == "error"
                               and (_load_state(msg.from_user.id).get("data") or {}).get("phase") == "free"
                               and msg.content_type == "text")
def error_free_collect(m):
    st = _load_state(m.from_user.id)
    data = st["data"]; rnd = int(data.get("round", 0))
    text_in = (m.text or "").strip()

    # –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º
    _push_note(m.from_user.id, text_in)
    rnd += 1
    _merge_state(m.from_user.id, round=rnd)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ¬´—Ä–∞–∑–º—ã—Ç–æ—Å—Ç—å¬ª ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É
    if _has_vague(text_in):
        bot.send_message(
            m.chat.id,
            "–ü–æ–Ω—è–ª. –î–∞–≤–∞–π —á—É—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ: *–≤ –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –¥–Ω–∏/—É—Å–ª–æ–≤–∏—è—Ö* —ç—Ç–æ —Å–ª—É—á–∞–µ—Ç—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏ —Å—Ç–æ–ø–æ–≤¬ª, ¬´–ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –¥–Ω—è¬ª, ¬´–ø–æ—Å–ª–µ –Ω–æ–≤–æ—Å—Ç–µ–π¬ª)",
            reply_markup=main_menu()
        )
        return

    # –µ—Å–ª–∏ —è–≤–Ω–æ –Ω–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è ‚Äî –º—è–≥–∫–æ –ø–æ–¥–≤–µ–¥—ë–º
    if not _has_behavior(text_in):
        bot.send_message(
            m.chat.id,
            "–£—Ç–æ—á–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, *—á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –¥–µ–ª–∞–µ—à—å* –≤ —ç—Ç–∏ –º–æ–º–µ–Ω—Ç—ã (–≥–ª–∞–≥–æ–ª–∞–º–∏): ¬´–≤—Ö–æ–∂—É —Ä–∞–Ω—å—à–µ¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø¬ª, ¬´—É—Å—Ä–µ–¥–Ω—è—é¬ª –∏ —Ç.–ø.",
            reply_markup=main_menu()
        )
        return

    # –¥–æ—Å—Ç–∏–≥–ª–∏ –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if rnd >= FREE_ROUNDS:
        notes = _load_state(m.from_user.id)["data"].get("free_notes", [])
        summary = _propose_summary(notes)
        _merge_state(m.from_user.id, summary=summary)
        _ask_confirm(m.chat.id, summary)
        return

    # –∏–Ω–∞—á–µ –∑–∞–¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π –º—è–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å
    prompts = [
        "–ì–¥–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —ç—Ç–æ —á–∞—â–µ —Å–ª—É—á–∞–µ—Ç—Å—è? (—É—Ç—Ä–æ/–∫–æ–Ω–µ—Ü –¥–Ω—è/–ø–æ—Å–ª–µ —É–±—ã—Ç–æ—á–Ω–æ–π —Å–µ—Ä–∏–∏)",
        "–ö–∞–∫–∏–µ —á—É–≤—Å—Ç–≤–∞ –≤—Å–ø–ª—ã–≤–∞—é—Ç —Å–∏–ª—å–Ω–µ–µ –≤—Å–µ–≥–æ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (—Ç—Ä–µ–≤–æ–≥–∞/—Å–ø–µ—à–∫–∞/—Å—Ç—Ä–∞—Ö —É–ø—É—Å—Ç–∏—Ç—å –∏ —Ç.–ø.)",
        "–ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç –æ—à–∏–±–∫–µ? (–Ω–µ—Ç —Å–µ—Ç–∞–ø–æ–≤ –¥–æ–ª–≥–æ, –Ω–æ–≤–æ—Å—Ç–∏, –∂–µ–ª–∞–Ω–∏–µ ¬´–≤—ã—Ä–≤–∞—Ç—å—Å—è¬ª)",
    ]
    bot.send_message(m.chat.id, prompts[min(rnd-1, len(prompts)-1)], reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏
@bot.callback_query_handler(func=lambda c: c.data in ("sum_yes", "sum_no"))
def on_summary_confirm(c):
    st = _load_state(c.from_user.id)
    data = st["data"]; summary = data.get("summary","").strip()
    if c.data == "sum_yes" and summary:
        # Done-—É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚Üí MERCEDES
        save_state(c.from_user.id, "error_mercedes", {"summary": summary})
        bot.edit_message_text(
            chat_id=c.message.chat.id, message_id=c.message.message_id,
            text=f"–ü—Ä–∏–Ω—è—Ç–æ ‚úÖ\n\n‚Äî *{summary}*\n\n–ü–æ–π–¥—ë–º –∫–æ—Ä–æ—Ç–∫–æ –ø–æ MERCEDES, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω."
        )
        bot.send_message(
            c.message.chat.id,
            "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
            reply_markup=main_menu()
        )
    else:
        # –ø–æ–ø—Ä–æ—Å–∏–º –ø–æ–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É–ª—É –∏ –≤–µ—Ä–Ω—ë–º –≤ free
        save_state(c.from_user.id, "error", {"phase": "free", "free_notes": data.get("free_notes", []), "round": 0})
        bot.edit_message_text(
            chat_id=c.message.chat.id, message_id=c.message.message_id,
            text="–û–∫, –ø–æ–ø—Ä–∞–≤–∏–º —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É. –ß—Ç–æ –±—ã —Ç—ã –¥–æ–±–∞–≤–∏–ª/–∏–∑–º–µ–Ω–∏–ª, —á—Ç–æ–±—ã –±—ã–ª–æ —Ç–æ—á–Ω–µ–µ?"
        )
