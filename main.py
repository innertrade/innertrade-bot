import os, json, time, logging
from datetime import datetime, timezone
from flask import Flask, request, abort, jsonify
import requests
from telebot import TeleBot, types
from telebot.util import quick_markup

# ---------- ENV ----------
TELEGRAM_TOKEN   = os.getenv("TELEGRAM_TOKEN", "")
WEBHOOK_PATH     = os.getenv("WEBHOOK_PATH", "wbhk_9t3x")
TG_WEBHOOK_SECRET= os.getenv("TG_WEBHOOK_SECRET", "")
PUBLIC_URL       = os.getenv("PUBLIC_URL", "")  # https://<your-app>.onrender.com
DATABASE_URL     = os.getenv("DATABASE_URL", "")
OPENAI_API_KEY   = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL     = os.getenv("OPENAI_MODEL", "gpt-4.1-mini")
OFFSCRIPT_ENABLED= os.getenv("OFFSCRIPT_ENABLED", "true").lower() == "true"
LOG_LEVEL        = os.getenv("LOG_LEVEL", "INFO").upper()
APP_VERSION      = os.getenv("APP_VERSION", "chat-first-2025-08-29")

if not TELEGRAM_TOKEN: raise RuntimeError("TELEGRAM_TOKEN missing")
if not PUBLIC_URL:     raise RuntimeError("PUBLIC_URL missing")

logging.basicConfig(level=getattr(logging, LOG_LEVEL, logging.INFO))
log = logging.getLogger("innertrade")

bot  = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")
app  = Flask(__name__)

# ---------- LIGHTWEIGHT STATE (in-memory for MVP) ----------
# –í –ø—Ä–æ–¥–µ —É –Ω–∞—Å Postgres. –ó–¥–µ—Å—å –¥–µ—Ä–∂–∏–º —Ç–æ–ª—å–∫–æ "–∫—Ç–æ —Ç—ã/–≤—ã, –∏–º—è, –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–±—Ä–æ—Å –ø—Ä–æ–±–ª–µ–º—ã"
MEM = {}  # tg_id -> {"address":"—Ç—ã|–≤—ã", "name":str, "last_issue":str, "intent":str, "step":str}

def mget(uid, key, default=None): return MEM.setdefault(uid, {}).get(key, default)
def mset(uid, **kw): MEM.setdefault(uid, {}).update(kw)

# ---------- GPT ----------
def gpt_reply(system, user):
    if not (OFFSCRIPT_ENABLED and OPENAI_API_KEY):
        return None  # –≤—ã–∫–ª—é—á–µ–Ω–æ/–Ω–µ—Ç –∫–ª—é—á–∞ ‚Äî –ø–æ–π–¥—ë–º –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
    try:
        import openai
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        msg = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role":"system","content": system},
                {"role":"user","content": user}
            ],
            temperature=0.3,
            max_tokens=400
        )
        return msg.choices[0].message.content.strip()
    except Exception as e:
        log.warning(f"GPT fallback: {e}")
        return None

SYSTEM_COACH = (
    "–¢—ã —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –û–±—â–∞–π—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ. "
    "–ü–æ–º–æ–≥–∞–π —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É –Ω–∞ —É—Ä–æ–≤–Ω–µ –Ω–∞–±–ª—é–¥–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞, "
    "–Ω–æ –Ω–µ –¥–∞–≤–∏ –∏ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π —Ç–µ—Ä–º–∏–Ω–∞–º–∏. –ù–µ —É–ø–æ–º–∏–Ω–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Ö–Ω–∏–∫. "
    "–ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–∂–µ –æ–ø–∏—Å–∞–ª –ø—Ä–æ–±–ª–µ–º—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É "
    "—Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –º—è–≥–∫–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ —à–∞–≥–∞–º —Ä–∞–∑–±–æ—Ä–∞."
)

# ---------- KEYBOARDS ----------
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

def yes_no_kb():
    return quick_markup({"–î–∞":{"callback_data":"yes"}, "–ù–µ—Ç":{"callback_data":"no"}}, row_width=2)

# ---------- HELPERS ----------
def greet_name(uid):
    address = mget(uid, "address")
    if address == "–≤—ã": return "–í—ã"
    return "—Ç—ã"

def confirm_issue_if_ready(text: str):
    """
    –û—á–µ–Ω—å –≥—Ä—É–±–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –≥–ª–∞–≥–æ–ª—ã –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ —Ä—ã–Ω–∫–æ–≤–æ–π —Ä—É—Ç–∏–Ω—ã,
    —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —É–∂–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
    """
    verbs = ["–≤—Ö–æ–∂—É", "–≤–æ–π—Ç–∏", "–∑–∞—Ö–æ–∂—É", "–∑–∞–π—Ç–∏",
             "–¥–≤–∏–≥–∞—é", "–¥–≤–∏–≥–∞—Ç—å", "—Å–¥–≤–∏–≥–∞—é", "–ø–µ—Ä–µ–Ω–æ—à—É",
             "–∑–∞–∫—Ä—ã–≤–∞—é", "–∑–∞–∫—Ä—ã—Ç—å", "—É—Å—Ä–µ–¥–Ω—è—é", "—É—Å—Ä–µ–¥–Ω–∏—Ç—å",
             "—Å—Ç–∞–≤–ª—é —Å—Ç–æ–ø", "—É–±–∏—Ä–∞—é —Å—Ç–æ–ø", "—Å—Ç–∞–≤–ª—é –±–µ–∑—É–±—ã—Ç–æ–∫", "—Ñ–∏–∫—Å–∏—Ä—É—é"]
    t = text.lower()
    return any(v in t for v in verbs)

def summarize_issue(text: str):
    """–ú–∏–Ω–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑ –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º (–±–µ–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤)."""
    return f"–°–µ–π—á–∞—Å —Ç–µ–±—è —Å–±–∏–≤–∞–µ—Ç —Å –∫—É—Ä—Å–∞ –≤–æ—Ç —á—Ç–æ: {text.strip()}"

# ---------- HEALTH ----------
@app.get("/health")
def health():
    return jsonify({"status":"ok","time":datetime.now(timezone.utc).isoformat()})

@app.get("/status")
def status():
    return jsonify({
        "ok": True,
        "time": datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S%z"),
        "version": APP_VERSION,
        "offscript": OFFSCRIPT_ENABLED,
        "model": OPENAI_MODEL if OPENAI_API_KEY else None,
        "db": "ok",
    })

# ---------- WEBHOOK ----------
@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if TG_WEBHOOK_SECRET and request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    update = request.get_json(force=True, silent=True)
    try:
        bot.process_new_updates([types.Update.de_json(update)])
    except Exception as e:
        log.exception("update error")
    return "ok"

# ---------- COMMANDS ----------
@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.reply_to(m, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    uid = m.from_user.id
    st = {
        "version": APP_VERSION,
        "offscript": OFFSCRIPT_ENABLED,
        "model": OPENAI_MODEL if OPENAI_API_KEY else None,
        "name": mget(uid, "name"),
        "address": mget(uid, "address"),
        "intent": mget(uid, "intent"),
        "step": mget(uid, "step"),
    }
    bot.reply_to(m, f"```json\n{json.dumps(st, ensure_ascii=False, indent=2)}\n```", parse_mode="Markdown")

@bot.message_handler(commands=["reset"])
def cmd_reset(m):
    uid = m.from_user.id
    MEM[uid] = {}
    msg = "üëã –ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏, —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ.\n\n–ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî *—Ç—ã* –∏–ª–∏ *–≤—ã*? (–Ω–∞–ø–∏—à–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ)"
    bot.send_message(uid, msg, reply_markup=main_menu())

# ---------- STARTUP GREET ----------
@bot.message_handler(func=lambda m: m.text and m.text.lower() in ["–ø—Ä–∏–≤–µ—Ç","hi","hello"])
def greet(m):
    uid = m.from_user.id
    name = m.from_user.first_name or "–¥—Ä—É–≥"
    if not mget(uid, "name"):
        mset(uid, name=name)
    if not mget(uid, "address"):
        bot.reply_to(m, f"üëã –ü—Ä–∏–≤–µ—Ç, {name}! –ö–∞–∫ —É–¥–æ–±–Ω–µ–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è ‚Äî *—Ç—ã* –∏–ª–∏ *–≤—ã*?")
    else:
        bot.reply_to(m, f"–ü—Ä–∏–≤–µ—Ç, {name}! –†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ ‚Äî —è —Ä—è–¥–æ–º.", reply_markup=main_menu())

# ---------- ADDRESS (—Ç—ã/–≤—ã) ----------
@bot.message_handler(func=lambda m: m.text and m.text.strip().lower() in ["—Ç—ã","–≤—ã"])
def set_address(m):
    uid = m.from_user.id
    val = m.text.strip().lower()
    mset(uid, address=val)
    bot.reply_to(m, f"–ü—Ä–∏–Ω—è—Ç–æ ({val}). –ú–æ–∂–µ–º —Å–ø–æ–∫–æ–π–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–µ–π—á–∞—Å –±–æ–ª–∏—Ç, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.", reply_markup=main_menu())

# ---------- MAIN FREE CHAT ----------
@bot.message_handler(func=lambda m: True, content_types=["text"])
def free_chat(m):
    uid = m.from_user.id
    text = (m.text or "").strip()

    # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    if text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞":
        mset(uid, intent="error", step="start")
        return bot.send_message(uid, "–û–∫–µ–π, –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º. –ö–æ—Ä–æ—Ç–∫–æ: —á—Ç–æ –∏–º–µ–Ω–Ω–æ —É–∂–µ –º–µ—à–∞–µ—Ç –≤ –¥–µ–π—Å—Ç–≤–∏—è—Ö? (–º–æ–∂–Ω–æ 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
    if text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é":
        return bot.send_message(uid, "–°–æ–±–µ—Ä—ë–º –ø–æ —à–∞–≥–∞–º: —Ä—ã–Ω–æ–∫/–¢–§ ‚Üí –≤—Ö–æ–¥ ‚Üí —Å—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ ‚Üí —Ä–∏—Å–∫. –ì–æ—Ç–æ–≤?", reply_markup=main_menu())
    if text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç":
        return bot.send_message(uid, "–ü–∞—Å–ø–æ—Ä—Ç: —Ä—ã–Ω–∫–∏, –¢–§, —Å—Ç–∏–ª—å, —Ä–∏—Å–∫, —Ç–æ–ø-–æ—à–∏–±–∫–∏, —Ä–æ–ª–∏, —Ç—Ä–∏–≥–≥–µ—Ä—ã. –ü–æ—Ç–æ–º —Å–º–æ–∂–µ–º –ø—Ä–∞–≤–∏—Ç—å.", reply_markup=main_menu())
    if text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏":
        return bot.send_message(uid, "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏: —Ñ–æ–∫—É—Å, —Ü–µ–ª–∏, –ª–∏–º–∏—Ç—ã, –º–∏–Ω–∏-—á–µ–∫–∏–Ω—ã, —Ä–µ—Ç—Ä–æ. –ü–æ–µ—Ö–∞–ª–∏, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.", reply_markup=main_menu())
    if text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ":
        return bot.send_message(uid, "–°—Ç–æ–ø-–ø—Ä–æ—Ü–µ–¥—É—Ä–∞: –ø–∞—É–∑–∞ 2 –º–∏–Ω ‚Üí —É–±–µ—Ä–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª ‚Üí 10 –≤–¥–æ—Ö–æ–≤ ‚Üí –∑–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä ‚Üí –≤–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É/–∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É.")
    if text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å":
        return bot.send_message(uid, "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫: 1) –ü–∞—Å–ø–æ—Ä—Ç, 2) –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏, 3) –°–∫–µ–ª–µ—Ç –¢–°. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?")

    # –ï—Å–ª–∏ –º—ã –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ "–æ—à–∏–±–∫–∞"
    if mget(uid, "intent") == "error":
        return handle_error_flow(m, text)

    # –ò–Ω–∞—á–µ ‚Äî —Å–≤–æ–±–æ–¥–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä, –Ω–æ —Å –ø–æ–ø—ã—Ç–∫–æ–π –º—è–≥–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É
    if confirm_issue_if_ready(text):
        mset(uid, last_issue=text)
        summary = summarize_issue(text)
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–î–∞, –≤–µ—Ä–Ω–æ", callback_data="issue_ok"),
               types.InlineKeyboardButton("–ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å", callback_data="issue_edit"))
        return bot.send_message(uid, f"{summary}\n\n–ü—Ä–æ–¥–æ–ª–∂–∏–º —Ä–∞–∑–±–æ—Ä –ø–æ —à–∞–≥–∞–º?", reply_markup=kb)

    # –ò–Ω–∞—á–µ ‚Äî —Å–ø—Ä–æ—Å–∏–º —É—Ç–æ—á–Ω—è—é—â–µ, –ª–∏–±–æ –ø–æ–¥–∫–ª—é—á–∏–º GPT –¥–ª—è –º—è–≥–∫–æ–π –±–µ—Å–µ–¥—ã
    reply = gpt_reply(SYSTEM_COACH, text)
    if reply:
        return bot.send_message(uid, reply)
    else:
        return bot.send_message(uid, "–ü–æ–Ω–∏–º–∞—é. –†–∞—Å—Å–∫–∞–∂–∏ –µ—â—ë —á—É—Ç—å-—á—É—Ç—å ‚Äî —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤ —Ç–≤–æ–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö —Å–µ–π—á–∞—Å —á–∞—â–µ –≤—Å–µ–≥–æ —Å–±–∏–≤–∞–µ—Ç —Å –∫—É—Ä—Å–∞?")

@bot.callback_query_handler(func=lambda c: c.data in ["issue_ok","issue_edit"])
def issue_confirm(c):
    uid = c.from_user.id
    if c.data == "issue_ok":
        mset(uid, intent="error", step="start")
        bot.answer_callback_query(c.id, "–û–∫–µ–π, –∏–¥—ë–º –¥–∞–ª—å—à–µ.")
        bot.send_message(uid, "–¢–æ–≥–¥–∞ –∫–æ—Ä–æ—Ç–∫–æ –ø—Ä–æ–π–¥—ë–º—Å—è –ø–æ —à–∞–≥–∞–º. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç?")
    else:
        bot.answer_callback_query(c.id, "–î–∞–≤–∞–π —É—Ç–æ—á–Ω–∏–º. –ù–∞–ø–∏—à–∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫ –±—ã —Ç—ã —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–±–ª–µ–º—É.")

# ---------- ERROR FLOW (–±–µ–∑ —Å–ª–æ–≤ ¬´Mercedes¬ª/¬´TOTE¬ª) ----------
def handle_error_flow(m, text):
    uid = m.from_user.id
    step = mget(uid, "step") or "start"

    if step == "start":
        if not text or len(text) < 4:
            return bot.reply_to(m, "–î–æ–±–∞–≤—å –ø–∞—Ä—É –¥–µ—Ç–∞–ª–µ–π: —á—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ—à—å (–≥–ª–∞–≥–æ–ª–∞–º–∏), –≥–¥–µ —ç—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ —Å–ª—É—á–∞–µ—Ç—Å—è?")
        mset(uid, step="ctx", issue=text)
        return bot.reply_to(m, "–ü–æ–Ω—è–ª. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –≤—Å–ø–ª—ã–≤–∞–µ—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç?")

    if step == "ctx":
        mset(uid, step="emo", ctx=text)
        return bot.reply_to(m, "–ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–∏ –º–æ–º–µ–Ω—Ç—ã? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")

    if step == "emo":
        mset(uid, step="thought", emo=text)
        return bot.reply_to(m, "–ö–∞–∫–∏–µ –º—ã—Å–ª–∏ –∫—Ä—É—Ç—è—Ç—Å—è —Ç–æ–≥–¥–∞? (1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã)")

    if step == "thought":
        mset(uid, step="beh", thought=text)
        return bot.reply_to(m, "–ß—Ç–æ –≤ –∏—Ç–æ–≥–µ –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).")

    if step == "beh":
        mset(uid, step="goal", beh=text)
        # –†–µ–∑—é–º–µ –±–µ–∑ —Ç—è–∂—ë–ª—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        issue   = mget(uid, "issue","")
        ctx     = mget(uid, "ctx","")
        emo     = mget(uid, "emo","")
        thought = mget(uid, "thought","")
        beh     = mget(uid, "beh","")
        resume = (
            "*–†–µ–∑—é–º–µ:*\n"
            f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞: {issue}\n"
            f"‚Ä¢ –°–∏—Ç—É–∞—Ü–∏—è: {ctx}\n"
            f"‚Ä¢ –ß—É–≤—Å—Ç–≤–∞: {emo}\n"
            f"‚Ä¢ –ú—ã—Å–ª–∏: {thought}\n"
            f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è: {beh}\n\n"
            "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º ‚Äî —á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?"
        )
        return bot.reply_to(m, resume)

    if step == "goal":
        if not text or len(text) < 4:
            return bot.reply_to(m, "–°–∫–∞–∂–∏ —Ü–µ–ª—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º (—á—Ç–æ –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è).")
        mset(uid, step="ops", goal=text)
        return bot.reply_to(m, "–û—Ç–ª–∏—á–Ω–æ. –ö–∞–∫–∏–µ 2‚Äì3 —à–∞–≥–∞ –ø–æ–º–æ–≥—É—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è —ç—Ç–æ–π —Ü–µ–ª–∏ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö *3* —Å–¥–µ–ª–∫–∞—Ö?")

    if step == "ops":
        mset(uid, step="check", ops=text)
        return bot.reply_to(m, "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? (–∫—Ä–∏—Ç–µ—Ä–∏–π: —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —á—Ç–æ–±—ã —Å–∫–∞–∑–∞—Ç—å ¬´–ø–æ–ª—É—á–∏–ª–æ—Å—å¬ª?)")

    if step == "check":
        mset(uid, step="exit", check=text)
        return bot.reply_to(m, "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à—Ç—Ä–∏—Ö: —á—Ç–æ —Å–¥–µ–ª–∞–µ—à—å –ø–æ –∏—Ç–æ–≥–∞–º –º–∏–Ω–∏-—Ü–∏–∫–ª–∞ ‚Äî –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–æ—Å—å / –µ—Å–ª–∏ –Ω–µ—Ç? (1‚Äì2 —Ñ—Ä–∞–∑—ã)")

    if step == "exit":
        mset(uid, step=None, intent=None, exit=text)
        # –ò—Ç–æ–≥
        goal  = mget(uid,"goal","")
        ops   = mget(uid,"ops","")
        check = mget(uid,"check","")
        exitp = mget(uid,"exit","")
        out = (
            "*–ò—Ç–æ–≥ –º–∏–Ω–∏-–ø–ª–∞–Ω–∞:*\n"
            f"‚Ä¢ –¶–µ–ª—å: {goal}\n"
            f"‚Ä¢ –®–∞–≥–∏: {ops}\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞: {check}\n"
            f"‚Ä¢ –ß—Ç–æ –¥–∞–ª—å—à–µ: {exitp}\n\n"
            "–ì–æ—Ç–æ–≤–æ. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏?"
        )
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏", callback_data="wk_add"),
               types.InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å", callback_data="wk_skip"))
        return bot.reply_to(m, out, reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data in ["wk_add","wk_skip"])
def week_panel_choice(c):
    uid = c.from_user.id
    if c.data == "wk_add":
        bot.answer_callback_query(c.id, "–î–æ–±–∞–≤–∏–ª –≤ –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å (MVP-–ø–æ–º–µ—Ç–∫–∞).")
        bot.send_message(uid, "–ó–∞–ø–∏—Å–∞–ª –∫–∞–∫ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏. –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é?", reply_markup=main_menu())
    else:
        bot.answer_callback_query(c.id, "–û–∫.")
        bot.send_message(uid, "–û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å. –ß–µ–º –µ—â—ë –ø–æ–º–æ—á—å?", reply_markup=main_menu())

# ---------- APP RUN ----------
if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", "10000")))
