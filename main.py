# main.py
import os
import logging
from datetime import datetime
from flask import Flask, request, abort, jsonify
from telebot import TeleBot, types
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

# ----------------- –õ–û–ì–ò -----------------
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format="%(asctime)s %(levelname)s %(message)s"
)
log = logging.getLogger("innertrade")

# ----------------- ENV ------------------
TELEGRAM_TOKEN     = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY")  # –Ω–∞ –±—É–¥—É—â–µ–µ
DATABASE_URL       = os.getenv("DATABASE_URL")
PUBLIC_URL         = os.getenv("PUBLIC_URL")      # –Ω–∞–ø—Ä. https://innertrade-bot.onrender.com
WEBHOOK_PATH       = os.getenv("WEBHOOK_PATH", "tg")  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –Ω–∞–ø—Ä. abcd123
TG_WEBHOOK_SECRET  = os.getenv("TG_WEBHOOK_SECRET")   # —Å–µ–∫—Ä–µ—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Telegram-Bot-Api-Secret-Token
MAX_BODY_BYTES     = int(os.getenv("MAX_BODY_BYTES", "1000000"))  # 1 –ú–ë –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –ñ—ë—Å—Ç–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
missing = [k for k, v in {
    "TELEGRAM_TOKEN": TELEGRAM_TOKEN,
    "PUBLIC_URL": PUBLIC_URL,
    "TG_WEBHOOK_SECRET": TG_WEBHOOK_SECRET
}.items() if not v]
if missing:
    raise RuntimeError(f"Missing env vars: {', '.join(missing)}")

# ----------------- DB -------------------
engine = None
if DATABASE_URL:
    engine = create_engine(DATABASE_URL, pool_pre_ping=True, pool_recycle=300)

SCHEMA_SQL = """
CREATE TABLE IF NOT EXISTS users (
  user_id    BIGINT PRIMARY KEY,
  mode       TEXT NOT NULL DEFAULT 'course',
  created_at TIMESTAMPTZ DEFAULT now(),
  updated_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE IF NOT EXISTS user_state (
  user_id    BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
  intent     TEXT,
  step       TEXT,
  data       JSONB,
  updated_at TIMESTAMPTZ DEFAULT now()
);

CREATE TABLE IF NOT EXISTS errors (
  id                BIGSERIAL PRIMARY KEY,
  user_id           BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  error_text        TEXT NOT NULL,
  pattern_behavior  TEXT,
  pattern_emotion   TEXT,
  pattern_thought   TEXT,
  positive_goal     TEXT,
  tote_goal         TEXT,
  tote_ops          TEXT,
  tote_check        TEXT,
  tote_exit         TEXT,
  checklist_pre     TEXT,
  checklist_post    TEXT,
  created_at        TIMESTAMPTZ DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_errors_user ON errors(user_id);

CREATE TABLE IF NOT EXISTS archetypes (
  id             BIGSERIAL PRIMARY KEY,
  user_id        BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  lead_archetype TEXT,
  roles          JSONB,
  subparts       JSONB,
  conflicts      JSONB,
  created_at     TIMESTAMPTZ DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_archetypes_user ON archetypes(user_id);

CREATE TABLE IF NOT EXISTS beliefs_values (
  id          BIGSERIAL PRIMARY KEY,
  user_id     BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  beliefs     JSONB,
  values      JSONB,
  conflicts   JSONB,
  reframes    JSONB,
  created_at  TIMESTAMPTZ DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_beliefs_user ON beliefs_values(user_id);

CREATE TABLE IF NOT EXISTS integration (
  id            BIGSERIAL PRIMARY KEY,
  user_id       BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
  key_error_refs JSONB,
  key_roles     JSONB,
  key_beliefs   JSONB,
  key_values    JSONB,
  rules_to_ts   TEXT,
  export_link   TEXT,
  created_at    TIMESTAMPTZ DEFAULT now()
);
CREATE INDEX IF NOT EXISTS idx_integration_user ON integration(user_id);
"""

def init_db():
    if not engine:
        log.info("DATABASE_URL not set ‚Äî running without DB")
        return
    try:
        with engine.begin() as conn:
            conn.execute(text(SCHEMA_SQL))
        log.info("DB schema ensured")
    except SQLAlchemyError as e:
        log.error("DB init failed: %s", e)

def upsert_user(user_id: int):
    if not engine:
        return
    try:
        with engine.begin() as conn:
            conn.execute(text("""
                INSERT INTO users(user_id) VALUES (:uid)
                ON CONFLICT (user_id) DO UPDATE SET updated_at = now()
            """), {"uid": user_id})
    except SQLAlchemyError as e:
        log.warning("upsert_user failed uid=%s: %s", user_id, e)

def save_state(user_id: int, intent: str, step: str | None = None, data: dict | None = None):
    if not engine:
        return
    try:
        with engine.begin() as conn:
            conn.execute(text("""
                INSERT INTO user_state(user_id, intent, step, data, updated_at)
                VALUES (:uid, :intent, :step, COALESCE(:data, '{}'::jsonb), now())
                ON CONFLICT (user_id) DO UPDATE
                SET intent = EXCLUDED.intent,
                    step   = EXCLUDED.step,
                    data   = EXCLUDED.data,
                    updated_at = now()
            """), {"uid": user_id, "intent": intent, "step": step, "data": data})
    except SQLAlchemyError as e:
        log.warning("save_state failed uid=%s intent=%s: %s", user_id, intent, e)

# ----------------- TELEGRAM -------------------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

@bot.message_handler(commands=["start", "menu", "reset"])
def cmd_start(m):
    upsert_user(m.from_user.id)
    save_state(m.from_user.id, "idle")
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*.\n–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

# --------- –ò–Ω—Ç–µ–Ω—Ç—ã (–∫–Ω–æ–ø–∫–∏) ----------
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def intent_error(m):
    save_state(m.from_user.id, "error")
    bot.send_message(
        m.chat.id,
        "–î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º —á–µ—Ä–µ–∑ *MERCEDES + TOTE*.\n\n"
        "*M* –ú–æ—Ç–∏–≤–∞—Ü–∏—è?\n*E* –≠–º–æ—Ü–∏–∏?\n*R* –†–µ–∑—É–ª—å—Ç–∞—Ç?\n*C* –ö–æ–Ω—Ç–µ–∫—Å—Ç?\n*E* –≠—Ñ—Ñ–µ–∫—Ç?\n*D* –î–µ–π—Å—Ç–≤–∏—è?\n*S* –°—Ç—Ä–∞—Ç–µ–≥–∏—è?\n\n"
        "*T* Test ‚Äî —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫?\n*O* Operate ‚Äî —á—Ç–æ —Å–¥–µ–ª–∞–ª?\n*T* Test ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç?\n*E* Evolve ‚Äî —á—Ç–æ –∏–∑–º–µ–Ω–∏—à—å?",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def intent_strategy(m):
    save_state(m.from_user.id, "strategy")
    bot.send_message(
        m.chat.id,
        "–û–∫, —Å–æ–±–∏—Ä–∞–µ–º –¢–° –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É:\n"
        "1) –¶–µ–ª–∏\n2) –°—Ç–∏–ª—å (–¥–Ω–µ–≤–Ω–æ–π/—Å–≤–∏–Ω–≥/–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π)\n"
        "3) –†—ã–Ω–∫–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n4) –ü—Ä–∞–≤–∏–ª–∞ –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞\n"
        "5) –†–∏—Å–∫ (%, —Å—Ç–æ–ø)\n6) –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ\n7) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–∏—Å—Ç–æ—Ä–∏—è/–¥–µ–º–æ)",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def intent_passport(m):
    save_state(m.from_user.id, "passport")
    bot.send_message(
        m.chat.id,
        "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. 1/6) –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å?",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def intent_week_panel(m):
    save_state(m.from_user.id, "week_panel")
    bot.send_message(
        m.chat.id,
        "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏:\n‚Ä¢ –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n‚Ä¢ –ü–ª–∞–Ω (3 —à–∞–≥–∞)\n‚Ä¢ –õ–∏–º–∏—Ç—ã\n‚Ä¢ –†–∏—Ç—É–∞–ª—ã\n‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def intent_panic(m):
    save_state(m.from_user.id, "panic")
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–æ–º\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
        "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä (—á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–±–∏–ª–æ)\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def intent_start_help(m):
    save_state(m.from_user.id, "start_help")
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω)\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°\n"
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º ‚Äî –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏?",
        reply_markup=main_menu()
    )

@bot.message_handler(content_types=["text"])
def fallback(m):
    bot.send_message(
        m.chat.id,
        "–ü—Ä–∏–Ω—è–ª. –ß—Ç–æ–±—ã –±—ã–ª–æ –±—ã—Å—Ç—Ä–µ–µ, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /menu.",
        reply_markup=main_menu()
    )

# ----------------- FLASK -----------------
app = Flask(__name__)

@app.get("/")
def root():
    return "OK", 200

@app.get("/health")
def health():
    return jsonify({
        "status": "ok",
        "time": datetime.utcnow().isoformat() + "Z",
        "webhook": f"{PUBLIC_URL}/webhook/{WEBHOOK_PATH}"
    })

@app.post(f"/webhook/{WEBHOOK_PATH}")
def webhook():
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–µ—Ä–∏–º–µ—Ç—Ä–∞
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    if request.content_length and request.content_length > MAX_BODY_BYTES:
        abort(413)

    try:
        # TeleBot –ø–æ–Ω–∏–º–∞–µ—Ç Update –∏–∑ JSON-—Å—Ç—Ä–æ–∫–∏
        update_json = request.get_data(as_text=True)
        update = types.Update.de_json(update_json)
        bot.process_new_updates([update])
    except Exception as e:
        log.exception("Update handling failed: %s", e)
        return "ERR", 500
    return "OK", 200

def ensure_webhook():
    url = f"{PUBLIC_URL}/webhook/{WEBHOOK_PATH}"
    try:
        ok = bot.set_webhook(
            url=url,
            secret_token=TG_WEBHOOK_SECRET,
            drop_pending_updates=False,
            max_connections=40
        )
        if ok:
            log.info("Webhook set to %s", url)
        else:
            log.warning("bot.set_webhook returned False")
    except Exception as e:
        log.error("set_webhook failed: %s", e)

# ----------------- ENTRY -----------------
if __name__ == "__main__":
    init_db()
    ensure_webhook()
    port = int(os.getenv("PORT", "10000"))
    log.info("Starting Flask on 0.0.0.0:%s", port)
    app.run(host="0.0.0.0", port=port)
