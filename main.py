# main.py
import os, json, logging, time
from datetime import datetime, timezone
from typing import Optional, Dict, Any

from flask import Flask, request, jsonify, abort
from telebot import TeleBot, types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, Update

from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError

from openai import OpenAI

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")
log = logging.getLogger("innertrade")

# ---------- ENV ----------
TELEGRAM_TOKEN  = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY  = os.getenv("OPENAI_API_KEY")
DATABASE_URL    = os.getenv("DATABASE_URL")
PUBLIC_URL      = os.getenv("PUBLIC_URL")         # –Ω–∞–ø—Ä–∏–º–µ—Ä: https://innertrade-bot.onrender.com
WEBHOOK_PATH    = os.getenv("WEBHOOK_PATH", "webhook")
WEBHOOK_SECRET  = os.getenv("WEBHOOK_SECRET")      # X-Telegram-Bot-Api-Secret-Token

if not TELEGRAM_TOKEN: raise RuntimeError("TELEGRAM_TOKEN missing")
if not OPENAI_API_KEY: raise RuntimeError("OPENAI_API_KEY missing")
if not PUBLIC_URL:     raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")
if not WEBHOOK_SECRET: log.warning("WEBHOOK_SECRET not set (dev only). Set it in production.")

# ---------- OPENAI ----------
oa = OpenAI(api_key=OPENAI_API_KEY)

# ---------- DB ----------
engine = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True)
        with engine.begin() as conn:
            # –ú–∏–Ω–∏–º—É–º —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–¥–µ—Å—å. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –º—ã —É–∂–µ –Ω–∞–∫–∞—Ç—ã–≤–∞–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–µ–π.
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS users (
                user_id BIGINT PRIMARY KEY,
                mode TEXT NOT NULL DEFAULT 'course',
                created_at TIMESTAMPTZ DEFAULT now(),
                updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS user_state (
                user_id BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
                intent  TEXT,
                step    TEXT,
                data    JSONB,
                updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
        log.info("DB connected & minimal schema ensured")
    except OperationalError as e:
        log.warning(f"DB not available yet: {e}")
        engine = None
else:
    log.info("DATABASE_URL not set ‚Äî running without DB")

def db_exec(sql: str, params: Optional[Dict[str, Any]] = None):
    if not engine: return None
    with engine.begin() as conn:
        return conn.execute(text(sql), params or {})

def ensure_user(uid: int):
    if not engine: return
    db_exec("INSERT INTO users(user_id) VALUES (:u) ON CONFLICT (user_id) DO NOTHING", {"u": uid})

def load_state(uid: int) -> Dict[str, Any]:
    if not engine:
        return {"intent": "greet", "step": None, "data": {}}
    row = db_exec("SELECT intent, step, data FROM user_state WHERE user_id = :u", {"u": uid}).fetchone()
    if not row:
        db_exec("""INSERT INTO user_state(user_id, intent, step, data)
                   VALUES (:u, 'greet', NULL, '{}'::jsonb)
                   ON CONFLICT (user_id) DO NOTHING""", {"u": uid})
        return {"intent": "greet", "step": None, "data": {}}
    intent, step, data = row
    return {"intent": intent, "step": step, "data": data or {}}

def save_state(uid: int, intent: Optional[str] = None, step: Optional[str] = None, patch: Optional[Dict[str, Any]] = None):
    if not engine: return
    st = load_state(uid)
    if intent is not None: st["intent"] = intent
    if step   is not None: st["step"]   = step
    if patch:
        base = st.get("data") or {}
        base.update(patch)
        st["data"] = base
    db_exec("""
        INSERT INTO user_state (user_id, intent, step, data, updated_at)
        VALUES (:u, :i, :s, COALESCE(:d, '{}'::jsonb), now())
        ON CONFLICT (user_id) DO UPDATE
        SET intent=EXCLUDED.intent, step=EXCLUDED.step, data=EXCLUDED.data, updated_at=now()
    """, {"u": uid, "i": st["intent"], "s": st["step"], "d": json.dumps(st.get("data") or {})})

# ---------- –ë–û–¢ ----------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –°–æ–±—Ä–∞—Ç—å –¢–°")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

# --- –£—Ç–∏–ª–∏—Ç—ã –¥–∏–∞–ª–æ–≥–∞ ---
START_ERROR_WORDS = {
    "—Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏", "–¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º", "–¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä—ë–º", "—Ä–∞–∑–±–µ—Ä–µ–º", "—Ä–∞–∑–±–µ—Ä—ë–º",
    "—É –º–µ–Ω—è –æ—à–∏–±–∫–∞", "–æ—à–∏–±–∫–∞", "–ø–æ–ø–ª—ã–ª", "—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ"
}

def looks_like_error_free_text(t: str) -> bool:
    t = (t or "").lower()
    keys = ["–æ—à–∏–±", "–ø—Ä–æ—Å–∞–¥", "–Ω–∞—Ä—É—à–∞", "—Å—É–µ—Ç", "—Å—Ç–æ–ø", "—Ç–µ–π–∫", "—É—Å—Ä–µ–¥–Ω", "—Ä–∞–Ω—å—à–µ", "–ø–æ–∑–¥–Ω–æ", "—Å–ª–∏–≤–∞"]
    return any(k in t for k in keys)

def build_inline_yesno(cb_yes: str, cb_no: str, text_yes="–î–∞", text_no="–ü–æ–∫–∞ –ø–æ–≥–æ–≤–æ—Ä–∏–º"):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton(text_yes, callback_data=cb_yes),
           InlineKeyboardButton(text_no,  callback_data=cb_no))
    return kb

def summarize_for_user(texts: list[str]) -> str:
    # –ú—è–≥–∫–∞—è –∫—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞ (–æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
    joined = " ".join(texts)[-2000:]
    try:
        rsp = oa.responses.create(
            model="gpt-4.1-mini",
            input=f"–°—É–º–º–∞—Ä–∏–∑—É–π –ø—Ä–æ–±–ª–µ–º—É —Ç—Ä–µ–π–¥–µ—Ä–∞ –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏, –±–µ–∑ —Å–æ–≤–µ—Ç–æ–≤, –±–µ–∑ –∫–ª–∏—à–µ. –¢–µ–∫—Å—Ç: {joined}"
        )
        return rsp.output_text.strip()
    except Exception:
        return "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É—é —Ç–∞–∫: –µ—Å—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å–æ —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª–∞–º –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —ç–º–æ—Ü–∏—è–º–∏ –≤ —Å–¥–µ–ª–∫–µ."

# --- –ö–æ–º–∞–Ω–¥—ã ---
@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m: types.Message):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="greet", step=None, patch={"chat_buf": [], "buf_turns": 0})
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*. –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏, —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ.\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ, –µ—Å–ª–∏ —É–¥–æ–±–Ω–µ–µ –∏–¥—Ç–∏ –ø–æ —à–∞–≥–∞–º.",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(m): bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    uid = m.from_user.id
    st = load_state(uid)
    bot.send_message(
        m.chat.id,
        "```\n" + json.dumps({
            "ok": True,
            "time": datetime.now(timezone.utc).isoformat(timespec="seconds"),
            "intent": st.get("intent"),
            "step": st.get("step"),
            "db": "ok" if engine else "no-db"
        }, ensure_ascii=False, indent=2) + "\n```",
        parse_mode="Markdown"
    )

# --- INTENT –ö–ù–û–ü–ö–ò ---
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def btn_error(m):
    start_error_flow(m, from_button=True)

@bot.message_handler(func=lambda msg: msg.text == "üß© –°–æ–±—Ä–∞—Ç—å –¢–°")
def btn_ts(m):
    uid = m.from_user.id
    ensure_user(uid); save_state(uid, intent="ts", step="intro")
    bot.send_message(m.chat.id, "–ù–∞—á–Ω—ë–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¢–° —á—É—Ç—å –ø–æ–∑–∂–µ ‚Äî —Å–µ–π—á–∞—Å —Ñ–æ–∫—É—Å –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ä–∞–∑–±–æ—Ä–µ –æ—à–∏–±–∫–∏. ü§ù", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def btn_passport(m):
    uid = m.from_user.id
    ensure_user(uid); save_state(uid, intent="passport", step="intro")
    bot.send_message(m.chat.id, "–û—Ç–∫—Ä–æ—é –ø–∞—Å–ø–æ—Ä—Ç –ø–æ–∑–∂–µ. –ü–æ–∫–∞ —É–ª—É—á—à–∞–µ–º –±–∞–∑–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. üëå", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def btn_week(m):
    uid = m.from_user.id
    ensure_user(uid); save_state(uid, intent="week_panel", step="intro")
    bot.send_message(m.chat.id, "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏ –ø–æ–¥–∫–ª—é—á–∏–º –ø–æ—Å–ª–µ –ª–æ–≥–∏–∫–∏ —Ä–∞–∑–±–æ—Ä–∞. üëç", reply_markup=main_menu())

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def btn_panic(m):
    uid = m.from_user.id
    ensure_user(uid)
    # –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
        "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä (—á—Ç–æ –≤—ã–±–∏–ª–æ)\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )
    # –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–∞–∑–±–æ—Ä
    kb = build_inline_yesno("go_error", "stay_chat")
    bot.send_message(m.chat.id, "–•–æ—á–µ—à—å –ø–æ—Ç–æ–º –∫–æ—Ä–æ—Ç–∫–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —ç—Ç–æ –ø–æ —à–∞–≥–∞–º?", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def btn_dontknow(m):
    uid = m.from_user.id
    ensure_user(uid); save_state(uid, intent="greet", step=None)
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫: 1) –∫–æ—Ä–æ—Ç–∫–æ –ø–æ–≥–æ–≤–æ—Ä–∏–º ‚Äî —á—Ç–æ –±–æ–ª–∏—Ç; 2) —è –ø—Ä–µ–¥–ª–æ–∂—É, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å; 3) –ø–æ –∂–µ–ª–∞–Ω–∏—é –ø–µ—Ä–µ–π–¥—ë–º –∫ —Ä–∞–∑–±–æ—Ä—É.\n"
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ –º–µ—à–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ. ",
        reply_markup=main_menu()
    )

# --- CALLBACKS (inline ¬´–î–∞/–ù–µ—Ç¬ª) ---
@bot.callback_query_handler(func=lambda call: call.data in {"go_error","stay_chat"})
def cb_switch(call):
    if call.data == "go_error":
        m = call.message
        start_error_flow(m, from_button=True)
    else:
        bot.answer_callback_query(call.id, "–û–∫, –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–≤–æ–±–æ–¥–Ω–æ.")
        # –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º

# --- –û–°–ù–û–í–ù–û–ô –°–í–û–ë–û–î–ù–´–ô –î–ò–ê–õ–û–ì + –ú–Ø–ì–ö–ò–ô –ü–ï–†–ï–•–û–î ---
@bot.message_handler(content_types=["text"])
def free_text(m: types.Message):
    uid = m.from_user.id
    ensure_user(uid)
    st = load_state(uid)
    text_in = (m.text or "").strip()

    # —è–≤–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã ¬´—Ä–∞–∑–±–æ—Ä –æ—à–∏–±–∫–∏¬ª
    low = text_in.lower()
    if low in START_ERROR_WORDS or any(w in low for w in START_ERROR_WORDS):
        return start_error_flow(m, from_button=False)

    # –µ—Å–ª–∏ —É–∂–µ –≤ error-–ø–æ—Ç–æ–∫–µ ‚Äî –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —à–∞–≥–æ–≤
    if st.get("intent") == "error":
        return error_flow_router(m, st)

    # —Å–≤–æ–±–æ–¥–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä: –∞–∫–∫—É–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2‚Äì3 —Ä–µ–ø–ª–∏–∫–∏, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–∞–∑–±–æ—Ä
    data = st.get("data") or {}
    buf = data.get("chat_buf", [])
    turns = int(data.get("buf_turns", 0))
    buf.append(text_in)
    turns += 1
    save_state(uid, patch={"chat_buf": buf[-6:], "buf_turns": turns})

    # –µ—Å–ª–∏ —É–∂–µ –∑–≤—É—á–∏—Ç –æ—à–∏–±–∫–∞ ‚Äî –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ–π—Ç–∏
    if looks_like_error_free_text(text_in) and turns >= 2:
        summary = summarize_for_user(buf)
        kb = build_inline_yesno("go_error", "stay_chat", text_yes="–î–∞, —Ä–∞–∑–±–µ—Ä—ë–º", text_no="–ü–æ–∫–∞ –ø–æ–≥–æ–≤–æ—Ä–∏–º")
        bot.send_message(
            m.chat.id,
            f"–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É—é —Ç–∞–∫: *{summary}*\n–ü–µ—Ä–µ–π–¥—ë–º –∫ –∫–æ—Ä–æ—Ç–∫–æ–º—É —Ä–∞–∑–±–æ—Ä—É –ø–æ —à–∞–≥–∞–º?",
            reply_markup=kb
        )
        return

    # –∏–Ω–∞—á–µ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∫–æ—Ä–æ—Ç–∫–æ
    try:
        rsp = oa.responses.create(
            model="gpt-4.1-mini",
            input=(
                "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —ç–º–ø–∞—Ç–∏—á–Ω–æ, 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ –æ–±—â–∏—Ö –ø–æ—É—á–µ–Ω–∏–π. "
                "–ó–∞–¥–∞–π 1 —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å. –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç—å –≤ —Å–¥–µ–ª–∫–∞—Ö, –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–π –º–µ—Ç–æ–¥—ã; "
                "–º—è–≥–∫–æ —Å–ø—Ä–æ—Å–∏, —á—Ç–æ –±–æ–ª–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ."
                f"\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {text_in}"
            )
        )
        out = rsp.output_text.strip()
    except Exception:
        out = "–ü–æ–Ω–∏–º–∞—é. –ú–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å, –≤ —á—ë–º –∏–º–µ–Ω–Ω–æ —Å–µ–π—á–∞—Å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ —Å–¥–µ–ª–∫–∞—Ö?"

    bot.send_message(m.chat.id, out, reply_markup=main_menu())

# ---------- –†–ê–ó–ë–û–† –û–®–ò–ë–ö–ò (MERCEDES –∫—Ä–∞—Ç–∫–∏–π) ----------
def start_error_flow(m: types.Message, from_button: bool):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="error", step="ask_error", patch={"mer": {}, "chat_buf": [], "buf_turns": 0})
    bot.send_message(
        m.chat.id,
        "–û–ø–∏—à–∏ *–æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É* 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –µ—Å—Ç—å).",
        reply_markup=main_menu()
    )

def error_flow_router(m: types.Message, st: Dict[str, Any]):
    uid = m.from_user.id
    step = st.get("step")
    mer = (st.get("data") or {}).get("mer") or {}

    def ask(next_step: str, prompt: str):
        save_state(uid, step=next_step)
        bot.send_message(m.chat.id, prompt, reply_markup=main_menu())

    if step == "ask_error":
        mer["error_text"] = m.text.strip()
        save_state(uid, patch={"mer": mer})
        # —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ (–æ–¥–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
        bot.send_message(m.chat.id, f"–ó–∞—Ñ–∏–∫—Å–∏—Ä—É—é —Ç–∞–∫: _{mer['error_text']}_\n–û–∫?", reply_markup=build_inline_yesno("mer_ok","mer_edit","–î–∞","–£—Ç–æ—á–Ω–∏—Ç—å"))
        return

    # –∫–æ–ª–ª–±–µ–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
@bot.callback_query_handler(func=lambda call: call.data in {"mer_ok","mer_edit"})
def cb_mer_ok(call):
    uid = call.from_user.id
    st = load_state(uid)
    mer = (st.get("data") or {}).get("mer") or {}
    if call.data == "mer_edit":
        save_state(uid, step="ask_error")
        bot.edit_message_text("–•–æ—Ä–æ—à–æ, –ø–æ–ø—Ä–∞–≤—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –æ—à–∏–±–∫–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).", call.message.chat.id, call.message.message_id)
        return
    # ok ‚Üí –∫ –±–ª–æ–∫–∞–º MERCEDES
    save_state(uid, step="ask_ctx", patch={"mer": mer})
    bot.edit_message_text("–ö–û–ù–¢–ï–ö–°–¢. –ö–æ–≥–¥–∞ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)", call.message.chat.id, call.message.message_id)

@bot.message_handler(func=lambda m: load_state(m.from_user.id).get("intent")=="error")
def error_steps(m: types.Message):
    uid = m.from_user.id
    st = load_state(uid)
    step = st.get("step")
    mer = (st.get("data") or {}).get("mer") or {}

    def set_and_ask(next_step: str, field: str, value: str, prompt: str):
        mer[field] = value.strip()
        save_state(uid, step=next_step, patch={"mer": mer})
        bot.send_message(m.chat.id, prompt, reply_markup=main_menu())

    if step == "ask_ctx":
        return set_and_ask("ask_em", "context", m.text, "–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? (–ø–∞—Ä–∞ —Å–ª–æ–≤)")

    if step == "ask_em":
        return set_and_ask("ask_th", "emotions", m.text, "–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (1‚Äì2 —Ñ—Ä–∞–∑—ã)")

    if step == "ask_th":
        return set_and_ask("ask_bhv", "thoughts", m.text, "–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≥–ª–∞–≥–æ–ª–∞–º–∏.")

    if step == "ask_bhv":
        mer["behavior"] = m.text.strip()
        # —Ä–µ–∑—é–º–µ + –Ω–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä
        summary = (
            f"*–†–µ–∑—é–º–µ:*\n"
            f"–û—à–∏–±–∫–∞: _{mer.get('error_text','')}_\n"
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {mer.get('context','')}\n"
            f"–≠–º–æ—Ü–∏–∏: {mer.get('emotions','')}\n"
            f"–ú—ã—Å–ª–∏: {mer.get('thoughts','')}\n"
            f"–ü–æ–≤–µ–¥–µ–Ω–∏–µ: {mer.get('behavior','')}\n\n"
            f"–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º *–Ω–æ–≤—É—é —Ü–µ–ª—å* –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º (—á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)?"
        )
        save_state(uid, step="ask_goal", patch={"mer": mer})
        return bot.send_message(m.chat.id, summary, reply_markup=main_menu())

    if step == "ask_goal":
        mer["new_goal"] = m.text.strip()
        save_state(uid, step="ask_ops", patch={"mer": mer})
        return bot.send_message(m.chat.id, "–ö–∞–∫–∏–µ *2‚Äì3 —à–∞–≥–∞* –ø–æ–º–æ–≥—É—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è —ç—Ç–æ–π —Ü–µ–ª–∏ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–∫–∞—Ö?", reply_markup=main_menu())

    if step == "ask_ops":
        mer["ops"] = m.text.strip()
        # done —É—Ä–æ–∫–∞ 1 (–º—è–≥–∫–∞—è –≤–µ—Ä—Å–∏—è). –í –ø—Ä–æ–¥–µ —Ç—É—Ç ‚Äî insert –≤ errors
        save_state(uid, intent="greet", step=None, patch={"last_mercedes": mer})
        bot.send_message(
            m.chat.id,
            "–ì–æ—Ç–æ–≤–æ. –°–æ—Ö—Ä–∞–Ω–∏–ª –∫—Ä–∞—Ç–∫–∏–π —Ä–∞–∑–±–æ—Ä. –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –¥–æ–±–∞–≤–∏–º —ç—Ç–æ –≤ –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –ø–æ–∑–∂–µ. "
            "–ú–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
            reply_markup=main_menu()
        )
        return

# ---------- FLASK / WEBHOOK ----------
app = Flask(__name__)

@app.get("/")
def root():
    return "OK"

@app.get("/health")
def health():
    return jsonify({"status":"ok","time": datetime.now(timezone.utc).isoformat()})

MAX_BODY = 1_000_000

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if WEBHOOK_SECRET:
        if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
            abort(401)
    if request.content_length and request.content_length > MAX_BODY:
        abort(413)
    try:
        upd = Update.de_json(request.get_json(force=True), bot)
        bot.process_new_updates([upd])
    except Exception as e:
        log.exception("webhook error: %s", e)
        abort(500)
    return "OK"

# ---------- –õ–û–ö–ê–õ–¨–ù–´–ô –°–¢–ê–†–¢ (polling) ----------
if __name__ == "__main__":
    # –î–ª—è Render –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±—Ö—É–∫; –ª–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å polling (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å).
    # bot.infinity_polling(timeout=30, long_polling_timeout=30, skip_pending=True)
    port = int(os.getenv("PORT", "10000"))
    app.run(host="0.0.0.0", port=port)
