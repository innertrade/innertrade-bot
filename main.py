# main.py ‚Äî Innertrade (Render/Webhook)
import os, json, logging, re, threading
from datetime import datetime
from typing import Optional, Dict, Any

from flask import Flask, request, abort, jsonify
from telebot import TeleBot, types
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError, ProgrammingError

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ---------- ENV ----------
TELEGRAM_TOKEN     = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY")
DATABASE_URL       = os.getenv("DATABASE_URL")
PUBLIC_URL         = os.getenv("PUBLIC_URL")            # https://innertrade-bot.onrender.com
WEBHOOK_PATH       = os.getenv("WEBHOOK_PATH", "wbhk_9t3x")
TG_WEBHOOK_SECRET  = os.getenv("TG_WEBHOOK_SECRET")
MODE               = os.getenv("MODE", "webhook")       # webhook | polling
ALLOW_GPT          = os.getenv("ALLOW_GPT", "1")        # "1" ‚Äî GPT –≤–∫–ª—é—á—ë–Ω –¥–ª—è off-script

if not TELEGRAM_TOKEN:  raise RuntimeError("TELEGRAM_TOKEN missing")
if not PUBLIC_URL:      raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")
if MODE not in ("webhook", "polling"): raise RuntimeError("MODE must be webhook|polling")

# ---------- OPENAI ----------
client = None
if OPENAI_API_KEY and ALLOW_GPT == "1":
    try:
        from openai import OpenAI
        client = OpenAI(api_key=OPENAI_API_KEY)
        logging.info("OpenAI client OK")
    except Exception as e:
        logging.warning(f"OpenAI init failed: {e}")

# ---------- DB ----------
engine = None
if DATABASE_URL:
    try:
        engine = create_engine(DATABASE_URL, pool_pre_ping=True)
        with engine.begin() as conn:
            # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–±–µ–∑ –ª–∏—à–Ω–µ–π ¬´–º–∞–≥–∏–∏¬ª)
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS users (
              user_id    BIGINT PRIMARY KEY,
              mode       TEXT NOT NULL DEFAULT 'course',
              created_at TIMESTAMPTZ DEFAULT now(),
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS user_state (
              user_id    BIGINT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
              intent     TEXT,
              step       TEXT,
              data       JSONB,
              updated_at TIMESTAMPTZ DEFAULT now()
            );
            """))
            conn.execute(text("""
            CREATE TABLE IF NOT EXISTS errors (
              id                BIGSERIAL PRIMARY KEY,
              user_id           BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
              error_text        TEXT NOT NULL,
              pattern_behavior  TEXT,
              pattern_emotion   TEXT,
              pattern_thought   TEXT,
              positive_goal     TEXT,
              tote_goal         TEXT,
              tote_ops          TEXT,
              tote_check        TEXT,
              tote_exit         TEXT,
              checklist_pre     TEXT,
              checklist_post    TEXT,
              created_at        TIMESTAMPTZ DEFAULT now()
            );
            """))
        logging.info("DB connected & migrated")
    except OperationalError as e:
        logging.warning(f"DB not available: {e}")
        engine = None
else:
    logging.info("No DATABASE_URL ‚Äî running without DB")

def db_exec(sql: str, params: Optional[Dict[str, Any]] = None):
    if not engine: return None
    with engine.begin() as conn:
        return conn.execute(text(sql), params or {})

def ensure_user(uid: int):
    if not engine: return
    db_exec("INSERT INTO users(user_id) VALUES (:u) ON CONFLICT (user_id) DO NOTHING", {"u": uid})
    db_exec("""
        INSERT INTO user_state(user_id, intent, step, data)
        VALUES (:u, 'idle', NULL, '{}'::jsonb)
        ON CONFLICT (user_id) DO NOTHING
    """, {"u": uid})

def save_state(uid: int, intent: Optional[str] = None, step: Optional[str] = None, data: Optional[dict] = None):
    if not engine: return
    ensure_user(uid)
    cur = db_exec("SELECT data FROM user_state WHERE user_id=:u", {"u": uid})
    existing = (cur.fetchone() or [None])[0] if cur else None
    merged = {}
    if isinstance(existing, dict): merged.update(existing)
    if isinstance(data, dict):     merged.update(data)
    db_exec("""
        INSERT INTO user_state(user_id, intent, step, data, updated_at)
        VALUES (:u, COALESCE(:intent,'idle'), :step, CAST(:data AS jsonb), now())
        ON CONFLICT (user_id) DO UPDATE
        SET intent = COALESCE(EXCLUDED.intent, user_state.intent),
            step   = EXCLUDED.step,
            data   = EXCLUDED.data,
            updated_at = now()
    """, {"u": uid, "intent": intent, "step": step, "data": json.dumps(merged)})

def get_state(uid: int) -> dict:
    if not engine: return {"intent":"idle","step":None,"data":{}}
    cur = db_exec("SELECT intent, step, data FROM user_state WHERE user_id=:u", {"u": uid})
    row = cur.fetchone() if cur else None
    if not row: return {"intent":"idle","step":None,"data":{}}
    return {"intent": row[0], "step": row[1], "data": row[2] or {}}

def save_error_row(uid: int, payload: dict):
    if not engine: return
    fields = {
        "user_id": uid,
        "error_text": payload.get("error_text","").strip(),
        "pattern_behavior": payload.get("pattern_behavior"),
        "pattern_emotion":  payload.get("pattern_emotion"),
        "pattern_thought":  payload.get("pattern_thought"),
        "positive_goal":    payload.get("positive_goal"),
        "tote_goal":        payload.get("tote_goal"),
        "tote_ops":         payload.get("tote_ops"),
        "tote_check":       payload.get("tote_check"),
        "tote_exit":        payload.get("tote_exit"),
        "checklist_pre":    payload.get("checklist_pre"),
        "checklist_post":   payload.get("checklist_post"),
    }
    db_exec("""
        INSERT INTO errors(user_id,error_text,pattern_behavior,pattern_emotion,pattern_thought,
                           positive_goal,tote_goal,tote_ops,tote_check,tote_exit,checklist_pre,checklist_post)
        VALUES (:user_id,:error_text,:pattern_behavior,:pattern_emotion,:pattern_thought,
                :positive_goal,:tote_goal,:tote_ops,:tote_check,:tote_exit,:checklist_pre,:checklist_post)
    """, fields)

# ---------- TELEGRAM ----------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ¬´–º—è–≥–∫–∏–µ¬ª —Ñ—Ä–∞–∑—ã
HELLO_VARIANTS = ("–ø—Ä–∏–≤–µ—Ç", "hi", "hello", "–∑–¥—Ä–∞–≤", "–¥–∞—Ä–æ–≤–∞", "—Å–∞–ª—é—Ç")
def is_hello(txt: str) -> bool:
    t = (txt or "").strip().lower()
    return any(t.startswith(w) for w in HELLO_VARIANTS)

def looks_vague(s: str) -> bool:
    # ¬´–∏–Ω–æ–≥–¥–∞¬ª, ¬´–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–Ω–∏¬ª, ¬´–±—ã–≤–∞–µ—Ç¬ª, ¬´–∫–∞–∫ –ø–æ–ª—É—á–∏—Ç—Å—è¬ª ‚Äî –ø—Ä–æ—Å–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É
    vague = r"(–∏–Ω–æ–≥–¥–∞|–ø–æ—Ä–æ–π|–±—ã–≤–∞–µ—Ç|–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω(—ã–µ|—ã—Ö)\s–¥–Ω(–∏|—è)|–∫–∞–∫\s–ø–æ–ª—É—á–∏—Ç—Å—è|–∫–æ–≥–¥–∞\s–∫–∞–∫|—á–∞—Å—Ç–æ\s–±—ã–≤–∞–µ—Ç)"
    return bool(re.search(vague, (s or "").lower()))

def ensure_behavior_level(s: str) -> bool:
    # done-—É—Å–ª–æ–≤–∏–µ –¥–ª—è —à–∞–≥–∞ 1 (—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏): –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ/–ø–æ–≤–µ–¥–µ–Ω–∏–µ
    # –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ ‚Äî –Ω–∞–ª–∏—á–∏–µ –≥–ª–∞–≥–æ–ª–æ–≤ –≤ –∏–Ω—Ñ–∏–Ω–∏—Ç–∏–≤–µ/1–ª –µ–¥.—á. —Ç–∏–ø–∏—á–Ω—ã—Ö –¥–ª—è –Ω–∞—à–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    verbs = r"(–≤—Ö–æ–∂(—É|–∏—Ç—å)|–∑–∞–∫—Ä—ã–≤–∞(—é|—Ç—å)|–¥–≤–∏–≥–∞(—é|—Ç—å)|–ø–µ—Ä–µ–∑–∞(—Ö–æ–∂(—É|–∏—Ç—å))|–ø—Ä–æ–ø—É—Å–∫–∞(—é|—Ç—å)|–∂–¥—É|—Å–ø–µ—à—É|—Å–∫–∞—á(—É|–∏—Ç—å))"
    return bool(re.search(verbs, (s or "").lower()))

# ---------- GPT fallback ----------
def gpt_reply(user_text: str, context: str) -> Optional[str]:
    if not client: return None
    try:
        prompt = (
            "–¢—ã ‚Äî –∫–æ—É—á-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ —Ç—Ä–µ–π–¥–µ—Ä–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —Ç–µ–ø–ª–æ, –ø–æ-–¥–µ–ª–æ–≤–æ–º—É.\n"
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—à—ë–ª –≤ —Å—Ç–æ—Ä–æ–Ω—É –æ—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è, –º—è–≥–∫–æ –æ—Ç–≤–µ—Ç—å –ø–æ —Å—É—Ç–∏, "
            "–∑–∞—Ç–µ–º –≤–µ—Ä–Ω–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Å—Ü–µ–Ω–∞—Ä–∏—è –æ–¥–Ω–æ–π —Ñ—Ä–∞–∑–æ–π.\n\n"
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —à–∞–≥–∞:\n{context}\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞: {user_text}\n"
        )
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role":"system","content":"–¢—ã –ø–æ–º–æ–≥–∞—Ç–æ—Ä –ø–æ Innertrade."},
                      {"role":"user","content": prompt}],
            temperature=0.3,
            max_tokens=220
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        logging.warning(f"OpenAI error: {e}")
        return None

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------
@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m):
    ensure_user(m.from_user.id)
    save_state(m.from_user.id, intent="idle", step=None, data={})
    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ *Innertrade*.\n"
        "–ú–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ –∏–ª–∏ –ø–æ–π—Ç–∏ –ø–æ —à–∞–≥–∞–º. –ß–µ–º –∑–∞–π–º—ë–º—Å—è?\n"
        "_–ö–æ–º–∞–Ω–¥—ã: /status /ping_",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    # –ö–æ—Ä–æ—Ç–∫–∞—è —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    db_ok = False
    try:
        if engine:
            db_exec("SELECT 1")
            db_ok = True
    except Exception:
        db_ok = False
    gpt_ok = bool(client) and ALLOW_GPT == "1"
    bot.send_message(
        m.chat.id,
        f"–°—Ç–∞—Ç—É—Å: ‚úÖ –±–æ—Ç –∂–∏–≤–æ–π\n–ë–î: {'‚úÖ' if db_ok else '‚ö†Ô∏è off'}\nGPT: {'‚úÖ' if gpt_ok else '‚Äî'}\n–†–µ–∂–∏–º: {MODE}",
        reply_markup=main_menu()
    )

# ---------- –ò–Ω—Ç–µ–Ω—Ç—ã (–∫–Ω–æ–ø–∫–∏) ----------
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def intent_error_btn(m): return intent_error(m)

def intent_error(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="error", step="ask_error", data={"error_payload":{}})
    bot.send_message(
        m.chat.id,
        "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É **1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏** *–Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞*.\n"
        "–ü—Ä–∏–º–µ—Ä—ã: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞¬ª, ¬´–∑–∞–∫—Ä—ã–≤–∞—é –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
def intent_strategy_btn(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="strategy", step=None)
    bot.send_message(
        m.chat.id,
        "–û–∫, —Å–æ–±–µ—Ä—ë–º –¢–° –ø–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É:\n"
        "1) –¶–µ–ª–∏ ¬∑ 2) –°—Ç–∏–ª—å ¬∑ 3) –†—ã–Ω–∫–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n"
        "4) –í—Ö–æ–¥/–≤—ã—Ö–æ–¥ ¬∑ 5) –†–∏—Å–∫ ¬∑ 6) –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ ¬∑ 7) –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def intent_passport_btn(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="passport", step=None)
    bot.send_message(
        m.chat.id,
        "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. 1/6) –ù–∞ –∫–∞–∫–∏—Ö —Ä—ã–Ω–∫–∞—Ö/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö —Ç–æ—Ä–≥—É–µ—à—å?",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def intent_week_panel_btn(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="week_panel", step=None)
    bot.send_message(
        m.chat.id,
        "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏:\n‚Ä¢ –§–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n‚Ä¢ –ü–ª–∞–Ω (3 —à–∞–≥–∞)\n‚Ä¢ –õ–∏–º–∏—Ç—ã\n‚Ä¢ –†–∏—Ç—É–∞–ª—ã\n‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∞—è —Ä–µ—Ç—Ä–æ –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def intent_panic_btn(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="panic", step=None)
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n"
        "4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä (—á—Ç–æ –≤—ã–±–∏–ª–æ)\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ–∑–∏—Ü–∏—é –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def intent_start_help_btn(m):
    uid = m.from_user.id
    ensure_user(uid)
    save_state(uid, intent="start_help", step=None)
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω)\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°\n"
        "–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º ‚Äî –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏?",
        reply_markup=main_menu()
    )

# ---------- –î–∏–∞–ª–æ–≥ –ø–æ MERCEDES (—É—Ä–æ–∫ 1) ----------
def ask_next_mercedes(m, st: dict):
    step = st.get("step")
    data = st.get("data", {})
    payload = data.get("error_payload", {})

    order = [
        ("ask_context",  "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç –æ—à–∏–±–∫–µ? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"),
        ("ask_emotions", "–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? –ö–∞–∫ –æ—â—É—â–∞–µ—Ç—Å—è –≤ —Ç–µ–ª–µ? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)"),
        ("ask_thoughts", "–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (—Ü–∏—Ç–∞—Ç–∞–º–∏, 1‚Äì2 —Ñ—Ä–∞–∑—ã)"),
        ("ask_behavior", "–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ —Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≥–ª–∞–≥–æ–ª–∞–º–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"),
        ("ask_goal",     "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π *–ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å* –±—É–¥—É—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è (—á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –ø–æ –ø–ª–∞–Ω—É). 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."),
        ("ask_tote",     "–¢–µ–ø–µ—Ä—å TOTE.\n*T (—Ü–µ–ª—å)*: –∫–∞–∫ –∑–≤—É—á–∏—Ç —Ü–µ–ª—å –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö –±—É–¥—É—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–∞ 3 —Å–¥–µ–ª–∫–∏ –ø–æ–¥—Ä—è–¥?"),
    ]
    next_key = None
    if step == "ask_error": next_key = "ask_context"
    else:
        for i, (key, _) in enumerate(order):
            if step == key and i+1 < len(order):
                next_key = order[i+1][0]
                break
    if not next_key:
        # –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ü–∏–∫–ª TOTE —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏
        save_state(m.from_user.id, intent="error", step="ask_tote_ops")
        bot.send_message(m.chat.id, "O (–æ–ø–µ—Ä–∞—Ü–∏–∏): –∫–∞–∫–∏–µ —à–∞–≥–∏ –ø—Ä–µ–¥–ø—Ä–∏–º–µ—à—å, —á—Ç–æ–±—ã —É–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–ª—å? (—á–µ–∫-–ª–∏—Å—Ç –∏–∑ 2‚Äì4 –ø—É–Ω–∫—Ç–æ–≤)")
        return

    # —Å–ø—Ä–æ—Å–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
    save_state(m.from_user.id, intent="error", step=next_key)
    text_map = dict(order)
    bot.send_message(m.chat.id, text_map[next_key])

@bot.message_handler(func=lambda msg: get_state(msg.from_user.id).get("intent")=="error" and get_state(msg.from_user.id).get("step") is not None, content_types=["text"])
def error_flow(m):
    uid = m.from_user.id
    st = get_state(uid)
    step = st.get("step")
    data = st.get("data", {})
    payload = data.get("error_payload", {}) or {}

    user_text = (m.text or "").strip()

    # –°–ø–µ—Ü-–º—è–≥–∫–æ—Å—Ç—å: –ø—Ä–∏–≤–µ—Ç/—É—Ç–æ—á–Ω–µ–Ω–∏—è
    if is_hello(user_text):
        bot.send_message(m.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ë–µ—Ä–µ–∂–Ω–æ –¥–≤–∏–≥–∞–µ–º—Å—è –ø–æ —à–∞–≥–∞–º. –ï—Å–ª–∏ —á—Ç–æ ‚Äî –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω—è—Ç—å –ø–æ –ø—É—Ç–∏. üôÇ")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤
    if step == "ask_error":
        # done-—É—Å–ª–æ–≤–∏–µ: –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        if not ensure_behavior_level(user_text) or looks_vague(user_text):
            bot.send_message(
                m.chat.id,
                "–•–æ—á—É –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å **–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ**. –ü—Ä–∏–º–µ—Ä: ¬´–≤—Ö–æ–∂—É –¥–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞¬ª.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ *—É—Ä–æ–≤–Ω–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è/–Ω–∞–≤—ã–∫–∞* (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)."
            )
            return
        payload["error_text"] = user_text
        save_state(uid, intent="error", step="ask_context", data={"error_payload": payload})
        bot.send_message(m.chat.id, "–ü—Ä–∏–Ω—è—Ç–æ. –ü–æ–π–¥—ë–º –¥–∞–ª—å—à–µ.")
        bot.send_message(m.chat.id, "–ö–û–ù–¢–ï–ö–°–¢. –í –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç –æ—à–∏–±–∫–µ? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
        return

    elif step == "ask_context":
        if looks_vague(user_text):
            bot.send_message(m.chat.id, "–ó–≤—É—á–∏—Ç –æ–±—â–æ. –ú–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ: ¬´–ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≥–æ —Ñ–ª—ç—Ç–∞¬ª, ¬´–ø–æ—Å–ª–µ —Å–µ—Ä–∏–∏ —Å—Ç–æ–ø–æ–≤¬ª, ¬´–∫–æ–≥–¥–∞ —Ö–æ—á—É –¥–æ–≥–Ω–∞—Ç—å –ø–ª–∞–Ω¬ª?")
            return
        payload["pattern_context"] = user_text
        save_state(uid, intent="error", step="ask_emotions", data={"error_payload": payload})
        bot.send_message(m.chat.id, "–≠–ú–û–¶–ò–ò. –ß—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? –ö–∞–∫ –æ—â—É—â–∞–µ—Ç—Å—è –≤ —Ç–µ–ª–µ? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")
        return

    elif step == "ask_emotions":
        payload["pattern_emotion"] = user_text
        save_state(uid, intent="error", step="ask_thoughts", data={"error_payload": payload})
        bot.send_message(m.chat.id, "–ú–´–°–õ–ò. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (—Ü–∏—Ç–∞—Ç–∞–º–∏, 1‚Äì2 —Ñ—Ä–∞–∑—ã)")
        return

    elif step == "ask_thoughts":
        payload["pattern_thought"] = user_text
        save_state(uid, intent="error", step="ask_behavior", data={"error_payload": payload})
        bot.send_message(m.chat.id, "–ü–û–í–ï–î–ï–ù–ò–ï. –ß—Ç–æ —Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≥–ª–∞–≥–æ–ª–∞–º–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
        return

    elif step == "ask_behavior":
        if not ensure_behavior_level(user_text):
            bot.send_message(m.chat.id, "–û–ø–∏—à–∏ –∏–º–µ–Ω–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ (–≥–ª–∞–≥–æ–ª–∞–º–∏): –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–≤—ã—Ö–æ–∂—É –ø–æ –ø–µ—Ä–≤–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏¬ª, ¬´–¥–≤–∏–≥–∞—é —Å—Ç–æ–ø¬ª.")
            return
        payload["pattern_behavior"] = user_text
        save_state(uid, intent="error", step="ask_goal", data={"error_payload": payload})
        bot.send_message(m.chat.id, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π *–ø–æ–∑–∏—Ç–∏–≤–Ω—É—é —Ü–µ–ª—å* –±—É–¥—É—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è (—á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å –ø–æ –ø–ª–∞–Ω—É). 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.")
        return

    elif step == "ask_goal":
        payload["positive_goal"] = user_text
        save_state(uid, intent="error", step="ask_tote", data={"error_payload": payload})
        bot.send_message(m.chat.id, "–¢–µ–ø–µ—Ä—å TOTE.\n*T (—Ü–µ–ª—å)*: –∫–∞–∫ –∑–≤—É—á–∏—Ç —Ü–µ–ª—å –≤ —Ç–µ—Ä–º–∏–Ω–∞—Ö –±—É–¥—É—â–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–∞ 3 —Å–¥–µ–ª–∫–∏ –ø–æ–¥—Ä—è–¥?")
        return

    elif step == "ask_tote":
        payload["tote_goal"] = user_text
        save_state(uid, intent="error", step="ask_tote_ops", data={"error_payload": payload})
        bot.send_message(m.chat.id, "O (–æ–ø–µ—Ä–∞—Ü–∏–∏): –∫–∞–∫–∏–µ —à–∞–≥–∏ –ø—Ä–µ–¥–ø—Ä–∏–º–µ—à—å, —á—Ç–æ–±—ã —É–¥–µ—Ä–∂–∞—Ç—å —Ü–µ–ª—å? (—á–µ–∫-–ª–∏—Å—Ç –∏–∑ 2‚Äì4 –ø—É–Ω–∫—Ç–æ–≤)")
        return

    elif step == "ask_tote_ops":
        payload["tote_ops"] = user_text
        save_state(uid, intent="error", step="ask_tote_check", data={"error_payload": payload})
        bot.send_message(m.chat.id, "T (–ø—Ä–æ–≤–µ—Ä–∫–∞): –∫–∞–∫ –ø–æ–π–º—ë—à—å, —á—Ç–æ –∏–¥—ë—à—å –ø–æ –ø–ª–∞–Ω—É? –ö—Ä–∏—Ç–µ—Ä–∏–π –Ω–∞ —Å–¥–µ–ª–∫—É/—Å–µ—Ä–∏—é.")
        return

    elif step == "ask_tote_check":
        payload["tote_check"] = user_text
        save_state(uid, intent="error", step="ask_tote_exit", data={"error_payload": payload})
        bot.send_message(m.chat.id, "E (–≤—ã—Ö–æ–¥): —á—Ç–æ —Å—á–∏—Ç–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ü–∏–∫–ª–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä: *3 —Å–¥–µ–ª–∫–∏ –ø–æ–¥—Ä—è–¥ –±–µ–∑ —Å–¥–≤–∏–≥–∞ —Å—Ç–æ–ø–∞*)")
        return

    elif step == "ask_tote_exit":
        payload["tote_exit"] = user_text

        # –ß–µ–∫-–ª–∏—Å—Ç—ã (–º–∏–Ω–∏–º—É–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
        payload["checklist_pre"]  = "‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç –≤—Ö–æ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω\n‚Ä¢ –°–µ—Ç–∞–ø 100%\n‚Ä¢ –Ø –≤ —Ä–µ—Å—É—Ä—Å–µ (–Ω–µ—Ç —Å–ø–µ—à–∫–∏/—Ç—Ä–µ–≤–æ–≥–∏)"
        payload["checklist_post"] = "‚Ä¢ –ù–µ —Ç—Ä–æ–≥–∞–ª —Å—Ç–æ–ø/—Ç–µ–π–∫\n‚Ä¢ –í—ã—à–µ–ª –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é\n‚Ä¢ –ö–æ—Ä–æ—Ç–∫–∞—è –∑–∞–º–µ—Ç–∫–∞ –≤ –±–ª–∞–Ω–∫"

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –æ—à–∏–±–∫–∏
        save_error_row(uid, payload)

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        save_state(uid, intent="idle", step=None, data={"error_payload":{}})

        # –ò—Ç–æ–≥
        bot.send_message(
            m.chat.id,
            "–ì–æ—Ç–æ–≤–æ. –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª —Ä–∞–∑–±–æ—Ä:\n"
            "‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω: –ø–æ–≤–µ–¥–µ–Ω–∏–µ/—ç–º–æ—Ü–∏–∏/–º—ã—Å–ª–∏/–∫–æ–Ω—Ç–µ–∫—Å—Ç\n"
            "‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è —Ü–µ–ª—å\n‚Ä¢ TOTE (—Ü–µ–ª—å/–æ–ø–µ—Ä–∞—Ü–∏–∏/–ø—Ä–æ–≤–µ—Ä–∫–∞/–≤—ã—Ö–æ–¥)\n"
            "‚Ä¢ –ß–µ–∫-–ª–∏—Å—Ç—ã –ø–µ—Ä–µ–¥/–ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞\n\n"
            "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏?"
        )
        return

    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
    ask_next_mercedes(m, st)

# ---------- –°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç / –±–æ–ª—Ç–æ–≤–Ω—è / off-script ----------
@bot.message_handler(content_types=["text"])
def fallback(m):
    uid = m.from_user.id
    ensure_user(uid)
    st = get_state(uid)
    intent = st.get("intent") or "idle"
    step   = st.get("step")

    txt = (m.text or "").strip()

    # –î—Ä—É–∂–µ–ª—é–±–Ω–æ–µ ¬´–ø—Ä–∏–≤–µ—Ç¬ª
    if is_hello(txt):
        bot.send_message(
            m.chat.id,
            "–ü—Ä–∏–≤–µ—Ç! –ú–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ –∏–ª–∏ –∑–∞–Ω—è—Ç—å—Å—è –∑–∞–¥–∞—á–µ–π. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –±–æ–ª–∏—Ç —Å–µ–π—á–∞—Å.",
            reply_markup=main_menu()
        )
        return

    # –ï—Å–ª–∏ –º—ã –≤–Ω—É—Ç—Ä–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è error ‚Äî –æ—Ç–¥–∞—ë–º –≤ error_flow (–Ω–æ —Å—é–¥–∞ –ø–æ–ø–∞–¥—ë–º, –µ—Å–ª–∏ step=None)
    if intent == "error" and step:
        return  # –¥–æ —Å—é–¥–∞ –æ–±—ã—á–Ω–æ –Ω–µ –¥–æ–π–¥—ë–º ‚Äî –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä

    # Off-script: –∫–æ—Ä–æ—Ç–∫–∞—è –ø–æ–º–æ—â—å + –º—è–≥–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∫ —à–∞–≥–∞–º
    context = f"intent={intent}, step={step}"
    reply = gpt_reply(txt, context) if client else None
    if reply:
        bot.send_message(m.chat.id, reply, reply_markup=main_menu())
    else:
        # –±–µ–∑ GPT ‚Äî –ø—Ä–æ—Å—Ç–æ –º—è–≥–∫–æ
        bot.send_message(
            m.chat.id,
            "–ü–æ–Ω–∏–º–∞—é. –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —Ç–∞–∫: –º–æ–∂–µ—à—å –∫–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—Å–∞—Ç—å, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–ª—É—á–∏–ª–æ—Å—å, "
            "–∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚Äî –Ω–∞—á–Ω—ë–º —Å —Ä–∞–∑–±–æ—Ä–∞ –æ—à–∏–±–∫–∏.",
            reply_markup=main_menu()
        )

# ---------- Flask (Webhook) ----------
app = Flask(__name__)

@app.get("/")
def root():
    return "OK"

@app.get("/health")
def health():
    return jsonify({"status":"ok","time": datetime.utcnow().isoformat()+"Z"})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    if TG_WEBHOOK_SECRET and request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–ª–∞ (‚âà1 –ú–ë)
    if request.content_length and request.content_length > 1_000_000:
        abort(413)
    update = request.get_json(force=True, silent=True)
    if not update: return "no update", 200
    bot.process_new_updates([types.Update.de_json(update)])
    return "ok", 200

def start_polling():
    try:
        bot.remove_webhook()
    except Exception as e:
        logging.warning(f"Webhook remove warn: {e}")
    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(timeout=30, long_polling_timeout=30, skip_pending=True)

if __name__ == "__main__":
    if MODE == "polling":
        t = threading.Thread(target=start_polling, daemon=True)
        t.start()
        port = int(os.getenv("PORT", "10000"))
        app.run(host="0.0.0.0", port=port)
    else:
        # webhook-—Ä–µ–∂–∏–º ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–Ω–∏–º–∞–µ–º Flask
        port = int(os.getenv("PORT", "10000"))
        logging.info("Flask up (webhook mode)")
        app.run(host="0.0.0.0", port=port)
