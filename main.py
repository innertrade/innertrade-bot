import os, logging, json, threading
from datetime import datetime, timezone
from flask import Flask, request, abort, jsonify
from telebot import TeleBot, types
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

# ---------- LOGGING ----------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ---------- ENV ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º
DATABASE_URL   = os.getenv("DATABASE_URL")
PUBLIC_URL     = os.getenv("PUBLIC_URL")  # https://innertrade-bot.onrender.com
WEBHOOK_PATH   = os.getenv("WEBHOOK_PATH", "wbhk_9t3x")
TG_SECRET      = os.getenv("TG_WEBHOOK_SECRET")

if not TELEGRAM_TOKEN: raise RuntimeError("TELEGRAM_TOKEN missing")
if not PUBLIC_URL:     raise RuntimeError("PUBLIC_URL missing (e.g., https://your-app.onrender.com)")
if not TG_SECRET:      raise RuntimeError("TG_WEBHOOK_SECRET missing")

# ---------- DB ----------
engine = create_engine(DATABASE_URL, pool_pre_ping=True) if DATABASE_URL else None

def db_exec(sql: str, params: dict | None = None, fetch: bool = False):
    if not engine:
        return None
    try:
        with engine.begin() as conn:
            res = conn.execute(text(sql), params or {})
            return res.fetchall() if fetch else None
    except SQLAlchemyError as e:
        logging.exception("DB error")
        return None

def ensure_user(uid: int):
    db_exec("""
        INSERT INTO users(user_id) VALUES (:uid)
        ON CONFLICT (user_id) DO NOTHING
    """, {"uid": uid})

def clear_state(uid: int):
    ensure_user(uid)
    db_exec("""
        INSERT INTO user_state(user_id, intent, step, data, updated_at)
        VALUES (:uid, 'greet', NULL, '{}'::jsonb, now())
        ON CONFLICT (user_id) DO UPDATE
        SET intent='greet', step=NULL, data='{}'::jsonb, updated_at=now()
    """, {"uid": uid})

def set_state(uid: int, intent: str, step: str | None = None, data: dict | None = None):
    ensure_user(uid)
    db_exec("""
        INSERT INTO user_state(user_id, intent, step, data, updated_at)
        VALUES (:uid, :intent, :step, COALESCE(:data, '{}'::jsonb), now())
        ON CONFLICT (user_id) DO UPDATE
        SET intent=:intent, step=:step, data=COALESCE(:data, '{}'::jsonb), updated_at=now()
    """, {"uid": uid, "intent": intent, "step": step, "data": json.dumps(data or {})})

def get_state(uid: int):
    rows = db_exec("SELECT intent, step, data FROM user_state WHERE user_id=:uid", {"uid": uid}, fetch=True)
    if rows:
        intent, step, data = rows[0]
        return intent, step, data or {}
    return "greet", None, {}

# ---------- TELEGRAM ----------
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")

def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

def safe_handler(fn):
    def wrap(message):
        try:
            return fn(message)
        except Exception:
            logging.exception("Handler error")
            try:
                bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ –º–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ /reset")
            except Exception:
                pass
    return wrap

# ---------- COMMANDS ----------
@bot.message_handler(commands=["ping"])
@safe_handler
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
@safe_handler
def cmd_status(m):
    uid = m.from_user.id
    intent, step, _ = get_state(uid)
    db_ok = "ok" if engine else "no-db"
    payload = {
        "ok": True,
        "time": datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S%z"),
        "intent": intent,
        "step": step,
        "db": db_ok
    }
    bot.send_message(m.chat.id, f"```json\n{json.dumps(payload, ensure_ascii=False, indent=2)}\n```", parse_mode="Markdown")

@bot.message_handler(commands=["start", "menu"])
@safe_handler
def cmd_start(m):
    uid = m.from_user.id
    clear_state(uid)
    first_name = (m.from_user.first_name or "").strip() or "–¥—Ä—É–≥"
    bot.send_message(
        m.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name}! –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ ‚Äî –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["reset"])
@safe_handler
def cmd_reset(m):
    uid = m.from_user.id
    clear_state(uid)
    first_name = (m.from_user.first_name or "").strip() or "–¥—Ä—É–≥"
    bot.send_message(
        m.chat.id,
        f"üîÑ –°–±—Ä–æ—Å–∏–ª –∫–æ–Ω—Ç–µ–∫—Å—Ç.\n–ü—Ä–∏–≤–µ—Ç, {first_name}! –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ ‚Äî –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
        reply_markup=main_menu()
    )

# ---------- INTENTS (–∫–Ω–æ–ø–∫–∏) ----------
@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
@safe_handler
def intent_error_btn(m):
    set_state(m.from_user.id, "error", "ask_error")
    bot.send_message(
        m.chat.id,
        "–û–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—É—é –æ—à–∏–±–∫—É 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ (–∫–∞–∫ —Ç—ã –µ—ë –¥–µ–ª–∞–µ—à—å)."
    )

@bot.message_handler(func=lambda msg: msg.text == "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é")
@safe_handler
def intent_strategy_btn(m):
    set_state(m.from_user.id, "strategy", None)
    bot.send_message(
        m.chat.id,
        "–û–∫, —Å–æ–±–µ—Ä—ë–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¢–°:\n1) —Å—Ç–∏–ª—å –∏ —Ä—ã–Ω–∫–∏\n2) –≤—Ö–æ–¥\n3) —Å—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ/–≤—ã—Ö–æ–¥\n4) —Ä–∏—Å–∫\n–ù–∞—á–Ω—ë–º —Å–æ —Å—Ç–∏–ª—è –∏ —Ä—ã–Ω–∫–æ–≤.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
@safe_handler
def intent_passport_btn(m):
    set_state(m.from_user.id, "passport", "start")
    bot.send_message(m.chat.id, "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞: –∫–∞–∫–∏–µ —Ä—ã–Ω–∫–∏/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ç–æ—Ä–≥—É–µ—à—å?")

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
@safe_handler
def intent_week_btn(m):
    set_state(m.from_user.id, "week_panel", "focus")
    bot.send_message(m.chat.id, "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏: –∫–∞–∫–æ–π —Ñ–æ–∫—É—Å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5‚Äì7 –¥–Ω–µ–π? (–æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)")

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
@safe_handler
def intent_panic_btn(m):
    set_state(m.from_user.id, "panic", None)
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω\n2) –ó–∞–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª/–≤–∫–ª–∞–¥–∫—É\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
@safe_handler
def intent_start_help_btn(m):
    set_state(m.from_user.id, "start_help", None)
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫:\n1) –ó–∞–ø–æ–ª–Ω–∏–º –ø–∞—Å–ø–æ—Ä—Ç (1‚Äì2 –º–∏–Ω)\n2) –í—ã–±–µ—Ä–µ–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏\n3) –°–æ–±–µ—Ä—ë–º —Å–∫–µ–ª–µ—Ç –¢–°\n–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º ‚Äî –ø–∞—Å–ø–æ—Ä—Ç –∏–ª–∏ —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏?",
        reply_markup=main_menu()
    )

# ---------- TEXT FLOW ----------
@bot.message_handler(content_types=["text"])
@safe_handler
def text_router(m):
    uid = m.from_user.id
    intent, step, data = get_state(uid)

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞ ¬´–æ—à–∏–±–∫–∞¬ª
    if intent == "error":
        if step == "ask_error":
            txt = (m.text or "").strip()
            if len(txt) < 5:
                bot.send_message(m.chat.id, "–î–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—É—Ç–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).")
                return
            # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ errors.error_text
            set_state(uid, "error", "mercedes_context", {"error": txt})
            bot.send_message(m.chat.id, "–ü—Ä–∏–Ω—è–ª. –ö–û–ù–¢–ï–ö–°–¢: –∫–æ–≥–¥–∞ —ç—Ç–æ —á–∞—â–µ —Å–ª—É—á–∞–µ—Ç—Å—è? (–∫–æ—Ä–æ—Ç–∫–æ)")
            return
        elif step == "mercedes_context":
            data["context"] = (m.text or "").strip()
            set_state(uid, "error", "mercedes_emotions", data)
            bot.send_message(m.chat.id, "–≠–ú–û–¶–ò–ò: —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")
            return
        elif step == "mercedes_emotions":
            data["emotions"] = (m.text or "").strip()
            set_state(uid, "error", "mercedes_thoughts", data)
            bot.send_message(m.chat.id, "–ú–´–°–õ–ò: —á—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ –≤ —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç? (1‚Äì2 —Ñ—Ä–∞–∑—ã)")
            return
        elif step == "mercedes_thoughts":
            data["thoughts"] = (m.text or "").strip()
            set_state(uid, "error", "mercedes_behavior", data)
            bot.send_message(m.chat.id, "–ü–û–í–ï–î–ï–ù–ò–ï: —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–µ–ª–∞–µ—à—å? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)")
            return
        elif step == "mercedes_behavior":
            data["behavior"] = (m.text or "").strip()
            # –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
            summary = (
                f"–†–µ–∑—é–º–µ:\n‚Ä¢ –û—à–∏–±–∫–∞: {data.get('error')}\n"
                f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {data.get('context')}\n"
                f"‚Ä¢ –≠–º–æ—Ü–∏–∏: {data.get('emotions')}\n"
                f"‚Ä¢ –ú—ã—Å–ª–∏: {data.get('thoughts')}\n"
                f"‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω–∏–µ: {data.get('behavior')}"
            )
            set_state(uid, "error", "ask_goal", data)
            bot.send_message(m.chat.id, summary + "\n\n–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º (—á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è)?")
            return
        elif step == "ask_goal":
            data["goal"] = (m.text or "").strip()
            set_state(uid, "error", "ask_ops", data)
            bot.send_message(m.chat.id, "–ö–∞–∫–∏–µ 2‚Äì3 —à–∞–≥–∞ –ø–æ–º–æ–≥—É—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è —ç—Ç–æ–π —Ü–µ–ª–∏ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–∫–∞—Ö?")
            return
        elif step == "ask_ops":
            data["ops"] = (m.text or "").strip()
            set_state(uid, "error", None, data)
            bot.send_message(m.chat.id, "–ì–æ—Ç–æ–≤–æ. –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ –Ω–µ–¥–µ–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å –ø–æ–∑–∂–µ.", reply_markup=main_menu())
            return

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –º—è–≥–∫–∏–π –æ—Ç–≤–µ—Ç + –º–µ–Ω—é
    bot.send_message(m.chat.id, "–ü—Ä–∏–Ω—è–ª. –ú–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=main_menu())

# ---------- FLASK / WEBHOOK ----------
app = Flask(__name__)

@app.get("/")
def root():
    return "OK"

@app.get("/health")
def health():
    return jsonify({"status": "ok", "time": datetime.now(timezone.utc).isoformat()})

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_SECRET:
        abort(401)
    cl = request.content_length or 0
    if cl > 1_000_000:
        abort(413)
    update = request.get_data(cache=False, as_text=True)
    bot.process_new_updates([telebot.types.Update.de_json(update)])
    return "OK"

def setup_webhook():
    import requests
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook"
    payload = {
        "url": f"{PUBLIC_URL}/{WEBHOOK_PATH}",
        "secret_token": TG_SECRET,
        "allowed_updates": json.dumps(["message","callback_query"]),
        "drop_pending_updates": True
    }
    r = requests.post(url, data=payload, timeout=10)
    logging.info("setWebhook: %s", r.text)

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        setup_webhook()
    except Exception:
        logging.exception("setWebhook failed")

    port = int(os.getenv("PORT", "10000"))
    logging.info("Starting web server on %s ‚Ä¶", port)
    app.run(host="0.0.0.0", port=port)
