# main.py
import os
import logging
from collections import deque

from flask import Flask
import telebot
from telebot import types
from openai import OpenAI

# ====== Env ======
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PORT = int(os.getenv("PORT", "10000"))

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
if not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# ====== Logs ======
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s"
)

# ====== OpenAI client (–Ω–æ–≤—ã–π SDK) ======
client = OpenAI(api_key=OPENAI_API_KEY)

# ====== Telegram bot ======
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–Ω–∏–º–µ–º –≤–µ–±—Ö—É–∫ (–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º polling)
try:
    bot.remove_webhook()
    logging.info("Webhook removed (ok)")
except Exception as e:
    logging.warning(f"Webhook remove warn: {e}")

# ====== –ü—Ä–æ—Å—Ç–∞—è ¬´–ø–∞–º—è—Ç—å¬ª –¥–∏–∞–ª–æ–≥–∞ (per-user)
# deque —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ä–æ—Å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
history = {}  # uid -> deque of messages (dict role/content)
MAX_TURNS = 20

def ensure_history(uid: int):
    if uid not in history:
        history[uid] = deque(maxlen=MAX_TURNS)

def ask_gpt(uid: int, text: str) -> str:
    """–í—ã–∑–æ–≤ Chat Completions —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π SDK."""
    ensure_history(uid)
    msgs = list(history[uid])  # —Å–∫–æ–ø–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
    msgs.append({"role": "user", "content": text})

    # –≤—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.5,
        messages=msgs
    )
    reply = (resp.choices[0].message.content or "").strip()

    # –æ–±–Ω–æ–≤–∏–º –∏—Å—Ç–æ—Ä–∏—é
    history[uid].append({"role": "user", "content": text})
    history[uid].append({"role": "assistant", "content": reply})
    return reply

def send_long(chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞–Ω–∫–∞–º–∏. –ë–µ–∑ reply_to!"""
    MAX = 3500
    for i in range(0, len(text), MAX):
        bot.send_message(chat_id, text[i:i+MAX])

# ====== –ö–æ–º–∞–Ω–¥—ã ======
@bot.message_handler(commands=['start'])
def cmd_start(m):
    uid = m.from_user.id
    history[uid] = deque(maxlen=MAX_TURNS)

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("–ú–æ–¥—É–ª—å 1"), types.KeyboardButton("–ú–æ–¥—É–ª—å 2"))
    kb.row(types.KeyboardButton("–ß–µ–∫-–ª–∏—Å—Ç"), types.KeyboardButton("–§–∏–∫—Å–∞—Ü–∏—è"), types.KeyboardButton("–°–±—Ä–æ—Å"))

    bot.send_message(
        m.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade.\n"
        "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /ping /reset",
        reply_markup=kb
    )

@bot.message_handler(commands=['ping'])
def cmd_ping(m):
    # —Ç–æ–ª—å–∫–æ "pong" ‚Äî –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    bot.reply_to(m, "pong")

@bot.message_handler(commands=['reset'])
def cmd_reset(m):
    history[m.from_user.id] = deque(maxlen=MAX_TURNS)
    bot.reply_to(m, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

# ====== –ö–Ω–æ–ø–∫–∏ ======
BUTTON_SET = {"–ú–æ–¥—É–ª—å 1", "–ú–æ–¥—É–ª—å 2", "–ß–µ–∫-–ª–∏—Å—Ç", "–§–∏–∫—Å–∞—Ü–∏—è", "–°–±—Ä–æ—Å"}
ALIASES = {
    "–ú–æ–¥—É–ª—å 1": "–ì–æ—Ç–æ–≤",          # —è–∫–æ—Ä—å –ø–æ–¥ –Ω–∞—à–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    "–ú–æ–¥—É–ª—å 2": "–¢–°",             # —è–∫–æ—Ä—å –ø–æ–¥ –Ω–∞—à–∏ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    "–ß–µ–∫-–ª–∏—Å—Ç": "—á–µ–∫–ª–∏—Å—Ç",
    "–§–∏–∫—Å–∞—Ü–∏—è": "—Ñ–∏–∫—Å–∞—Ü–∏—è",
}

@bot.message_handler(func=lambda x: isinstance(x.text, str) and x.text.strip() in BUTTON_SET)
def on_buttons(m):
    uid = m.from_user.id
    t = m.text.strip()

    if t == "–°–±—Ä–æ—Å":
        history[uid] = deque(maxlen=MAX_TURNS)
        bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω. –ù–∞–∂–º–∏ ¬´–ú–æ–¥—É–ª—å 1¬ª –∏–ª–∏ ¬´–ú–æ–¥—É–ª—å 2¬ª.")
        return

    prompt = ALIASES.get(t, t)
    try:
        reply = ask_gpt(uid, prompt)
    except Exception as e:
        logging.exception("ask_gpt error (buttons)")
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

# ====== –õ—é–±–æ–π —Ç–µ–∫—Å—Ç ======
@bot.message_handler(func=lambda _: True)
def on_text(m):
    uid = m.from_user.id
    text = (m.text or "").strip()
    if not text:
        return
    try:
        reply = ask_gpt(uid, text)
    except Exception as e:
        logging.exception("ask_gpt error (text)")
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

# ====== Keepalive HTTP (–¥–ª—è Render) ======
app = Flask(__name__)

@app.route("/", methods=["GET", "HEAD"])
def home():
    return "OK", 200

@app.route("/health", methods=["GET"])
def health():
    # UptimeRobot –±—É–¥–µ—Ç –±–∏—Ç—å —Å—é–¥–∞ –∏ –æ–∂–∏–¥–∞—Ç—å "pong"
    return "pong", 200

if __name__ == "__main__":
    logging.info("Starting keepalive web server‚Ä¶")
    # Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç—Ä–µ–¥–µ –ø–æ–¥–Ω–∏–º–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ ‚Äî Render –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω –ø—Ä–æ—Ü–µ—Å—Å.
    # –û–Ω —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç, –∞ –±–æ—Ç –∫—Ä—É—Ç–∏—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ polling –≤ –¥—Ä—É–≥–æ–º —Ç—Ä–µ–¥–µ.
    # –ü–æ—ç—Ç–æ–º—É –∑–∞–ø—É—Å—Ç–∏–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç—Ä–µ–¥–µ —Ä—É–∫–∞–º–∏:
    import threading
    def run_flask():
        app.run(host="0.0.0.0", port=PORT, debug=False)

    threading.Thread(target=run_flask, daemon=True).start()

    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
