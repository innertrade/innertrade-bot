# main.py
import os
import json
import logging
from datetime import datetime
from typing import Optional, Dict, Any

from flask import Flask, request, jsonify, abort
from telebot import TeleBot, types
from telebot.types import Update

from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

from openai import OpenAI

# =========================
# –õ–û–ì–ò
# =========================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s"
)
log = logging.getLogger("innertrade")

# =========================
# ENV
# =========================
TELEGRAM_TOKEN    = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY    = os.getenv("OPENAI_API_KEY")
DATABASE_URL      = os.getenv("DATABASE_URL")
PUBLIC_URL        = os.getenv("PUBLIC_URL")
WEBHOOK_PATH      = os.getenv("WEBHOOK_PATH")           # –Ω–∞–ø—Ä. wbhk_9t3x
TG_WEBHOOK_SECRET = os.getenv("TG_WEBHOOK_SECRET")      # –ª—é–±–æ–π —Å–µ–∫—Ä–µ—Ç –¥–ª—è X-Telegram-Bot-Api-Secret-Token

for k, v in {
    "TELEGRAM_TOKEN": TELEGRAM_TOKEN,
    "OPENAI_API_KEY": OPENAI_API_KEY,
    "DATABASE_URL": DATABASE_URL,
    "PUBLIC_URL": PUBLIC_URL,
    "WEBHOOK_PATH": WEBHOOK_PATH,
    "TG_WEBHOOK_SECRET": TG_WEBHOOK_SECRET,
}.items():
    if not v:
        raise RuntimeError(f"Missing ENV: {k}")

# =========================
# –ö–õ–ò–ï–ù–¢–´
# =========================
bot = TeleBot(TELEGRAM_TOKEN, parse_mode="Markdown")
ai  = OpenAI(api_key=OPENAI_API_KEY)

# =========================
# DB
# =========================
engine = create_engine(DATABASE_URL, pool_pre_ping=True)

def db_ok() -> bool:
    try:
        with engine.connect() as c:
            c.execute(text("SELECT 1"))
        return True
    except Exception as e:
        log.error(f"DB check error: {e}")
        return False

def ensure_user(uid: int):
    try:
        with engine.begin() as c:
            c.execute(text("""
                INSERT INTO users(user_id) VALUES (:uid)
                ON CONFLICT (user_id) DO NOTHING
            """), {"uid": uid})
    except SQLAlchemyError as e:
        log.error(f"ensure_user: {e}")

def set_state(uid: int, intent: Optional[str]=None, step: Optional[str]=None, data: Optional[dict]=None):
    try:
        with engine.begin() as c:
            c.execute(text("""
                INSERT INTO user_state(user_id, intent, step, data, updated_at)
                VALUES (:uid, :intent, :step, COALESCE(:data,'{}'::jsonb), NOW())
                ON CONFLICT (user_id) DO UPDATE SET
                    intent = COALESCE(:intent, user_state.intent),
                    step   = COALESCE(:step, user_state.step),
                    data   = COALESCE(:data, user_state.data),
                    updated_at = NOW()
            """), {"uid": uid, "intent": intent, "step": step, "data": json.dumps(data) if isinstance(data, dict) else data})
    except SQLAlchemyError as e:
        log.error(f"set_state: {e}")

def get_state(uid: int) -> Dict[str, Any]:
    try:
        with engine.begin() as c:
            r = c.execute(text("SELECT intent, step, data FROM user_state WHERE user_id=:uid"), {"uid": uid}).mappings().first()
            if r:
                return {"intent": r["intent"], "step": r["step"], "data": r["data"] or {}}
            return {"intent": "greet", "step": None, "data": {}}
    except SQLAlchemyError as e:
        log.error(f"get_state: {e}")
        return {"intent": "greet", "step": None, "data": {}}

def save_error_block(uid: int, fields: Dict[str, Optional[str]]):
    # fields: error_text, pattern_behavior, pattern_emotion, pattern_thought,
    #         positive_goal, tote_goal, tote_ops, tote_check, tote_exit, checklist_pre, checklist_post
    try:
        with engine.begin() as c:
            cols = ["user_id"] + list(fields.keys())
            vals = {**fields, "user_id": uid}
            sql_cols = ", ".join(cols)
            sql_params = ", ".join([f":{k}" for k in cols])
            c.execute(text(f"INSERT INTO errors ({sql_cols}) VALUES ({sql_params})"), vals)
    except SQLAlchemyError as e:
        log.error(f"save_error_block: {e}")

# =========================
# –í–°–ü–û–ú–û–ì–ê–¢–¨
# =========================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –°–æ–±—Ä–∞—Ç—å –¢–°")
    kb.row("üìÑ –ü–∞—Å–ø–æ—Ä—Ç", "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
    kb.row("üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª", "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
    return kb

def paraphrase_error(text_ru: str) -> str:
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —Å GPT ‚Äî –±–µ–∑ ¬´–¥–æ–ø—Ä–æ—Å–∞¬ª –∏ –±–µ–∑ —Ç–µ—Ä–º–∏–Ω–∞ ¬´–ø–æ–≤–µ–¥–µ–Ω–∏–µ/–Ω–∞–≤—ã–∫¬ª
    try:
        msg = [
            {"role":"system","content":"–ö–æ—Ä–æ—Ç–∫–æ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π —Ç—Ä–µ–π–¥–µ—Ä—Å–∫—É—é –ø—Ä–æ–±–ª–µ–º—É –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ). –ë–µ–∑ –æ—Ü–µ–Ω–æ–∫ –∏ —Å–æ–≤–µ—Ç–æ–≤."},
            {"role":"user","content": text_ru}
        ]
        rsp = ai.chat.completions.create(model="gpt-4o-mini", messages=msg, temperature=0.2, max_tokens=60)
        return rsp.choices[0].message.content.strip()
    except Exception as e:
        log.warning(f"paraphrase_error fallback: {e}")
        return text_ru.strip()

def gentle_probe(previous: str) -> str:
    # 2‚Äì3 –º—è–≥–∫–∏—Ö —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ MERCEDES
    try:
        msg = [
            {"role":"system","content":"–¢—ã –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ—É—á –ø–æ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –ó–∞–¥–∞–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–æ–±–ª–µ–º–µ, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ—ë –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ (—É—Ä–æ–≤–µ–Ω—å –¥–µ–π—Å—Ç–≤–∏—è), –±–µ–∑ –æ—Ü–µ–Ω–æ–∫ –∏ —Ç–µ—Ä–º–∏–Ω–æ–≤. 1 –≤–æ–ø—Ä–æ—Å."},
            {"role":"user","content": previous}
        ]
        rsp = ai.chat.completions.create(model="gpt-4o-mini", messages=msg, temperature=0.2, max_tokens=80)
        return rsp.choices[0].message.content.strip()
    except Exception as e:
        log.warning(f"gentle_probe fallback: {e}")
        return "–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —è –ø–æ–Ω—è–ª —Å—É—Ç—å? –ì–¥–µ –∏–º–µ–Ω–Ω–æ —ç—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ —Å–ª—É—á–∞–µ—Ç—Å—è ‚Äî –≤ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –∏–ª–∏ –≤—ã—Ö–æ–¥–∞?"

def short_coach_reply(user_text: str, context: Dict[str,Any]) -> str:
    # –°–≤–æ–±–æ–¥–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä ¬´–Ω–∞ –ø–µ—Ä–≤–æ–π –ª–∏–Ω–∏–∏¬ª ‚Äî –º—è–≥–∫–æ, –ø–æ –¥–µ–ª—É, –Ω–æ –±–µ–∑ —É—Ö–æ–¥–∞ –≤ –¥–ª–∏–Ω–Ω—ã–µ –ª–µ–∫—Ü–∏–∏
    try:
        sys = (
            "–¢—ã —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫ Innertrade. –û–±—â–∞–π—Å—è –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º. "
            "–ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –¥–µ–ª–∏—Ç—Å—è –±–æ–ª—å—é ‚Äî –æ—Ç–∑–µ—Ä–∫–∞–ª—å, —É—Ç–æ—á–Ω–∏ 1 –¥–µ—Ç–∞–ª—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –º—è–≥–∫–∏–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥. "
            "–ù–µ –¥–∞–≤–∏ ¬´—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π¬ª, –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (MERCEDES/TOTE). "
            "–ù–µ –¥–∞–≤–∞–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Å–æ–≤–µ—Ç–æ–≤. –ù–µ –ø—Ä–æ—Å–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
        )
        msgs = [{"role":"system","content":sys},{"role":"user","content":user_text}]
        rsp = ai.chat.completions.create(model="gpt-4o-mini", messages=msgs, temperature=0.4, max_tokens=90)
        return rsp.choices[0].message.content.strip()
    except Exception as e:
        log.warning(f"short_coach_reply fallback: {e}")
        return "–ü–æ–Ω–∏–º–∞—é. –†–∞—Å—Å–∫–∞–∂–∏, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ —Å–¥–µ–ª–∫–∏ —ç—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ –≤—Å–ø–ª—ã–≤–∞–µ—Ç ‚Äî –≤—Ö–æ–¥, —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –≤—ã—Ö–æ–¥?"

def want_move_to_mercedes(track: Dict[str,Any]) -> bool:
    # –ö–∞–∫ —Ç–æ–ª—å–∫–æ –µ—Å—Ç—å –∫–æ—Ä–æ—Ç–∫–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ + 1‚Äì2 —É—Ç–æ—á–Ω–µ–Ω–∏—è ‚Äî –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å
    probes = track.get("probes_count", 0)
    err    = (track.get("error_text") or "").strip()
    return len(err) > 0 and probes >= 2

# =========================
# FLASK (–í–ï–ë–•–£–ö + HEALTH/STATUS)
# =========================
app = Flask(__name__)

@app.get("/health")
def health():
    return jsonify({"status":"ok","time": datetime.utcnow().isoformat()})

@app.get("/status")
def status():
    ok = db_ok()
    # –ø—Ä–æ–±—É–µ–º –≤—ã—Ç–∞—â–∏—Ç—å –æ–¥–Ω–æ–≥–æ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –±–µ–∑ auth)
    sample = None
    try:
        with engine.connect() as c:
            r = c.execute(text("SELECT user_id,intent,step FROM user_state ORDER BY updated_at DESC LIMIT 1")).mappings().first()
            if r:
                sample = dict(r)
    except Exception:
        sample = None
    return jsonify({
        "ok": True,
        "time": datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S+00:00"),
        "intent": sample["intent"] if sample else None,
        "step": sample["step"] if sample else None,
        "db": "ok" if ok else "fail"
    })

MAX_BODY = 1_000_000

@app.post(f"/{WEBHOOK_PATH}")
def webhook():
    # –°–µ–∫—Ä–µ—Ç-—Ö–µ–¥–µ—Ä Telegram: X-Telegram-Bot-Api-Secret-Token
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != TG_WEBHOOK_SECRET:
        abort(401)
    cl = request.content_length or 0
    if cl > MAX_BODY:
        abort(413)
    try:
        update = Update.de_json(request.get_json(force=True))
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        log.error(f"webhook error: {e}")
        return "ERR", 500

# =========================
# –•–ï–ù–î–õ–ï–†–´
# =========================

@bot.message_handler(commands=["start","menu","reset"])
def cmd_start(m):
    uid = m.from_user.id
    ensure_user(uid)
    set_state(uid, intent="greet", step=None, data={"probes_count":0,"error_text":""})
    name = (m.from_user.first_name or "").strip() or "–¥—Ä—É–≥"
    bot.send_message(
        m.chat.id,
        f"üëã –ü—Ä–∏–≤–µ—Ç, {name}! –ú–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å ‚Äî —á—Ç–æ –±–æ–ª–∏—Ç –≤ —Ç–æ—Ä–≥–æ–≤–ª–µ ‚Äî –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø—É–Ω–∫—Ç –Ω–∏–∂–µ.",
        reply_markup=main_menu()
    )

@bot.message_handler(commands=["ping"])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=["status"])
def cmd_status(m):
    uid = m.from_user.id
    st = get_state(uid)
    ok = db_ok()
    bot.send_message(
        m.chat.id,
        "```\n" + json.dumps({
            "ok": True,
            "time": datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S"),
            "intent": st.get("intent"),
            "step": st.get("step"),
            "db": "ok" if ok else "fail",
        }, ensure_ascii=False, indent=2) + "\n```",
        parse_mode="Markdown"
    )

# ----- –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é -----

@bot.message_handler(func=lambda msg: msg.text == "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞")
def btn_error(m):
    uid = m.from_user.id
    ensure_user(uid)
    set_state(uid, intent="error", step="ask_error", data={"probes_count":0,"error_text":""})
    bot.send_message(
        m.chat.id,
        "–†–∞—Å—Å–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–¥—ë—Ç –Ω–µ —Ç–∞–∫. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π –æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞—Ö ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–∞–∫ –µ—Å—Ç—å.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üß© –°–æ–±—Ä–∞—Ç—å –¢–°")
def btn_ts(m):
    uid = m.from_user.id
    ensure_user(uid)
    set_state(uid, intent="ts", step="intro")
    bot.send_message(
        m.chat.id,
        "–ù–∞—á–Ω—ë–º —Å–æ —Å—Ç–∏–ª—è –∏ –≤—Ö–æ–¥–∞. –ö–∞–∫ –æ–±—ã—á–Ω–æ —Ç—ã –∑–∞—Ö–æ–¥–∏—à—å –≤ —Å–¥–µ–ª–∫—É –∏ –Ω–∞ –∫–∞–∫–∏—Ö –¢–§? (–ø–æ–∑–∂–µ –¥–æ–ø–æ–ª–Ω–∏–º —Å—Ç–æ–ø/—Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ/–ª–∏–º–∏—Ç—ã)",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üìÑ –ü–∞—Å–ø–æ—Ä—Ç")
def btn_passport(m):
    uid = m.from_user.id
    ensure_user(uid)
    set_state(uid, intent="passport", step="intro")
    bot.send_message(
        m.chat.id,
        "–ü–∞—Å–ø–æ—Ä—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞. –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å —Ä—ã–Ω–∫–æ–≤/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å.",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üóí –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏")
def btn_week(m):
    uid = m.from_user.id
    ensure_user(uid)
    set_state(uid, intent="week_panel", step="focus")
    bot.send_message(
        m.chat.id,
        "–ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏: –∫–∞–∫–æ–π –æ–¥–∏–Ω —Ñ–æ–∫—É—Å –≤–æ–∑—å–º—ë–º –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π?",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "üÜò –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø–æ–ø–ª—ã–ª")
def btn_panic(m):
    uid = m.from_user.id
    ensure_user(uid)
    set_state(uid, intent="panic", step="ritual")
    bot.send_message(
        m.chat.id,
        "–°—Ç–æ–ø-–ø—Ä–æ—Ç–æ–∫–æ–ª:\n1) –ü–∞—É–∑–∞ 2 –º–∏–Ω—É—Ç—ã\n2) –ó–∞–∫—Ä–æ–π –≥—Ä–∞—Ñ–∏–∫ –Ω–∞ 5 –º–∏–Ω—É—Ç\n3) 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤–¥–æ—Ö–æ–≤\n4) –ó–∞–ø–∏—à–∏ —Ç—Ä–∏–≥–≥–µ—Ä\n5) –í–µ—Ä–Ω–∏—Å—å –∫ –ø–ª–∞–Ω—É —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –∑–∞–∫—Ä–æ–π –ø–æ –ø—Ä–∞–≤–∏–ª—É",
        reply_markup=main_menu()
    )

@bot.message_handler(func=lambda msg: msg.text == "ü§î –ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å")
def btn_start_help(m):
    uid = m.from_user.id
    ensure_user(uid)
    set_state(uid, intent="start_help", step="choose")
    bot.send_message(
        m.chat.id,
        "–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–∞–∫: 1) –±—ã—Å—Ç—Ä–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –±–æ–ª—å, 2) –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏, 3) —Å–æ–±–µ—Ä—ë–º –∫–∞—Ä–∫–∞—Å –¢–°. –° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?",
        reply_markup=main_menu()
    )

# ----- –Ø–¥—Ä–æ —Å—Ü–µ–Ω–∞—Ä–∏—è ¬´–û—à–∏–±–∫–∞¬ª -----

def handle_error_flow(m, st):
    uid = m.from_user.id
    data = st.get("data") or {}
    step = st.get("step")

    txt = (m.text or "").strip()

    # –®–∞–≥ 1: –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É (–∏ 2‚Äì3 –º—è–≥–∫–∏—Ö —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–æ MERCEDES)
    if step in (None, "ask_error"):
        if not data.get("error_text"):
            # –ø–µ—Ä–≤–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞
            data["error_text"] = txt
            data["probes_count"] = 0
            set_state(uid, intent="error", step="probe", data=data)
            probe = gentle_probe(txt)
            bot.send_message(m.chat.id, probe)
            return
        else:
            # —É–∂–µ –±—ã–ª–∞, —É—Ç–æ—á–Ω—è–µ–º –¥–∞–ª—å—à–µ
            data["probes_count"] = int(data.get("probes_count", 0)) + 1
            # –∞–∫–∫—É–º—É–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            data["error_text"] = (data["error_text"] + " | " + txt).strip()
            if want_move_to_mercedes(data):
                # –ø–µ—Ä–µ—Ñ—Ä–∞–∑ ‚Äî –ù–ï –¥–æ—Å–ª–æ–≤–Ω–æ
                p = paraphrase_error(data["error_text"])
                data["error_paraphrase"] = p
                set_state(uid, intent="error", step="confirm", data=data)
                bot.send_message(
                    m.chat.id,
                    f"–°—É–º–º–∏—Ä—É—é —Ç–∞–∫: *{p}*\n–ü–æ–¥—Ö–æ–¥–∏—Ç? –ï—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è ‚Äî –¥–æ–±–∞–≤—å/–∏—Å–ø—Ä–∞–≤—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º."
                )
                return
            else:
                set_state(uid, intent="error", step="probe", data=data)
                probe = gentle_probe(data["error_text"])
                bot.send_message(m.chat.id, probe)
                return

    if step == "probe":
        data["probes_count"] = int(data.get("probes_count", 0)) + 1
        data["error_text"] = (data.get("error_text","") + " | " + txt).strip()
        if want_move_to_mercedes(data):
            p = paraphrase_error(data["error_text"])
            data["error_paraphrase"] = p
            set_state(uid, intent="error", step="confirm", data=data)
            bot.send_message(
                m.chat.id,
                f"–°—É–º–º–∏—Ä—É—é —Ç–∞–∫: *{p}*\n–ü–æ–¥—Ö–æ–¥–∏—Ç? –ï—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è ‚Äî –¥–æ–±–∞–≤—å/–∏—Å–ø—Ä–∞–≤—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º."
            )
            return
        else:
            set_state(uid, intent="error", step="probe", data=data)
            probe = gentle_probe(data["error_text"])
            bot.send_message(m.chat.id, probe)
            return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if step == "confirm":
        # –ª—é–±–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ ¬´–¥–∞/–æ–∫/–Ω–æ—Ä–º¬ª ‚Äî –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ; –∏–Ω–∞—á–µ ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏ –µ—â—ë —Ä–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
        ack = txt.lower()
        if any(w in ack for w in ["–¥–∞","–æ–∫","–∞–≥–∞","–ø–æ–¥—Ö–æ–¥–∏—Ç","–Ω–æ—Ä–º","–≤–µ—Ä–Ω–æ","—Å–æ–≥–ª–∞—Å–µ–Ω","—Å–æ–≥–ª–∞—Å–Ω–∞","—Å—É–ø–µ—Ä"]):
            set_state(uid, intent="error", step="mer_context", data=data)
            bot.send_message(m.chat.id, "–û–∫–µ–π. –ö–û–ù–¢–ï–ö–°–¢ ‚Äî –∫–æ–≥–¥–∞ —ç—Ç–æ –æ–±—ã—á–Ω–æ –≤—Å–ø–ª—ã–≤–∞–µ—Ç? –ß—Ç–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç?")
            return
        else:
            # –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∞–≤–∫—É, –µ—â—ë —Ä–∞–∑ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ
            merged = (data.get("error_paraphrase","") + " | " + txt).strip()
            p2 = paraphrase_error(merged)
            data["error_paraphrase"] = p2
            set_state(uid, intent="error", step="confirm", data=data)
            bot.send_message(m.chat.id, f"–ò—Å–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É: *{p2}*\n–ü–æ–¥—Ö–æ–¥–∏—Ç?")
            return

    # MERCEDES (–∫–æ—Ä–æ—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è: –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Üí —ç–º–æ—Ü–∏–∏ ‚Üí –º—ã—Å–ª–∏ ‚Üí –ø–æ–≤–µ–¥–µ–Ω–∏–µ)
    if step == "mer_context":
        data["mer_context"] = txt
        set_state(uid, intent="error", step="mer_emotions", data=data)
        bot.send_message(m.chat.id, "–≠–ú–û–¶–ò–ò ‚Äî —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å –≤ —Ç–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã? (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤)")
        return

    if step == "mer_emotions":
        data["mer_emotions"] = txt
        set_state(uid, intent="error", step="mer_thoughts", data=data)
        bot.send_message(m.chat.id, "–ú–´–°–õ–ò ‚Äî —á—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å —Å–µ–±–µ? (1‚Äì2 –∫–æ—Ä–æ—Ç–∫–∏–µ —Ñ—Ä–∞–∑—ã)")
        return

    if step == "mer_thoughts":
        data["mer_thoughts"] = txt
        set_state(uid, intent="error", step="mer_behavior", data=data)
        bot.send_message(m.chat.id, "–ü–û–í–ï–î–ï–ù–ò–ï ‚Äî —á—Ç–æ –¥–µ–ª–∞–µ—à—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ? –û–ø–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≥–ª–∞–≥–æ–ª–∞–º–∏.")
        return

    if step == "mer_behavior":
        data["mer_behavior"] = txt
        # –†–µ–∑—é–º–µ
        summary = (
            f"–†–µ–∑—é–º–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞:\n"
            f"‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {data.get('mer_context','‚Äî')}\n"
            f"‚Ä¢ –≠–º–æ—Ü–∏–∏: {data.get('mer_emotions','‚Äî')}\n"
            f"‚Ä¢ –ú—ã—Å–ª–∏: {data.get('mer_thoughts','‚Äî')}\n"
            f"‚Ä¢ –ü–æ–≤–µ–¥–µ–Ω–∏–µ: {data.get('mer_behavior','‚Äî')}"
        )
        set_state(uid, intent="error", step="goal", data=data)
        bot.send_message(m.chat.id, summary)
        bot.send_message(m.chat.id, "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–µ–º *–Ω–æ–≤—É—é —Ü–µ–ª—å* –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º: —á—Ç–æ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–æ –ø—Ä–µ–∂–Ω–µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è?")
        return

    # –¶–µ–ª—å –∏ –∫–æ—Ä–æ—Ç–∫–∏–π TOTE
    if step == "goal":
        data["positive_goal"] = txt
        set_state(uid, intent="error", step="tote_ops", data=data)
        bot.send_message(m.chat.id, "–•–æ—Ä–æ—à–æ. –ö–∞–∫–∏–µ 2‚Äì3 *—à–∞–≥–∞* –ø–æ–º–æ–≥—É—Ç –¥–µ—Ä–∂–∞—Ç—å—Å—è —ç—Ç–æ–π —Ü–µ–ª–∏ –≤ –±–ª–∏–∂–∞–π—à–∏—Ö 3 —Å–¥–µ–ª–∫–∞—Ö?")
        return

    if step == "tote_ops":
        data["tote_ops"] = txt
        set_state(uid, intent="error", step="tote_check", data=data)
        bot.send_message(m.chat.id, "–ö—Ä–∏—Ç–µ—Ä–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏: –ø–æ –∫–∞–∫–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º –ø–æ–π–º—ë—à—å, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å? (–∫—Ä–∞—Ç–∫–æ)")
        return

    if step == "tote_check":
        data["tote_check"] = txt
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫ –≤ errors
        save_error_block(uid, {
            "error_text": data.get("error_paraphrase") or data.get("error_text"),
            "pattern_behavior": data.get("mer_behavior"),
            "pattern_emotion": data.get("mer_emotions"),
            "pattern_thought": data.get("mer_thoughts"),
            "positive_goal": data.get("positive_goal"),
            "tote_goal": data.get("positive_goal"),  # –≤ –∫—Ä–∞—Ç–∫–æ–π –≤–µ—Ä—Å–∏–∏ —Ü–µ–ª—å = TOTE.goal
            "tote_ops": data.get("tote_ops"),
            "tote_check": data.get("tote_check"),
            "tote_exit": None,
            "checklist_pre": None,
            "checklist_post": None
        })
        set_state(uid, intent="idle", step=None, data={})
        bot.send_message(
            m.chat.id,
            "–ì–æ—Ç–æ–≤–æ. –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª —Ü–µ–ª—å –∏ —à–∞–≥–∏. –•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ *—Ñ–æ–∫—É—Å –Ω–µ–¥–µ–ª–∏* –∏–ª–∏ –¥–≤–∏–Ω–µ–º—Å—è –¥–∞–ª—å—à–µ?",
            reply_markup=main_menu()
        )
        return

    # –ù–∞ –≤—Å—è–∫–∏–π ‚Äî –º—è–≥–∫–∏–π –æ—Ç–≤–µ—Ç
    bot.send_message(m.chat.id, "–ü—Ä–∏–Ω—è–ª. –ü—Ä–æ–¥–æ–ª–∂–∏–º. –ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–¥—ë—Ç –Ω–µ —Ç–∞–∫ ‚Äî –∏ –¥–≤–∏–Ω–µ–º—Å—è —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.")

# ----- –°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç / —Ä–æ—É—Ç–∏–Ω–≥ -----

@bot.message_handler(content_types=["text"])
def on_text(m):
    uid = m.from_user.id
    ensure_user(uid)
    st = get_state(uid)
    intent = st.get("intent") or "greet"

    t = (m.text or "").strip()

    # –Ø–≤–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã
    if intent == "error" or t.lower().startswith(("–æ—à–∏–±–∫–∞","–ø—Ä–æ—Å–∞–¥–∫","–Ω–∞—Ä—É—à–∞—é","–Ω–µ –ø–æ —Å–µ—Ç–∞–ø—É")):
        # –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ —Å–∞–º –∑–∞—à—ë–ª —Ç–µ–∫—Å—Ç–æ–º ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        if intent != "error":
            set_state(uid, intent="error", step="ask_error", data={"probes_count":0,"error_text":""})
        handle_error_flow(m, get_state(uid))
        return

    # –í —Å–≤–æ–±–æ–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ—É—á-–æ—Ç–≤–µ—Ç —Å GPT
    reply = short_coach_reply(t, st)
    bot.send_message(m.chat.id, reply, reply_markup=main_menu())

# =========================
# –°–¢–ê–†–¢ –°–ï–†–í–ï–†–ê + –í–ï–ë–•–£–ö
# =========================
def setup_webhook():
    try:
        bot.remove_webhook()
    except Exception as e:
        log.warning(f"remove_webhook: {e}")
    url = f"{PUBLIC_URL}/{WEBHOOK_PATH}"
    ok = bot.set_webhook(
        url=url,
        secret_token=TG_WEBHOOK_SECRET,
        allowed_updates=["message","callback_query"],
        drop_pending_updates=False,
        max_connections=40
    )
    log.info(f"set_webhook({url}) -> {ok}")

if __name__ == "__main__":
    setup_webhook()
    port = int(os.getenv("PORT", "10000"))
    log.info(f"Starting Flask on 0.0.0.0:{port}")
    app.run(host="0.0.0.0", port=port)
