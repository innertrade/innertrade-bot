import os
import logging
from flask import Flask
import telebot
from telebot import types
from openai import OpenAI

from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# ====== ENV ======
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")  # —Å—Ç—Ä–æ–∫–∞ –∏–∑ Neon

if not TELEGRAM_TOKEN:
    raise RuntimeError("–ù–µ—Ç TELEGRAM_TOKEN –≤ Secrets")
if not OPENAI_KEY:
    raise RuntimeError("–ù–µ—Ç OPENAI_API_KEY –≤ Secrets")
if not DATABASE_URL:
    raise RuntimeError("–ù–µ—Ç DATABASE_URL –≤ Secrets")

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ psycopg v3: —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä
# –ü—Ä–∏–º–µ—Ä: postgresql://user:pass@host/db -> postgresql+psycopg://user:pass@host/db
if DATABASE_URL.startswith("postgresql://"):
    DATABASE_URL = "postgresql+psycopg://" + DATABASE_URL[len("postgresql://"):]

# ====== OpenAI ======
client = OpenAI(api_key=OPENAI_KEY)

# ====== –õ–æ–≥–∏ ======
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s: %(message)s")

# ====== –ë–æ—Ç ======
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode="HTML")

# –°–Ω–∏–º–∞–µ–º webhook –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
try:
    bot.remove_webhook()
    logging.info("Webhook removed (ok)")
except Exception as e:
    logging.warning(f"Webhook remove warn: {e}")

# ====== Flask keepalive ======
app = Flask(__name__)

@app.route("/")
def root():
    return "OK", 200

@app.route("/health")
def health():
    # –ü—Ä–æ–±–∞ –ë–î
    try:
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        db = "db_ok"
    except Exception as e:
        db = f"db_err: {e}"
    return f"pong | {db}", 200

# ====== DB (SQLAlchemy) ======
engine = create_engine(DATABASE_URL, pool_pre_ping=True)
SessionLocal = sessionmaker(bind=engine)

# ====== –ü–∞–º—è—Ç—å GPT-–¥–∏–∞–ª–æ–≥–∞ –≤ –û–ó–£ (–Ω–∞ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞) ======
history = {}  # user_id -> list of messages

def ask_gpt(uid, text_in):
    msgs = history.setdefault(uid, [])
    msgs.append({"role": "user", "content": text_in})
    resp = client.chat.completions.create(
        model="gpt-4o-mini",
        temperature=0.5,
        messages=msgs
    )
    reply = (resp.choices[0].message.content or "").strip()
    msgs.append({"role": "assistant", "content": reply})
    return reply

def send_long(chat_id, text):
    MAX = 3500
    for i in range(0, len(text), MAX):
        bot.send_message(chat_id, text[i:i+MAX])

# ====== –ú–µ–Ω—é/–∏–Ω—Ç–µ–Ω—Ç—ã ======
MAIN_MENU = [
    ["üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞", "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"],
    ["üóì –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏", "üìÑ –ü–∞—Å–ø–æ—Ä—Ç"],
    ["üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã"],
    ["üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º", "üîÑ –°–±—Ä–æ—Å"]
]

def show_menu(chat_id):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for row in MAIN_MENU:
        kb.row(*[types.KeyboardButton(x) for x in row])
    bot.send_message(
        chat_id,
        "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:",
        reply_markup=kb
    )

# ====== –ö–æ–º–∞–Ω–¥—ã ======
@bot.message_handler(commands=['start'])
def cmd_start(m):
    uid = m.from_user.id
    history[uid] = []
    show_menu(m.chat.id)

@bot.message_handler(commands=['ping'])
def cmd_ping(m):
    bot.send_message(m.chat.id, "pong")

@bot.message_handler(commands=['reset'])
def cmd_reset(m):
    history[m.from_user.id] = []
    bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")
    show_menu(m.chat.id)

@bot.message_handler(commands=['menu'])
def cmd_menu(m):
    show_menu(m.chat.id)

# ====== –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ======
BUTTON_ALIASES = {
    "üöë –£ –º–µ–Ω—è –æ—à–∏–±–∫–∞": "–∏–Ω—Ç–µ–Ω—Ç:–æ—à–∏–±–∫–∞",
    "üß© –•–æ—á—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é": "–∏–Ω—Ç–µ–Ω—Ç:—Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
    "üóì –ü–∞–Ω–µ–ª—å –Ω–µ–¥–µ–ª–∏": "–∏–Ω—Ç–µ–Ω—Ç:–ø–∞–Ω–µ–ª—å-–Ω–µ–¥–µ–ª–∏",
    "üìÑ –ü–∞—Å–ø–æ—Ä—Ç": "–∏–Ω—Ç–µ–Ω—Ç:–ø–∞—Å–ø–æ—Ä—Ç",
    "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å": "–∏–Ω—Ç–µ–Ω—Ç:–ø—Ä–æ–≥—Ä–µ—Å—Å",
    "üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã": "–∏–Ω—Ç–µ–Ω—Ç:–º–∞—Ç–µ—Ä–∏–∞–ª—ã",
    "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏–º": "–∏–Ω—Ç–µ–Ω—Ç:—Å–≤–æ–±–æ–¥–Ω—ã–π-–¥–∏–∞–ª–æ–≥",
    "üîÑ –°–±—Ä–æ—Å": "–∏–Ω—Ç–µ–Ω—Ç:—Å–±—Ä–æ—Å"
}

@bot.message_handler(func=lambda m: (m.text or "").strip() in BUTTON_ALIASES.keys())
def on_buttons(m):
    uid = m.from_user.id
    text = (m.text or "").strip()
    if text == "üîÑ –°–±—Ä–æ—Å":
        history[uid] = []
        bot.send_message(m.chat.id, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")
        show_menu(m.chat.id)
        return
    try:
        reply = ask_gpt(uid, BUTTON_ALIASES[text])
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

# ====== –õ—é–±–æ–π —Ç–µ–∫—Å—Ç ======
@bot.message_handler(func=lambda _: True)
def on_text(m):
    uid = m.from_user.id
    try:
        reply = ask_gpt(uid, m.text or "")
    except Exception as e:
        reply = f"–û—à–∏–±–∫–∞ GPT: {e}"
    send_long(m.chat.id, reply)

if __name__ == "__main__":
    logging.info("Starting keepalive web server‚Ä¶")
    # Render –ø–æ–¥–Ω–∏–º–µ—Ç Flask –Ω–∞ $PORT; –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å—Ç–∏–º –ª–æ–∫–∞–ª—å–Ω–æ
    port = int(os.getenv("PORT", "10000"))
    # –°—Ç–∞—Ä—Ç—É–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ‚Äî TeleBot polling –≤ –≥–ª–∞–≤–Ω–æ–º
    import threading
    threading.Thread(target=lambda: app.run(host="0.0.0.0", port=port), daemon=True).start()

    logging.info("Starting polling‚Ä¶")
    bot.infinity_polling(none_stop=True, timeout=60, long_polling_timeout=60)
